<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JavApi</name>
    </assembly>
    <members>
        <member name="T:biz.ritter.javapi.util.jar.Manifest">
            The {@code Manifest} class is used to obtain attribute information for a
            {@code JarFile} and its entries.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.Manifest.im">
            Manifest bytes are used for delayed entry parsing.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.Manifest.mainEnd">
            The end of the main attributes section in the manifest is needed in
            verification.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.#ctor(biz.ritter.javapi.util.jar.Manifest)">
             Creates a new {@code Manifest} instance. The new instance will have the
             same attributes as those found in the parameter {@code Manifest}.
            
             @param man
                        {@code Manifest} instance to obtain attributes from.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.getEntries">
             Returns a map containing the {@code Attributes} for each entry in the
             {@code Manifest}.
            
             @return the map of entry attributes.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.clone">
             Creates a copy of this {@code Manifest}. The returned {@code Manifest}
             will equal the {@code Manifest} from which it was cloned.
            
             @return a copy of this instance.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.getAttributes(System.String)">
             Returns the {@code Attributes} associated with the parameter entry
             {@code name}.
            
             @param name
                        the name of the entry to obtain {@code Attributes} from.
             @return the Attributes for the entry or {@code null} if the entry does
                     not exist.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Manifest.read(biz.ritter.javapi.io.InputStream)">
             Constructs a new {@code Manifest} instance obtaining attribute
             information from the specified input stream.
            
             @param is
                        The {@code InputStream} to read from.
             @throws IOException
                         If an error occurs reading the {@code Manifest}.
        </member>
        <member name="T:biz.ritter.javapi.util.Collections">
            <summary>
            <c>Collections</c> contains static methods which operate on <c>Collection</c> classes.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.synchronizedSortedMap``2(biz.ritter.javapi.util.SortedMap{``0,``1})">
            Returns a wrapper on the specified sorted map which synchronizes all
            access to the sorted map.
            
            @param map
                       the sorted map to wrap in a synchronized sorted map.
            @return a synchronized sorted map.
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.synchronizedMap``2(biz.ritter.javapi.util.Map{``0,``1})">
            Returns a wrapper on the specified map which synchronizes all access to
            the map.
            
            @param map
                       the map to wrap in a lock map.
            @return a lock Map.
        </member>
        <member name="F:biz.ritter.javapi.util.Collections.EMPTY_SET">
            An empty immutable instance of {@link Set}.
        </member>
        <member name="F:biz.ritter.javapi.util.Collections.EMPTY_LIST">
            An empty immutable instance of {@link List}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Collections.nCopies``1(System.Int32,``0)" -->
        <member name="M:biz.ritter.javapi.util.Collections.unmodifiableList``1(biz.ritter.javapi.util.List{``0})">
            Returns a wrapper on the specified list which throws an
            {@code UnsupportedOperationException} whenever an attempt is made to
            modify the list.
            
            @param list
                       the list to wrap in an unmodifiable list.
            @return an unmodifiable List.
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.unmodifiableCollection``1(biz.ritter.javapi.util.Collection{``0})">
            Returns a wrapper on the specified collection which throws an
            {@code UnsupportedOperationException} whenever an attempt is made to
            modify the collection.
            
            @param collection
                       the collection to wrap in an unmodifiable collection.
            @return an unmodifiable collection.
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.unmodifiableSortedMap``2(biz.ritter.javapi.util.SortedMap{``0,``1})">
            Returns a wrapper on the specified sorted map which throws an
            {@code UnsupportedOperationException} whenever an attempt is made to
            modify the sorted map.
            
            @param map
                       the sorted map to wrap in an unmodifiable sorted map.
            @return a unmodifiable sorted map
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.unmodifiableSortedSet``1(biz.ritter.javapi.util.SortedSet{``0})">
            Returns a wrapper on the specified sorted set which throws an
            {@code UnsupportedOperationException} whenever an attempt is made to
            modify the sorted set.
            
            @param set
                       the sorted set to wrap in an unmodifiable sorted set.
            @return a unmodifiable sorted set.
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.unmodifiableMap``2(biz.ritter.javapi.util.Map{``0,``1})">
            Returns a wrapper on the specified map which throws an
            {@code UnsupportedOperationException} whenever an attempt is made to
            modify the map.
            
            @param map
                       the map to wrap in an unmodifiable map.
            @return a unmodifiable map.
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.unmodifiableSet``1(biz.ritter.javapi.util.Set{``0})">
            Returns a wrapper on the specified set which throws an
            {@code UnsupportedOperationException} whenever an attempt is made to
            modify the set.
            
            @param set
                       the set to wrap in an unmodifiable set.
            @return a unmodifiable set
        </member>
        <member name="M:biz.ritter.javapi.util.Collections.singleton``1(``0)">
            Returns a set containing the specified element. The set cannot be
            modified. The set is serializable.
            
            @param object
                       the element.
            @return a set containing the element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Collections.reverseOrder``1(biz.ritter.javapi.util.Comparator{``0})" -->
        <member name="M:biz.ritter.javapi.util.Collections.reverseOrder``1">
             A comparator which reverses the natural order of the elements. The
             {@code Comparator} that's returned is {@link Serializable}.
            
             @return a {@code Comparator} instance.
             @see Comparator
             @see Comparable
             @see Serializable
        </member>
        <member name="T:biz.ritter.javapi.util.Map`2">
            <summary>
            A <code>Map</code> is a data structure consisting of a set of keys and values
            in which each key is mapped to a single value.  The class of the objects
            used as keys is declared when the <code>Map</code> is declared, as is the 
            class of the corresponding values.
            <p />
            A <code>Map</code> provides helper methods to iterate through all of the
            keys contained in it, as well as various methods to access and update 
            the key/value pairs.  
            </summary>
            <typeparam name="K">key type</typeparam>
            <typeparam name="V">value type</typeparam>
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.clear">
            Removes all elements from this {@code Map}, leaving it empty.
            
            @throws UnsupportedOperationException
                           if removing elements from this {@code Map} is not supported.
            @see #isEmpty()
            @see #size()
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.containsKey(System.Object)">
            Returns whether this {@code Map} contains the specified key.
            
            @param key
                       the key to search for.
            @return {@code true} if this map contains the specified key,
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.containsValue(System.Object)">
            Returns whether this {@code Map} contains the specified value.
            
            @param value
                       the value to search for.
            @return {@code true} if this map contains the specified value,
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.entrySet">
            Returns a {@code Set} containing all of the mappings in this {@code Map}. Each mapping is
            an instance of {@link Map.Entry}. As the {@code Set} is backed by this {@code Map},
            changes in one will be reflected in the other.
            
            @return a set of the mappings
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.get(System.Object)">
            Returns the value of the mapping with the specified key.
            
            @param key
                       the key.
            @return the value of the mapping with the specified key, or {@code null}
                    if no mapping for the specified key is found.
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.isEmpty">
            Returns whether this map is empty.
            
            @return {@code true} if this map has no elements, {@code false}
                    otherwise.
            @see #size()
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.keySet">
            Returns a set of the keys contained in this {@code Map}. The {@code Set} is backed by
            this {@code Map} so changes to one are reflected by the other. The {@code Set} does not
            support adding.
            
            @return a set of the keys.
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.put(`0,`1)">
            Maps the specified key to the specified value.
            
            @param key
                       the key.
            @param value
                       the value.
            @return the value of any previous mapping with the specified key or
                    {@code null} if there was no mapping.
            @throws UnsupportedOperationException
                           if adding to this {@code Map} is not supported.
            @throws ClassCastException
                           if the class of the key or value is inappropriate for
                           this {@code Map}.
            @throws IllegalArgumentException
                           if the key or value cannot be added to this {@code Map}.
            @throws NullPointerException
                           if the key or value is {@code null} and this {@code Map} does
                           not support {@code null} keys or values.
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.putAll(biz.ritter.javapi.util.Map{`0,`1})">
            Copies every mapping in the specified {@code Map} to this {@code Map}.
            
            @param map
                       the {@code Map} to copy mappings from.
            @throws UnsupportedOperationException
                           if adding to this {@code Map} is not supported.
            @throws ClassCastException
                           if the class of a key or a value of the specified {@code Map} is
                           inappropriate for this {@code Map}.
            @throws IllegalArgumentException
                           if a key or value cannot be added to this {@code Map}.
            @throws NullPointerException
                           if a key or value is {@code null} and this {@code Map} does not
                           support {@code null} keys or values.
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.remove(System.Object)">
            Removes a mapping with the specified key from this {@code Map}.
            
            @param key
                       the key of the mapping to remove.
            @return the value of the removed mapping or {@code null} if no mapping
                    for the specified key was found.
            @throws UnsupportedOperationException
                           if removing from this {@code Map} is not supported.
        </member>
        <member name="M:biz.ritter.javapi.util.Map`2.size">
            Returns the number of mappings in this {@code Map}.
            
            @return the number of mappings in this {@code Map}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Map`2.values" -->
        <member name="T:biz.ritter.javapi.util.SortedMap`2">
            A map that has its keys ordered. The sorting is according to either the
            natural ordering of its keys or the ordering given by a specified comparator.
        </member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.comparator">
            Returns the comparator used to compare keys in this sorted map.
            
            @return the comparator or {@code null} if the natural order is used.
        </member>
        <member name="M:biz.ritter.javapi.util.SortedMap`2.firstKey">
            Returns the first key in this sorted map.
            
            @return the first key in this sorted map.
            @throws NoSuchElementException
                           if this sorted map is empty.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.SortedMap`2.headMap(`0)" -->
        <member name="M:biz.ritter.javapi.util.SortedMap`2.lastKey">
            Returns the last key in this sorted map.
            
            @return the last key in this sorted map.
            @throws NoSuchElementException
                           if this sorted map is empty.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.SortedMap`2.subMap(`0,`0)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.SortedMap`2.tailMap(`0)" -->
        <member name="T:biz.ritter.javapi.util.Collection`1">
            {@code Collection} is the root of the collection hierarchy. It defines operations on
            data collections and the behavior that they will have in all implementations
            of {@code Collection}s.
            
            All direct or indirect implementations of {@code Collection} should implement at
            least two constructors. One with no parameters which creates an empty
            collection and one with a parameter of type {@code Collection}. This second
            constructor can be used to create a collection of different type as the
            initial collection but with the same elements. Implementations of {@code Collection}
            cannot be forced to implement these two constructors but at least all
            implementations under {@code java.util} do.
            
            Methods that change the content of a collection throw an
            {@code UnsupportedOperationException} if the underlying collection does not
            support that operation, though it's not mandatory to throw such an {@code Exception}
            in cases where the requested operation would not change the collection. In
            these cases it's up to the implementation whether it throws an
            {@code UnsupportedOperationException} or not.
            
            Methods marked with (optional) can throw an
            {@code UnsupportedOperationException} if the underlying collection doesn't
            support that method.
        </member>
        <member name="T:biz.ritter.javapi.lang.Iterable`1">
             Objects of classes that implement this interface can be used within a
             {@code foreach} statement.
            
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Iterable`1.iterator">
            Returns an {@link Iterator} for the elements in this object.
            
            @return An {@code Iterator} instance.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.add(`0)">
            Attempts to add {@code object} to the contents of this
            {@code Collection} (optional).
            
            After this method finishes successfully it is guaranteed that the object
            is contained in the collection.
            
            If the collection was modified it returns {@code true}, {@code false} if
            no changes were made.
            
            An implementation of {@code Collection} may narrow the set of accepted
            objects, but it has to specify this in the documentation. If the object
            to be added does not meet this restriction, then an
            {@code IllegalArgumentException} is thrown.
            
            If a collection does not yet contain an object that is to be added and
            adding the object fails, this method <i>must</i> throw an appropriate
            unchecked Exception. Returning false is not permitted in this case
            because it would violate the postcondition that the element will be part
            of the collection after this method finishes.
            
            @param object
                       the object to add.
            @return {@code true} if this {@code Collection} is
                    modified, {@code false} otherwise.
            
            @throws UnsupportedOperationException
                           if adding to this {@code Collection} is not supported.
            @throws ClassCastException
                           if the class of the object is inappropriate for this
                           collection.
            @throws IllegalArgumentException
                           if the object cannot be added to this {@code Collection}.
            @throws NullPointerException
                           if null elements cannot be added to the {@code Collection}.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.addAll(biz.ritter.javapi.util.Collection{`0})">
            Attempts to add all of the objects contained in {@code Collection}
            to the contents of this {@code Collection} (optional). If the passed {@code Collection}
            is changed during the process of adding elements to this {@code Collection}, the
            behavior is not defined.
            
            @param collection
                       the {@code Collection} of objects.
            @return {@code true} if this {@code Collection} is modified, {@code false}
                    otherwise.
            @throws UnsupportedOperationException
                           if adding to this {@code Collection} is not supported.
            @throws ClassCastException
                           if the class of an object is inappropriate for this
                           {@code Collection}.
            @throws IllegalArgumentException
                           if an object cannot be added to this {@code Collection}.
            @throws NullPointerException
                           if {@code collection} is {@code null}, or if it
                           contains {@code null} elements and this {@code Collection} does
                           not support such elements.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.clear">
            Removes all elements from this {@code Collection}, leaving it empty (optional).
            
            @throws UnsupportedOperationException
                           if removing from this {@code Collection} is not supported.
            
            @see #isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.contains(System.Object)">
            Tests whether this {@code Collection} contains the specified object. Returns
            {@code true} if and only if at least one element {@code elem} in this
            {@code Collection} meets following requirement:
            {@code (object==null ? elem==null : object.equals(elem))}.
            
            @param object
                       the object to search for.
            @return {@code true} if object is an element of this {@code Collection},
                    {@code false} otherwise.
            @throws ClassCastException
                           if the object to look for isn't of the correct
                           type.
            @throws NullPointerException
                           if the object to look for is {@code null} and this
                           {@code Collection} doesn't support {@code null} elements.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
            Tests whether this {@code Collection} contains all objects contained in the
            specified {@code Collection}. If an element {@code elem} is contained several
            times in the specified {@code Collection}, the method returns {@code true} even
            if {@code elem} is contained only once in this {@code Collection}.
            
            @param collection
                       the collection of objects.
            @return {@code true} if all objects in the specified {@code Collection} are
                    elements of this {@code Collection}, {@code false} otherwise.
            @throws ClassCastException
                           if one or more elements of {@code collection} isn't of the
                           correct type.
            @throws NullPointerException
                           if {@code collection} contains at least one {@code null}
                           element and this {@code Collection} doesn't support {@code null}
                           elements.
            @throws NullPointerException
                           if {@code collection} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.isEmpty">
            Returns if this {@code Collection} contains no elements.
            
            @return {@code true} if this {@code Collection} has no elements, {@code false}
                    otherwise.
            
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.iterator">
            Returns an instance of {@link Iterator} that may be used to access the
            objects contained by this {@code Collection}. The order in which the elements are
            returned by the iterator is not defined. Only if the instance of the
            {@code Collection} has a defined order the elements are returned in that order.
            
            @return an iterator for accessing the {@code Collection} contents.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.remove(System.Object)">
            Removes one instance of the specified object from this {@code Collection} if one
            is contained (optional). The element {@code elem} that is removed
            complies with {@code (object==null ? elem==null : object.equals(elem)}.
            
            @param object
                       the object to remove.
            @return {@code true} if this {@code Collection} is modified, {@code false}
                    otherwise.
            @throws UnsupportedOperationException
                           if removing from this {@code Collection} is not supported.
            @throws ClassCastException
                           if the object passed is not of the correct type.
            @throws NullPointerException
                           if {@code object} is {@code null} and this {@code Collection}
                           doesn't support {@code null} elements.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all occurrences in this {@code Collection} of each object in the
            specified {@code Collection} (optional). After this method returns none of the
            elements in the passed {@code Collection} can be found in this {@code Collection}
            anymore.
            
            @param collection
                       the collection of objects to remove.
            @return {@code true} if this {@code Collection} is modified, {@code false}
                    otherwise.
            
            @throws UnsupportedOperationException
                           if removing from this {@code Collection} is not supported.
            @throws ClassCastException
                           if one or more elements of {@code collection}
                           isn't of the correct type.
            @throws NullPointerException
                           if {@code collection} contains at least one
                           {@code null} element and this {@code Collection} doesn't support
                           {@code null} elements.
            @throws NullPointerException
                           if {@code collection} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all objects from this {@code Collection} that are not also found in the
            {@code Collection} passed (optional). After this method returns this {@code Collection}
            will only contain elements that also can be found in the {@code Collection}
            passed to this method.
            
            @param collection
                       the collection of objects to retain.
            @return {@code true} if this {@code Collection} is modified, {@code false}
                    otherwise.
            @throws UnsupportedOperationException
                           if removing from this {@code Collection} is not supported.
            @throws ClassCastException
                           if one or more elements of {@code collection}
                           isn't of the correct type.
            @throws NullPointerException
                           if {@code collection} contains at least one
                           {@code null} element and this {@code Collection} doesn't support
                           {@code null} elements.
            @throws NullPointerException
                           if {@code collection} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.size">
            Returns a count of how many objects this {@code Collection} contains.
            
            @return how many objects this {@code Collection} contains, or Integer.MAX_VALUE
                    if there are more than Integer.MAX_VALUE elements in this
                    {@code Collection}.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.toArray">
            Returns a new array containing all elements contained in this {@code Collection}.
            
            If the implementation has ordered elements it will return the element
            array in the same order as an iterator would return them.
            
            The array returned does not reflect any changes of the {@code Collection}. A new
            array is created even if the underlying data structure is already an
            array.
            
            @return an array of the elements from this {@code Collection}.
        </member>
        <member name="M:biz.ritter.javapi.util.Collection`1.toArray``1(``0[])">
            Returns an array containing all elements contained in this {@code Collection}. If
            the specified array is large enough to hold the elements, the specified
            array is used, otherwise an array of the same type is created. If the
            specified array is used and is larger than this {@code Collection}, the array
            element following the {@code Collection} elements is set to null.
            
            If the implementation has ordered elements it will return the element
            array in the same order as an iterator would return them.
            
            {@code toArray(new Object[0])} behaves exactly the same way as
            {@code toArray()} does.
            
            @param array
                       the array.
            @return an array of the elements from this {@code Collection}.
            
            @throws ArrayStoreException
                           if the type of an element in this {@code Collection} cannot be
                           stored in the type of the specified array.
        </member>
        <member name="T:biz.ritter.javapi.util.Set`1">
             A {@code Set} is a data structure which does not allow duplicate elements.
            
             @since 1.2
        </member>
        <member name="T:biz.ritter.javapi.util.AbstractSet`1">
            An AbstractSet is an abstract implementation of the Set interface. This
            implementation does not support adding. A subclass must implement the
            abstract methods iterator() and size().
            
            @since 1.2
        </member>
        <member name="T:biz.ritter.javapi.util.AbstractCollection`1">
             Class {@code AbstractCollection} is an abstract implementation of the {@code
             Collection} interface. A subclass must implement the abstract methods {@code
             iterator()} and {@code size()} to create an immutable collection. To create a
             modifiable collection it's necessary to override the {@code add()} method that
             currently throws an {@code UnsupportedOperationException}.
            
             @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.#ctor">
            Constructs a new instance of this AbstractCollection.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractCollection`1.addAll(biz.ritter.javapi.util.Collection{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractCollection`1.clear" -->
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.contains(System.Object)">
            Tests whether this {@code Collection} contains the specified object. This
            implementation iterates over this {@code Collection} and tests, whether any
            element is equal to the given object. If {@code object != null} then
            {@code object.equals(e)} is called for each element {@code e} returned by
            the iterator until the element is found. If {@code object == null} then
            each element {@code e} returned by the iterator is compared with the test
            {@code e == null}.
            
            @param object
                       the object to search for.
            @return {@code true} if object is an element of this {@code Collection}, {@code
                    false} otherwise.
            @throws ClassCastException
                           if the object to look for isn't of the correct type.
            @throws NullPointerException
                           if the object to look for is {@code null} and this
                           {@code Collection} doesn't support {@code null} elements.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
            Tests whether this {@code Collection} contains all objects contained in the
            specified {@code Collection}. This implementation iterates over the specified
            {@code Collection}. If one element returned by the iterator is not contained in
            this {@code Collection}, then {@code false} is returned; {@code true} otherwise.
            
            @param collection
                       the collection of objects.
            @return {@code true} if all objects in the specified {@code Collection} are
                    elements of this {@code Collection}, {@code false} otherwise.
            @throws ClassCastException
                           if one or more elements of {@code collection} isn't of the
                           correct type.
            @throws NullPointerException
                           if {@code collection} contains at least one {@code null}
                           element and this {@code Collection} doesn't support {@code null}
                           elements.
            @throws NullPointerException
                           if {@code collection} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.isEmpty">
             Returns if this {@code Collection} contains no elements. This implementation
             tests, whether {@code size} returns 0.
             
             @return {@code true} if this {@code Collection} has no elements, {@code false}
                     otherwise.
            
             @see #size
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractCollection`1.iterator" -->
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.remove(System.Object)">
            Removes one instance of the specified object from this {@code Collection} if one
            is contained (optional). This implementation iterates over this
            {@code Collection} and tests for each element {@code e} returned by the iterator,
            whether {@code e} is equal to the given object. If {@code object != null}
            then this test is performed using {@code object.equals(e)}, otherwise
            using {@code object == null}. If an element equal to the given object is
            found, then the {@code remove} method is called on the iterator and
            {@code true} is returned, {@code false} otherwise. If the iterator does
            not support removing elements, an {@code UnsupportedOperationException}
            is thrown.
            
            @param object
                       the object to remove.
            @return {@code true} if this {@code Collection} is modified, {@code false}
                    otherwise.
            @throws UnsupportedOperationException
                           if removing from this {@code Collection} is not supported.
            @throws ClassCastException
                           if the object passed is not of the correct type.
            @throws NullPointerException
                           if {@code object} is {@code null} and this {@code Collection}
                           doesn't support {@code null} elements.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractCollection`1.removeAll(biz.ritter.javapi.util.Collection{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractCollection`1.retainAll(biz.ritter.javapi.util.Collection{`0})" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractCollection`1.size" -->
        <member name="M:biz.ritter.javapi.util.AbstractCollection`1.ToString">
            Returns the string representation of this {@code Collection}. The presentation
            has a specific format. It is enclosed by square brackets ("[]"). Elements
            are separated by ', ' (comma and space).
            
            @return the string representation of this {@code Collection}.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.#ctor">
            Constructs a new instance of this AbstractSet.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.Equals(System.Object)">
            Compares the specified object to this Set and returns true if they are
            equal. The object must be an instance of Set and contain the same
            objects.
            
            @param object
                       the object to compare with this set.
            @return {@code true} if the specified object is equal to this set,
                    {@code false} otherwise
            @see #hashCode
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.GetHashCode">
            Returns the hash code for this set. Two set which are equal must return
            the same value. This implementation calculates the hash code by adding
            each element's hash code.
            
            @return the hash code of this set.
            @see #equals
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all occurrences in this collection which are contained in the
            specified collection.
            
            @param collection
                       the collection of objects to remove.
            @return {@code true} if this collection was modified, {@code false}
                    otherwise.
            @throws UnsupportedOperationException
                           if removing from this collection is not supported.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
            Searches this set for all objects in the specified collection.
            
            @param collection
                       the collection of objects.
            @return {@code true} if all objects in the specified collection are
                    elements of this set, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSet`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all objects from this set that are not contained in the specified
            collection.
            
            @param collection
                       the collection of objects to retain.
            @return {@code true} if this set was modified, {@code false} otherwise.
            @throws UnsupportedOperationException
                        when removing from this set is not supported.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.Iterator`1" -->
        <member name="M:biz.ritter.javapi.util.Iterator`1.hasNext">
            Returns whether there are more elements to iterate, i.e. whether the
            iterator is positioned in front of an element.
            
            @return {@code true} if there are more elements, {@code false} otherwise.
            @see #next
        </member>
        <member name="M:biz.ritter.javapi.util.Iterator`1.next">
            Returns the next object in the iteration, i.e. returns the element in
            front of the iterator and advances the iterator by one position.
            
            @return the next object.
            @throws NoSuchElementException
                        if there are no more elements.
            @see #hasNext
        </member>
        <member name="M:biz.ritter.javapi.util.Iterator`1.remove">
            Removes the last object returned by {@code next} from the collection.
            This method can only be called once after {@code next} was called.
            
            @throws UnsupportedOperationException
                        if removing is not supported by the collection being
                        iterated.
            @throws IllegalStateException
                        if {@code next} has not been called, or {@code remove} has
                        already been called after the last call to {@code next}.
        </member>
        <member name="T:biz.ritter.javapi.util.Collections.ReverseComparator`1">
            This class is a singleton so that equals() and hashCode() work properly.
        </member>
        <member name="T:biz.ritter.javapi.util.Comparator`1">
             A {@code Comparator} is used to compare two objects to determine their ordering with
             respect to each other. On a given {@code Collection}, a {@code Comparator} can be used to
             obtain a sorted {@code Collection} which is <i>totally ordered</i>. For a {@code Comparator}
             to be <i>consistent with equals</i>, its {code #compare(Object, Object)}
             method has to return zero for each pair of elements (a,b) where a.equals(b)
             holds true. It is recommended that a {@code Comparator} implements
             {@link java.io.Serializable}.
            
             @since 1.2
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Comparator`1.compare(`0,`0)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Comparator`1.equals(System.Object)" -->
        <member name="T:biz.ritter.javapi.util.AbstractList`1">
             {@code AbstractList} is an abstract implementation of the {@code List} interface, optimized
             for a backing store which supports random access. This implementation does
             not support adding or replacing. A subclass must implement the abstract
             methods {@code get()} and {@code size()}, and to create a
             modifiable {@code List} it's necessary to override the {@code add()} method that
             currently throws an {@code UnsupportedOperationException}.
            
             @since 1.2
        </member>
        <member name="T:biz.ritter.javapi.util.List`1">
            A {@code List} is a collection which maintains an ordering for its elements. Every
            element in the {@code List} has an index. Each element can thus be accessed by its
            index, with the first index being zero. Normally, {@code List}s allow duplicate
            elements, as compared to Sets, where elements have to be unique.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.List`1.add(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.List`1.add(`0)">
            Adds the specified object at the end of this {@code List}.
            
            @param object
                       the object to add.
            @return always true.
            @throws UnsupportedOperationException
                           if adding to this {@code List} is not supported.
            @throws ClassCastException
                           if the class of the object is inappropriate for this
                           {@code List}.
            @throws IllegalArgumentException
                           if the object cannot be added to this {@code List}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.List`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})" -->
        <member name="M:biz.ritter.javapi.util.List`1.addAll(biz.ritter.javapi.util.Collection{`0})">
            Adds the objects in the specified collection to the end of this {@code List}. The
            objects are added in the order in which they are returned from the
            collection's iterator.
            
            @param collection
                       the collection of objects.
            @return {@code true} if this {@code List} is modified, {@code false} otherwise
                    (i.e. if the passed collection was empty).
            @throws UnsupportedOperationException
                           if adding to this {@code List} is not supported.
            @throws ClassCastException
                           if the class of an object is inappropriate for this
                           {@code List}.
            @throws IllegalArgumentException
                           if an object cannot be added to this {@code List}.
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.clear">
            Removes all elements from this {@code List}, leaving it empty.
            
            @throws UnsupportedOperationException
                           if removing from this {@code List} is not supported.
            @see #isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.contains(System.Object)">
            Tests whether this {@code List} contains the specified object.
            
            @param object
                       the object to search for.
            @return {@code true} if object is an element of this {@code List}, {@code false}
                    otherwise
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
            Tests whether this {@code List} contains all objects contained in the
            specified collection.
            
            @param collection
                       the collection of objects
            @return {@code true} if all objects in the specified collection are
                    elements of this {@code List}, {@code false} otherwise.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.List`1.get(System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.List`1.indexOf(System.Object)">
            Searches this {@code List} for the specified object and returns the index of the
            first occurrence.
            
            @param object
                       the object to search for.
            @return the index of the first occurrence of the object or -1 if the
                    object was not found.
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.isEmpty">
            Returns whether this {@code List} contains no elements.
            
            @return {@code true} if this {@code List} has no elements, {@code false}
                    otherwise.
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.iterator">
            Returns an iterator on the elements of this {@code List}. The elements are
            iterated in the same order as they occur in the {@code List}.
            
            @return an iterator on the elements of this {@code List}.
            @see Iterator
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.lastIndexOf(System.Object)">
            Searches this {@code List} for the specified object and returns the index of the
            last occurrence.
            
            @param object
                       the object to search for.
            @return the index of the last occurrence of the object, or -1 if the
                    object was not found.
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.listIterator">
            Returns a {@code List} iterator on the elements of this {@code List}. The elements are
            iterated in the same order that they occur in the {@code List}.
            
            @return a {@code List} iterator on the elements of this {@code List}
            
            @see ListIterator
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.List`1.listIterator(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.List`1.remove(System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.List`1.remove(System.Object)">
            Removes the first occurrence of the specified object from this {@code List}.
            
            @param object
                       the object to remove.
            @return true if this {@code List} was modified by this operation, false
                    otherwise.
            @throws UnsupportedOperationException
                           if removing from this {@code List} is not supported.
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all occurrences in this {@code List} of each object in the specified
            collection.
            
            @param collection
                       the collection of objects to remove.
            @return {@code true} if this {@code List} is modified, {@code false} otherwise.
            @throws UnsupportedOperationException
                           if removing from this {@code List} is not supported.
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all objects from this {@code List} that are not contained in the
            specified collection.
            
            @param collection
                       the collection of objects to retain.
            @return {@code true} if this {@code List} is modified, {@code false} otherwise.
            @throws UnsupportedOperationException
                           if removing from this {@code List} is not supported.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.List`1.set(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.List`1.size">
            Returns the number of elements in this {@code List}.
            
            @return the number of elements in this {@code List}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.List`1.subList(System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.List`1.toArray">
            Returns an array containing all elements contained in this {@code List}.
            
            @return an array of the elements from this {@code List}.
        </member>
        <member name="M:biz.ritter.javapi.util.List`1.toArray``1(``0[])">
            Returns an array containing all elements contained in this {@code List}. If the
            specified array is large enough to hold the elements, the specified array
            is used, otherwise an array of the same type is created. If the specified
            array is used and is larger than this {@code List}, the array element following
            the collection elements is set to null.
            
            @param array
                       the array.
            @return an array of the elements from this {@code List}.
            @throws ArrayStoreException
                           if the type of an element in this {@code List} cannot be stored
                           in the type of the specified array.
        </member>
        <member name="F:biz.ritter.javapi.util.AbstractList`1.modCount">
            A counter for changes to the list.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.#ctor">
            Constructs a new instance of this AbstractList.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.add(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.add(`0)">
            Adds the specified object at the end of this List.
            
            
            @param object
                       the object to add
            @return true
            
            @throws UnsupportedOperationException
                           if adding to this List is not supported
            @throws ClassCastException
                           if the class of the object is inappropriate for this
                           List
            @throws IllegalArgumentException
                           if the object cannot be added to this List
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})" -->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.clear">
            Removes all elements from this list, leaving it empty.
            
            @throws UnsupportedOperationException
                        if removing from this list is not supported.
            @see List#isEmpty
            @see List#size
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.Equals(System.Object)">
            Compares the specified object to this list and return true if they are
            equal. Two lists are equal when they both contain the same objects in the
            same order.
            
            @param object
                       the object to compare to this object.
            @return {@code true} if the specified object is equal to this list,
                    {@code false} otherwise.
            @see #hashCode
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.get(System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.GetHashCode">
            Returns the hash code of this list. The hash code is calculated by taking
            each element's hashcode into account.
            
            @return the hash code.
            @see #equals
            @see List#hashCode()
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.indexOf(System.Object)">
            Searches this list for the specified object and returns the index of the
            first occurrence.
            
            @param object
                       the object to search for.
            @return the index of the first occurrence of the object, or -1 if it was
                    not found.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.iterator">
            Returns an iterator on the elements of this list. The elements are
            iterated in the same order as they occur in the list.
            
            @return an iterator on the elements of this list.
            @see Iterator
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.lastIndexOf(System.Object)">
            Searches this list for the specified object and returns the index of the
            last occurrence.
            
            @param object
                       the object to search for.
            @return the index of the last occurrence of the object, or -1 if the
                    object was not found.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.listIterator">
            Returns a ListIterator on the elements of this list. The elements are
            iterated in the same order that they occur in the list.
            
            @return a ListIterator on the elements of this list
            @see ListIterator
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.listIterator(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.remove(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.removeRange(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.set(System.Int32,`0)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.AbstractList`1.subList(System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.AbstractList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractList`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.util.RandomAccess">
            RandomAccess is implemented by {@code List} implementations that support fast
            (usually constant time) random access.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.SynchronizedList`1.readResolve" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.SynchronizedRandomAccessList`1.writeReplace" -->
        <member name="T:biz.ritter.javapi.util.SortedSet`1">
            SortedSet is a Set which iterates over its elements in a sorted order. The
            order is determined either by the elements natural ordering, or by a
            {@link Comparator} which is passed into a concrete implementation at
            construction time. All elements in this set must be mutually comparable. The
            ordering in this set must be consistent with {@code equals} of its elements.
            
            @see Comparator
            @see Comparable
        </member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.comparator">
            Returns the comparator used to compare elements in this {@code SortedSet}.
            
            @return a comparator or null if the natural ordering is used.
        </member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.first">
            Returns the first element in this {@code SortedSet}. The first element
            is the lowest element.
            
            @return the first element.
            @throws NoSuchElementException
                        when this {@code SortedSet} is empty.
        </member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.headSet(`0)">
            Returns a {@code SortedSet} of the specified portion of this
            {@code SortedSet} which contains elements less than the end element. The
            returned {@code SortedSet} is backed by this {@code SortedSet} so changes
            to one set are reflected by the other.
            
            @param end
                       the end element.
            @return a subset where the elements are less than {@code end}.
            @throws ClassCastException
                        when the class of the end element is inappropriate for this
                        SubSet.
            @throws NullPointerException
                        when the end element is null and this {@code SortedSet} does
                        not support null elements.
        </member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.last">
            Returns the last element in this {@code SortedSet}. The last element is
            the highest element.
            
            @return the last element.
            @throws NoSuchElementException
                        when this {@code SortedSet} is empty.
        </member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.subSet(`0,`0)">
            Returns a {@code SortedSet} of the specified portion of this
            {@code SortedSet} which contains elements greater or equal to the start
            element but less than the end element. The returned {@code SortedSet} is
            backed by this SortedMap so changes to one set are reflected by the
            other.
            
            @param start
                       the start element.
            @param end
                       the end element.
            @return a subset where the elements are greater or equal to {@code start}
                    and less than {@code end}.
            @throws ClassCastException
                        when the class of the start or end element is inappropriate
                        for this SubSet.
            @throws NullPointerException
                        when the start or end element is null and this
                        {@code SortedSet} does not support null elements.
            @throws IllegalArgumentException
                        when the start element is greater than the end element.
        </member>
        <member name="M:biz.ritter.javapi.util.SortedSet`1.tailSet(`0)">
            Returns a {@code SortedSet} of the specified portion of this
            {@code SortedSet} which contains elements greater or equal to the start
            element. The returned {@code SortedSet} is backed by this
            {@code SortedSet} so changes to one set are reflected by the other.
            
            @param start
                       the start element.
            @return a subset where the elements are greater or equal to {@code start} .
            @throws ClassCastException
                        when the class of the start element is inappropriate for this
                        SubSet.
            @throws NullPointerException
                        when the start element is null and this {@code SortedSet}
                        does not support null elements.
        </member>
        <member name="T:biz.ritter.javapi.util.MapNS.Entry`2">
            {@code Map.Entry} is a key/value mapping contained in a {@code Map}.
        </member>
        <member name="M:biz.ritter.javapi.util.MapNS.Entry`2.getKey">
            Returns the key.
            
            @return the key
        </member>
        <member name="M:biz.ritter.javapi.util.MapNS.Entry`2.getValue">
            Returns the value.
            
            @return the value
        </member>
        <member name="M:biz.ritter.javapi.util.MapNS.Entry`2.setValue(`1)">
            Sets the value of this entry to the specified value, replacing any
            existing value.
            
            @param object
                       the new value to set.
            @return object the replaced value of this entry.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.UnmodifiableList`1.readResolve" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.UnmodifiableRandomAccessList`1.writeReplace" -->
        <member name="T:biz.ritter.javapi.util.ListIterator`1">
            An ListIterator is used to sequence over a List of objects. ListIterator can
            move backwards or forwards through the list.
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.add(`0)">
            Inserts the specified object into the list between {@code next} and
            {@code previous}. The object inserted will be the previous object.
            
            @param object
                       the object to insert.
            @throws UnsupportedOperationException
                        if adding is not supported by the list being iterated.
            @throws ClassCastException
                        if the class of the object is inappropriate for the list.
            @throws IllegalArgumentException
                        if the object cannot be added to the list.
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.hasNext">
            Returns whether there are more elements to iterate.
            
            @return {@code true} if there are more elements, {@code false} otherwise.
            @see #next
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.hasPrevious">
            Returns whether there are previous elements to iterate.
            
            @return {@code true} if there are previous elements, {@code false}
                    otherwise.
            @see #previous
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.next">
            Returns the next object in the iteration.
            
            @return the next object.
            @throws NoSuchElementException
                        if there are no more elements.
            @see #hasNext
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.nextIndex">
            Returns the index of the next object in the iteration.
            
            @return the index of the next object, or the size of the list if the
                    iterator is at the end.
            @throws NoSuchElementException
                        if there are no more elements.
            @see #next
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.previous">
            Returns the previous object in the iteration.
            
            @return the previous object.
            @throws NoSuchElementException
                        if there are no previous elements.
            @see #hasPrevious
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.previousIndex">
            Returns the index of the previous object in the iteration.
            
            @return the index of the previous object, or -1 if the iterator is at the
                    beginning.
            @throws NoSuchElementException
                        if there are no previous elements.
            @see #previous
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.remove">
            Removes the last object returned by {@code next} or {@code previous} from
            the list.
            
            @throws UnsupportedOperationException
                        if removing is not supported by the list being iterated.
            @throws IllegalStateException
                        if {@code next} or {@code previous} have not been called, or
                        {@code remove} or {@code add} have already been called after
                        the last call to {@code next} or {@code previous}.
        </member>
        <member name="M:biz.ritter.javapi.util.ListIterator`1.set(`0)">
            Replaces the last object returned by {@code next} or {@code previous}
            with the specified object.
            
            @param object
                       the object to set.
            @throws UnsupportedOperationException
                        if setting is not supported by the list being iterated
            @throws ClassCastException
                        if the class of the object is inappropriate for the list.
            @throws IllegalArgumentException
                        if the object cannot be added to the list.
            @throws IllegalStateException
                        if {@code next} or {@code previous} have not been called, or
                        {@code remove} or {@code add} have already been called after
                        the last call to {@code next} or {@code previous}.
        </member>
        <member name="F:biz.ritter.javapi.lang.Throwable.stackTrace">
            A fully-expanded representation of the stack trace.
        </member>
        <member name="F:biz.ritter.javapi.lang.Throwable.cause">
            <summary>
            Cause for this exception, if other it is.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.#ctor">
            <summary>
            Create new Throwable with empty message and no cause
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.printStackTrace(biz.ritter.javapi.lang.PrintStream)">
            Writes a printable representation of this {@code Throwable}'s stack trace
            to the specified print stream. If the {@code Throwable} contains a
            {@link #getCause() cause}, the method will be invoked recursively for
            the nested {@code Throwable}.
            
            @param err
                       the stream to write the stack trace on.
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.printStackTrace(biz.ritter.javapi.io.PrintWriter)">
            Writes a printable representation of this {@code Throwable}'s stack trace
            to the specified print writer. If the {@code Throwable} contains a
            {@link #getCause() cause}, the method will be invoked recursively for the
            nested {@code Throwable}.
            
            @param err
                       the writer to write the stack trace on.
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getInternalStackTrace">
            Returns an array of StackTraceElements. Each StackTraceElement represents
            a entry on the stack. Cache the stack trace in the stackTrace field,
            returning the cached field when it has already been initialized.
            
            @return an array of StackTraceElement representing the stack
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getStackTraceImpl">
            <summary>
            Create a new StackTraceElement [] 
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.getCause">
            Returns the cause of this {@code Throwable}, or {@code null} if there is
            no cause.
            
            @return Throwable this {@code Throwable}'s cause.
        </member>
        <member name="M:biz.ritter.javapi.lang.Throwable.countDuplicates(biz.ritter.javapi.lang.StackTraceElement[],biz.ritter.javapi.lang.StackTraceElement[])">
            Counts the number of duplicate stack frames, starting from the
            end of the stack.
            
            @param currentStack a stack to compare
            @param parentStack a stack to compare
            
            @return the number of duplicate stack frames.
        </member>
        <member name="M:biz.ritter.javapi.io.FileInputStream.read(System.Byte[],System.Int32,System.Int32)">
            Optimized reading for files
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.MalformedInputException">
            A {@code MalformedInputException} is thrown when a malformed input is
            encountered, for example if a byte sequence is illegal for the given charset.
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.CharacterCodingException">
            A {@code CharacterCodingException} is thrown when an encoding or decoding
            error occurs.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharacterCodingException.#ctor">
            Constructs a new {@code CharacterCodingException}.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.MalformedInputException.#ctor(System.Int32)">
            Constructs a new {@code MalformedInputException}.
            
            @param length
                       the length of the malformed input.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.MalformedInputException.getInputLength">
            Gets the length of the malformed input.
            
            @return the length of the malformed input.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.MalformedInputException.getMessage">
            Gets a message describing this exception.
            
            @return a message describing this exception.
        </member>
        <member name="T:biz.ritter.javapi.lang.VirtualMachineError">
            {@code VirtualMachineError} is the superclass of all error classes that occur
            during the operation of the virtual machine.
            
            @see Error
        </member>
        <member name="T:biz.ritter.javapi.lang.Error">
            {@code Error} is the superclass of all classes that represent unrecoverable
            errors. When errors are thrown, they should not be caught by application
            code.
            
            @see Throwable
            @see Exception
            @see RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor">
            Constructs a new {@code Error} that includes the current stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor(System.String)">
            Constructs a new {@code Error} with the current stack trace and the
            specified detail message.
            
            @param detailMessage
                       the detail message for this error.
        </member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
            Constructs a new {@code Error} with the current stack trace, the
            specified detail message and the specified cause.
            
            @param detailMessage
                       the detail message for this error.
            @param throwable
                       the cause of this error.
        </member>
        <member name="M:biz.ritter.javapi.lang.Error.#ctor(biz.ritter.javapi.lang.Throwable)">
            Constructs a new {@code Error} with the current stack trace and the
            specified cause.
            
            @param throwable
                       the cause of this error.
        </member>
        <member name="M:biz.ritter.javapi.lang.VirtualMachineError.#ctor">
            Constructs a new {@code VirtualMachineError} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.VirtualMachineError.#ctor(System.String)">
            Constructs a new {@code VirtualMachineError} with the current stack trace
            and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.lang.NegativeArraySizeException">
            Thrown when an attempt is made to create an array with a size of less than
            zero.
        </member>
        <member name="M:biz.ritter.javapi.lang.NegativeArraySizeException.#ctor">
            Constructs a new {@code NegativeArraySizeException} that includes the
            current stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.NegativeArraySizeException.#ctor(System.String)">
            Constructs a new {@code NegativeArraySizeException} with the current
            stack trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.Array">
            <summary>
            Reflection type for working with arrays.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.getLength(System.Object)">
            <summary>
            Compute the length of first dimension from given array
            </summary>
            <param name="array">array</param>
            <returns>size of first dimension</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="!:java.lang.NullPointer">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.get(System.Object,System.Int32)">
            <summary>
            Get the object stored on given offset in array
            </summary>
            <param name="array">array</param>
            <param name="offset">zero based index</param>
            <returns>Object on index</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="!:java.lang.NullPointer">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.set(System.Object,System.Int32,System.Object)">
            <summary>
            Set the object stored on given offset in array
            </summary>
            <param name="array">array</param>
            <param name="offset">zero based index</param>
            <returns>Object on index</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="!:java.lang.NullPointer">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
            <exception cref="T:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException">Throw an java.lang.ArrayIndexOutOfBoundsException if given index is lesser zero, equals length of array or greater length of array.</exception> 
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.newInstance(System.Type,System.Int32)">
            <summary>
            Create new Array of type with giving length
            </summary>
            <param name="type">type / classe</param>
            <param name="length">size of array</param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Array.cast(System.Object)">
            <summary>
            Cast the given object to System.Array instance.
            </summary>
            <param name="array">the object</param>
            <returns>A System.Array instance of given object</returns>
            <exception cref="T:biz.ritter.javapi.lang.IllegalArgumentException">Throw an java.lang.IllegalArgumentException if given object is not an array.</exception> 
            <exception cref="!:java.lang.NullPointer">Throw an java.lang.NullPointerException if given object is not an array.</exception> 
        </member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.inf">
            The inflater used for this stream.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.buf">
            The input buffer used for decompression.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
             This is the most basic constructor. You only need to pass the {@code
             InputStream} from which the compressed data is to be read from. Default
             settings for the {@code Inflater} and internal buffer are be used. In
             particular the Inflater expects a ZLIB header from the input stream.
            
             @param is
                        the {@code InputStream} to read data from.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Inflater)">
             This constructor lets you pass a specifically initialized Inflater,
             for example one that expects no ZLIB header.
            
             @param is
                        the {@code InputStream} to read data from.
             @param inf
                        the specific {@code Inflater} for uncompressing data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Inflater,System.Int32)">
             This constructor lets you specify both the {@code Inflater} as well as
             the internal buffer size to be used.
            
             @param is
                        the {@code InputStream} to read data from.
             @param inf
                        the specific {@code Inflater} for uncompressing data.
             @param bsize
                        the size to be used for the internal buffer.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.len">
            The length of the buffer.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterInputStream.eof">
            True if this stream's last byte has been returned to the user. This
            could be because the underlying stream has been exhausted, or if errors
            were encountered while inflating that stream.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.read">
             Reads a single byte of decompressed data.
            
             @return the byte read.
             @throws IOException
                         if an error occurs reading the byte.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.read(System.Byte[],System.Int32,System.Int32)">
             Reads up to {@code nbytes} of decompressed data and stores it in
             {@code buffer} starting at {@code off}.
            
             @param buffer
                        the buffer to write data to.
             @param off
                        offset in buffer to start writing.
             @param nbytes
                        number of bytes to read.
             @return Number of uncompressed bytes read
             @throws IOException
                         if an IOException occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.fill">
             Fills the input buffer with data to be decompressed.
            
             @throws IOException
                         if an {@code IOException} occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.skip(System.Int64)">
             Skips up to n bytes of uncompressed data.
            
             @param nbytes
                        the number of bytes to skip.
             @return the number of uncompressed bytes skipped.
             @throws IOException
                         if an error occurs skipping.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.zip.InflaterInputStream.available" -->
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.close">
             Closes the input stream.
            
             @throws IOException
                         If an error occurs closing the input stream.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.mark(System.Int32)">
             Marks the current position in the stream. This implementation overrides
             the super type implementation to do nothing at all.
            
             @param readlimit
                        of no use.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.reset">
             Reset the position of the stream to the last marked position. This
             implementation overrides the supertype implementation and always throws
             an {@link IOException IOException} when called.
            
             @throws IOException
                         if the method is called
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterInputStream.markSupported">
             Returns whether the receiver implements {@code mark} semantics. This type
             does not support {@code mark()}, so always responds {@code false}.
            
             @return false, always
        </member>
        <member name="T:biz.ritter.javapi.util.zip.Adler32">
            <summary>
            The Adler32 class is used to compute a Adler32 checksum from data provided as
            input value.
            </summary>
            <seealso cref="!:http://en.wikipedia.org/wiki/Adler32#Example_implementation"/>
            <remarks>
            The Adler32 class compute a Adler32 checksum from data provided as input value.
            It implements the Wikipedia source code sample as C# code.
            If big array is used, you can become out of memory.
            </remarks>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.Checksum">
            Holds information about a checksum which was computed with the methods
            implementing a checksum algorithm.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.getValue">
             Returns the current calculated checksum value.
            
             @return the checksum.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.reset">
            Resets the checksum value applied before beginning calculations on a new
            stream of data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.update(System.Byte[],System.Int32,System.Int32)">
             Updates the checksum with the given bytes.
            
             @param buf
                        the byte array from which to read the bytes.
             @param off
                        the initial position in {@code buf} to read the bytes from.
             @param nbytes
                        the number of bytes to read from {@code buf}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Checksum.update(System.Int32)">
             Updates the checksum value with the given byte.
            
             @param val
                        the byte to update the checksum with.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.MOD_ADLER32">
            <summary>
            The modulo factor for Adler32
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.content">
            <summary>
            The content for compute checksum
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Adler32.checksum">
            <summary>
            The last checksum
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.#ctor">
            <summary>
            Construct a new Adler32 instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.getValue">
            <summary>
            Return the Adler32 checksum
            </summary>
            <returns>Adler32 checksum</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.reset">
            Resets the Adler32 checksum to it initial state.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.update(System.Int32)">
             Updates this checksum with the byte value provided as integer.
            
             @param val
                        represents the byte to update the checksum.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.update(System.Byte[])">
             Updates this checksum with the bytes contained in buffer {@code buf}.
            
             @param buf
                        the buffer holding the data to update the checksum with.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.update(System.Byte[],System.Int32,System.Int32)">
             Updates this checksum with n bytes of data obtained from buffer {@code
             buf}, starting at offset {@code off}.
            
             @param buf
                        the buffer to update the checksum.
             @param off
                        the offset in {@code buf} to obtain data from.
             @param nbytes
                        the number of bytes to read from {@code buf}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Adler32.compute">
            <summary>
            Compute the checksum
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.util.Hashtable`2">
            <summary>
            <strong>In change to Java this class extends java.util.AbstractMap and implements
            java.util.Dictionary.</strong>
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:biz.ritter.javapi.util.AbstractMap`2">
            <summary>
            
            </summary>
            <remarks>
            Implementation details:
            <code>
             +-Class--------------+
             |     Object         |----------------------------------------------------+
             +--------------------+                                                    |
                      |            +-Interface-+                                       |
                    Java           | Map       |                                     .net
                      |            +-----------+                                       |
             +-Class--------------+     |                                              |
             |  AbstractMap       |-----+                                              |         
             +--------------------+     |                       +-Interface---+        |         
                      |              JavApi                     | IDictionary |        |         
                      |                 |                       +-------------+        |
             +--------------------+     |                              |      +-Class-----------+       
             | HashMap            |     +------------------------------+------|    Dictionary   |
             +--------------------+                                           +-----------------+
            </code>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2" -->
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.#ctor(`2,`3)">
            Constructs a new instance by key and value.
            
            @param theKey
                       the key
            @param theValue
                       the value
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.#ctor(biz.ritter.javapi.util.MapNS.Entry{`2,`3})">
            Constructs a new instance by an entry
            
            @param entry
                       the entry
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.getKey">
            {@inheritDoc}
            
            @see java.util.Map.Entry#getKey()
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.getValue">
            {@inheritDoc}
            
            @see java.util.Map.Entry#getValue()
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.setValue(`3)">
            Throws an UnsupportedOperationException.
            
            @param object
                       new value
            @return (Does not)
            @throws UnsupportedOperationException
                        always
            
            @see java.util.Map.Entry#setValue(java.lang.Object)
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.Equals(System.Object)">
            Answers whether the object is equal to this entry. This works across
            all kinds of the Map.Entry interface.
            
            @see java.lang.Object#equals(java.lang.Object)
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.GetHashCode">
            Answers the hash code of this entry.
            
            @see java.lang.Object#hashCode()
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractMap`2.SimpleImmutableEntry`2.ToString">
            Answers a String representation of this entry.
            
            @see java.lang.Object#toString()
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.Dictionary`2" -->
        <member name="M:biz.ritter.javapi.util.Dictionary`2.elements">
            Returns an enumeration on the elements of this dictionary.
            
            @return an enumeration of the values of this dictionary.
            @see #keys
            @see #size
            @see Enumeration
        </member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.get(System.Object)">
            Returns the value which is associated with {@code key}.
            
            @param key
                       the key of the value returned.
            @return the value associated with {@code key}, or {@code null} if the
                    specified key does not exist.
            @see #put
        </member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.isEmpty">
            Returns true if this dictionary has no key/value pairs.
            
            @return {@code true} if this dictionary has no key/value pairs,
                    {@code false} otherwise.
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.keys">
            Returns an enumeration on the keys of this dictionary.
            
            @return an enumeration of the keys of this dictionary.
            @see #elements
            @see #size
            @see Enumeration
        </member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.put(`0,`1)">
            Associate {@code key} with {@code value} in this dictionary. If {@code
            key} exists in the dictionary before this call, the old value in the
            dictionary is replaced by {@code value}.
            
            @param key
                       the key to add.
            @param value
                       the value to add.
            @return the old value previously associated with {@code key} or {@code
                    null} if {@code key} is new to the dictionary.
            @see #elements
            @see #get
            @see #keys
        </member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.remove(System.Object)">
            Removes the key/value pair with the specified {@code key} from this
            dictionary.
            
            @param key
                       the key to remove.
            @return the associated value before the deletion or {@code null} if
                    {@code key} was not known to this dictionary.
            @see #get
            @see #put
        </member>
        <member name="M:biz.ritter.javapi.util.Dictionary`2.size">
            Returns the number of key/value pairs in this dictionary.
            
            @return the number of key/value pairs in this dictionary.
            @see #elements
            @see #keys
        </member>
        <member name="T:biz.ritter.javapi.util.ArrayList`1">
            ArrayList is an implementation of {@link List}, backed by an array. All
            optional operations adding, removing, and replacing are supported. The
            elements can be any objects.
            
            @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.#ctor">
            Constructs a new instance of {@code ArrayList} with ten capacity.
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.#ctor(System.Int32)">
            Constructs a new instance of {@code ArrayList} with the specified
            capacity.
            
            @param capacity
                       the initial capacity of this {@code ArrayList}.
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
            Constructs a new instance of {@code ArrayList} containing the elements of
            the specified collection. The initial size of the {@code ArrayList} will
            be 10% larger than the size of the specified collection.
            
            @param collection
                       the collection of elements to add.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.ArrayList`1.add(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.ArrayList`1.add(`0)">
            Adds the specified object at the end of this {@code ArrayList}.
            
            @param object
                       the object to add.
            @return always true
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.ArrayList`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})" -->
        <member name="M:biz.ritter.javapi.util.ArrayList`1.addAll(biz.ritter.javapi.util.Collection{`0})">
            Adds the objects in the specified collection to this {@code ArrayList}.
            
            @param collection
                       the collection of objects.
            @return {@code true} if this {@code ArrayList} is modified, {@code false}
                    otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.clear">
            Removes all elements from this {@code ArrayList}, leaving it empty.
            
            @see #isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.clone">
            Returns a new {@code ArrayList} with the same elements, the same size and
            the same capacity as this {@code ArrayList}.
            
            @return a shallow copy of this {@code ArrayList}
            @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.contains(System.Object)">
            Searches this {@code ArrayList} for the specified object.
            
            @param object
                       the object to search for.
            @return {@code true} if {@code object} is an element of this
                    {@code ArrayList}, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.ensureCapacity(System.Int32)">
            Ensures that after this operation the {@code ArrayList} can hold the
            specified number of elements without further growing.
            
            @param minimumCapacity
                       the minimum capacity asked for.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.ArrayList`1.remove(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.ArrayList`1.removeRange(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.ArrayList`1.set(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.ArrayList`1.size">
            Returns the number of elements in this {@code ArrayList}.
            
            @return the number of elements in this {@code ArrayList}.
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.toArray">
            Returns a new array containing all elements contained in this
            {@code ArrayList}.
            
            @return an array of the elements from this {@code ArrayList}
        </member>
        <member name="M:biz.ritter.javapi.util.ArrayList`1.trimToSize">
            Sets the capacity of this {@code ArrayList} to be the same as the current
            size.
            
            @see #size
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadWriteCharArrayBuffer">
            CharArrayBuffer, ReadWriteCharArrayBuffer and ReadOnlyCharArrayBuffer compose
            the implementation of array based char buffers.
            <p>
            ReadWriteCharArrayBuffer extends CharArrayBuffer with all the write methods.
            </p>
            <p>
            This class is marked final for runtime performance.
            </p>
            
        </member>
        <member name="T:biz.ritter.javapi.nio.CharArrayBuffer">
            CharArrayBuffer, ReadWriteCharArrayBuffer and ReadOnlyCharArrayBuffer compose
            the implementation of array based char buffers.
            <p>
            CharArrayBuffer implements all the shared readonly methods and is extended by
            the other two classes.
            </p>
            <p>
            All methods are marked final for runtime performance.
            </p>
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.nio.CharBuffer" -->
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.nio.Buffer" -->
        <member name="F:biz.ritter.javapi.nio.Buffer.UNSET_MARK">
            <code>UNSET_MARK</code> means the mark has not been set.
        </member>
        <member name="F:biz.ritter.javapi.nio.Buffer.capacityJ">
            <summary>
            The capacity of this buffer, which never change. 
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.Buffer.limitJ">
            <code>limit - 1</code> is the last element that can be read or written.
            Limit must be no less than zero and no greater than <code>capacity</code>.
        </member>
        <member name="F:biz.ritter.javapi.nio.Buffer.markJ">
            Mark is where position will be set when <code>reset()</code> is called.
            Mark is not set by default. Mark is always no less than zero and no
            greater than <code>position</code>.
        </member>
        <member name="F:biz.ritter.javapi.nio.Buffer.positionJ">
            <summary>
            The current position of this buffer. Position is always no less than zero
            and no greater than <code>limit</code>.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.#ctor(System.Int32)">
            Construct a buffer with the specified capacity.
            
            @param capacity
                       The capacity of this buffer
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.array">
            Answers the array that backs this buffer.
            
            It wants to allow array-backed buffers to be passed to native code more
            efficiently. Subclasses provide more concrete return values for this
            method.
            
            Modifications to this buffer's content will cause the returned array's
            content to be modified, and vice versa.
            
            Invoking the <code>hasArray</code> method before invoking this method
            can guarantee it to be called safely.
            
            @return The array that backs this buffer
            
            @throws ReadOnlyBufferException -
                        If this buffer is backed by an array but is read-only
                    UnsupportedOperationException - If this buffer is not backed
                        by an accessible array
            @since 1.6
            
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.arrayOffset">
            Returns the offset within this buffer's backing array of the first
            element of the buffer (optional operation).
            
            If this buffer is backed by an array then buffer position p corresponds
            to array index p + arrayOffset().
            
            Invoke the hasArray method before invoking this method in order to ensure
            that this buffer has an accessible backing array.
            
            @return The offset within this buffer's array of the first element of the
                    buffer
            
            @throws ReadOnlyBufferException -
                        If this buffer is backed by an array but is read-only
                    UnsupportedOperationException - If this buffer is not backed
                        by an accessible array
            
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.capacity">
            Returns the capacity of this buffer.
            
            @return the number of elements that are contained in this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.Buffer.clear" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.Buffer.flip" -->
        <member name="M:biz.ritter.javapi.nio.Buffer.hasArray">
            Answers if this buffer is backed by an available array.
            
            If it returns true then the <code>array</code> and
            <code>arrayOffset</code> methods can be called safely.
            
            @return true if and only if this buffer is backed by an array and is
                    not read-only.
                    
            @since 1.6
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.Buffer.hasRemaining" -->
        <member name="M:biz.ritter.javapi.nio.Buffer.isDirect">
            Answers if this buffer is direct.
            
            @return true if and only if this buffer is direct
            
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.isReadOnly">
            Indicates whether this buffer is read-only.
            
            @return {@code true} if this buffer is read-only, {@code false}
                    otherwise.
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.limit">
            Returns the limit of this buffer.
            
            @return the limit of this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.Buffer.limit(System.Int32)" -->
        <member name="M:biz.ritter.javapi.nio.Buffer.mark">
            Marks the current position, so that the position may return to this point
            later by calling <code>reset()</code>.
            
            @return this buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.position">
            Returns the position of this buffer.
            
            @return the value of this buffer's current position.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.Buffer.position(System.Int32)" -->
        <member name="M:biz.ritter.javapi.nio.Buffer.remaining">
            <summary>
            Returns the number of remaining elements in this buffer, that is
            <c>limit - position</c>.
            </summary>
            <returns>the number of remaining elements in this buffer.</returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.Buffer.reset">
            Resets the position of this buffer to the <code>mark</code>.
            
            @return this buffer.
            @exception InvalidMarkException
                           if the mark is not set.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.Buffer.rewind" -->
        <member name="T:biz.ritter.javapi.lang.CharSequence">
            <remarks>Author: Sebastian Ritter</remarks>
            
        </member>
        <member name="T:biz.ritter.javapi.lang.Readable">
            Represents a sequence of characters that can be incrementally read (copied)
            into a {@link CharBuffer}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Readable.read(biz.ritter.javapi.nio.CharBuffer)">
            Reads characters into the specified {@code CharBuffer}. The maximum
            number of characters read is {@code CharBuffer.remaining()}.
            
            @param cb
                       the buffer to be filled with characters read.
            @return the number of characters actually read, or -1 if this
                    {@code Readable} reaches its end
            @throws IOException
                        if an I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.allocate(System.Int32)">
            Creates a char buffer based on a newly allocated char array.
            
            @param capacity
                       the capacity of the new buffer.
            @return the created char buffer.
            @throws IllegalArgumentException
                        if {@code capacity} is less than zero.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.wrap(System.Char[])" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.wrap(System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.wrap(biz.ritter.javapi.lang.CharSequence)" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.wrap(System.String)">
            <summary>
            Internal helper method to wrap .net String in CharBuffer
            </summary>
            <param name="s">System.String instance</param>
            <returns>CharBuffer instance</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.wrap(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.#ctor(System.Int32)">
            Constructs a {@code CharBuffer} with given capacity.
            
            @param capacity
                       the capacity of the buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.array">
            Returns the char array which this buffer is based on, if there is one.
            
            @return the char array which this buffer is based on.
            @exception ReadOnlyBufferException
                           if this buffer is based on an array, but it is read-only.
            @exception UnsupportedOperationException
                           if this buffer is not based on an array.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.arrayOffset" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.asReadOnlyBuffer" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.charAt(System.Int32)">
            Returns the character located at the specified index in the buffer. The
            index value is referenced from the current buffer position.
            
            @param index
                       the index referenced from the current buffer position. It must
                       not be less than zero but less than the value obtained from a
                       call to {@code remaining()}.
            @return the character located at the specified index (referenced from the
                    current position) in the buffer.
            @exception IndexOutOfBoundsException
                           if the index is invalid.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.compact" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.compareTo(biz.ritter.javapi.nio.CharBuffer)">
            Compare the remaining chars of this buffer to another char
            buffer's remaining chars.
            
            @param otherBuffer
                       another char buffer.
            @return a negative value if this is less than {@code otherBuffer}; 0 if
                    this equals to {@code otherBuffer}; a positive value if this is
                    greater than {@code otherBuffer}.
            @exception ClassCastException
                           if {@code otherBuffer} is not a char buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.duplicate" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.Equals(System.Object)" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.get">
            Returns the char at the current position and increases the position by 1.
            
            @return the char at the current position.
            @exception BufferUnderflowException
                           if the position is equal or greater than limit.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.get(System.Char[])" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.get(System.Char[],System.Int32,System.Int32)">
            Reads chars from the current position into the specified char array,
            starting from the specified offset, and increases the position by the
            number of chars read.
            
            @param dest
                       the target char array.
            @param off
                       the offset of the char array, must not be negative and not
                       greater than {@code dest.length}.
            @param len
                       The number of chars to read, must be no less than zero and no
                       greater than {@code dest.length - off}.
            @return this buffer.
            @exception IndexOutOfBoundsException
                           if either {@code off} or {@code len} is invalid.
            @exception BufferUnderflowException
                           if {@code len} is greater than {@code remaining()}.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.get(System.Int32)">
            Returns a char at the specified index; the position is not changed.
            
            @param index
                       the index, must not be negative and less than limit.
            @return a char at the specified index.
            @exception IndexOutOfBoundsException
                           if index is invalid.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.hasArray">
             Indicates whether this buffer is based on a char array and is read/write.
            
             @return {@code true} if this buffer is based on a byte array and provides
                     read/write access, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.GetHashCode">
             Calculates this buffer's hash code from the remaining chars. The
             position, limit, capacity and mark don't affect the hash code.
            
             @return the hash code calculated from the remaining chars.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.length">
            Returns the number of remaining chars.
            
            @return the number of remaining chars.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.order" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.protectedArray">
             Child class implements this method to realize {@code array()}.
            
             @see #array()
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.protectedArrayOffset">
             Child class implements this method to realize {@code arrayOffset()}.
            
             @see #arrayOffset()
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.protectedHasArray">
             Child class implements this method to realize {@code hasArray()}.
            
             @see #hasArray()
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.Char)">
            Writes the given char to the current position and increases the position
            by 1.
            
            @param c
                       the char to write.
            @return this buffer.
            @exception BufferOverflowException
                           if position is equal or greater than limit.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.put(System.Char[])" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.Char[],System.Int32,System.Int32)">
            Writes chars from the given char array, starting from the specified offset,
            to the current position and increases the position by the number of chars
            written.
            
            @param src
                       the source char array.
            @param off
                       the offset of char array, must not be negative and not greater
                       than {@code src.length}.
            @param len
                       the number of chars to write, must be no less than zero and no
                       greater than {@code src.length - off}.
            @return this buffer.
            @exception BufferOverflowException
                           if {@code remaining()} is less than {@code len}.
            @exception IndexOutOfBoundsException
                           if either {@code off} or {@code len} is invalid.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(biz.ritter.javapi.nio.CharBuffer)">
            Writes all the remaining chars of the {@code src} char buffer to this
            buffer's current position, and increases both buffers' position by the
            number of chars copied.
            
            @param src
                       the source char buffer.
            @return this buffer.
            @exception BufferOverflowException
                           if {@code src.remaining()} is greater than this buffer's
                           {@code remaining()}.
            @exception IllegalArgumentException
                           if {@code src} is this buffer.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.Int32,System.Char)">
            Writes a char to the specified index of this buffer; the position is not
            changed.
            
            @param index
                       the index, must be no less than zero and less than the limit.
            @param c
                       the char to write.
            @return this buffer.
            @exception IndexOutOfBoundsException
                           if index is invalid.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.put(System.String)" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.put(System.String,System.Int32,System.Int32)">
            Writes chars of the given string to the current position of this buffer,
            and increases the position by the number of chars written.
            
            @param str
                       the string to write.
            @param start
                       the first char to write, must not be negative and not greater
                       than {@code str.length()}.
            @param end
                       the last char to write (excluding), must be less than
                       {@code start} and not greater than {@code str.length()}.
            @return this buffer.
            @exception BufferOverflowException
                           if {@code remaining()} is less than {@code end - start}.
            @exception IndexOutOfBoundsException
                           if either {@code start} or {@code end} is invalid.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.slice" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.subSequence(System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.ToString">
            Returns a string representing the current remaining chars of this buffer.
            
            @return a string representing the current remaining chars of this buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.append(System.Char)">
             Writes the given char to the current position and increases the position
             by 1.
            
             @param c
                        the char to write.
             @return this buffer.
             @exception BufferOverflowException
                            if position is equal or greater than limit.
             @exception ReadOnlyBufferException
                            if no changes may be made to the contents of this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.CharBuffer.append(biz.ritter.javapi.lang.CharSequence)" -->
        <member name="M:biz.ritter.javapi.nio.CharBuffer.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
             Writes chars of the given {@code CharSequence} to the current position of
             this buffer, and increases the position by the number of chars written.
            
             @param csq
                        the {@code CharSequence} to write.
             @param start
                        the first char to write, must not be negative and not greater
                        than {@code csq.length()}.
             @param end
                        the last char to write (excluding), must be less than
                        {@code start} and not greater than {@code csq.length()}.
             @return this buffer.
             @exception BufferOverflowException
                            if {@code remaining()} is less than {@code end - start}.
             @exception IndexOutOfBoundsException
                            if either {@code start} or {@code end} is invalid.
             @exception ReadOnlyBufferException
                            if no changes may be made to the contents of this buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.CharBuffer.read(biz.ritter.javapi.nio.CharBuffer)">
             Reads characters from this buffer and puts them into {@code target}. The
             number of chars that are copied is either the number of remaining chars
             in this buffer or the number of remaining chars in {@code target},
             whichever is smaller.
            
             @param target
                        the target char buffer.
             @throws IllegalArgumentException
                         if {@code target} is this buffer.
             @throws IOException
                         if an I/O error occurs.
             @throws ReadOnlyBufferException
                         if no changes may be made to the contents of {@code target}.
             @return the number of chars copied or -1 if there are no chars left to be
                     read from this buffer.
        </member>
        <member name="M:biz.ritter.javapi.lang.Runtime.exit(System.Int32)">
            <summary>
            Stop the current process.
            </summary>
            <see cref="!:#addShutdownHook"/>
            <param name="rc">return code for parent process</param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Runtime.addShutdownHook(biz.ritter.javapi.lang.Thread)">
            <summary>
            Add an thread to running on exit the CLR.
            </summary>
            <param name="hook"></param>
        </member>
        <member name="T:biz.ritter.javapi.io.FilterReader">
            Wraps an existing {@link Reader} and performs some transformation on the
            input data while it is being read. Transformations can be anything from a
            simple byte-wise filtering input data to an on-the-fly compression or
            decompression of the underlying reader. Readers that wrap another reader and
            provide some additional functionality on top of it usually inherit from this
            class.
            
            @see FilterWriter
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.io.Reader" -->
        <member name="F:biz.ritter.javapi.io.Reader.lockJ">
            The object used to synchronize access to the reader.
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.#ctor">
            Constructs a new {@code Reader} with {@code this} as the object used to
            synchronize critical sections.
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.#ctor(System.Object)">
            Constructs a new {@code Reader} with {@code lock} used to synchronize
            critical sections.
            
            @param lock
                       the {@code Object} used to synchronize critical sections.
            @throws NullPointerException
                        if {@code lock} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.close">
            Closes this reader. Implementations of this method should free any
            resources associated with the reader.
            
            @throws IOException
                        if an error occurs while closing this reader.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.Reader.mark(System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.Reader.markSupported">
            Indicates whether this reader supports the {@code mark()} and
            {@code reset()} methods. This default implementation returns
            {@code false}.
            
            @return always {@code false}.
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.read">
            Reads a single character from this reader and returns it as an integer
            with the two higher-order bytes set to 0. Returns -1 if the end of the
            reader has been reached.
            
            @return the character read or -1 if the end of the reader has been
                    reached.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.read(System.Char[])">
            Reads characters from this reader and stores them in the character array
            {@code buf} starting at offset 0. Returns the number of characters
            actually read or -1 if the end of the reader has been reached.
            
            @param buf
                       character array to store the characters read.
            @return the number of characters read or -1 if the end of the reader has
                    been reached.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.read(System.Char[],System.Int32,System.Int32)">
            Reads at most {@code count} characters from this reader and stores them
            at {@code offset} in the character array {@code buf}. Returns the number
            of characters actually read or -1 if the end of the reader has been
            reached.
            
            @param buf
                       the character array to store the characters read.
            @param offset
                       the initial position in {@code buffer} to store the characters
                       read from this reader.
            @param count
                       the maximum number of characters to read.
            @return the number of characters read or -1 if the end of the reader has
                    been reached.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.ready">
            Indicates whether this reader is ready to be read without blocking.
            Returns {@code true} if this reader will not block when {@code read} is
            called, {@code false} if unknown or blocking will occur. This default
            implementation always returns {@code false}.
            
            @return always {@code false}.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
            @see #read()
            @see #read(char[])
            @see #read(char[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.Reader.reset">
            Resets this reader's position to the last {@code mark()} location.
            Invocations of {@code read()} and {@code skip()} will occur from this new
            location. If this reader has not been marked, the behavior of
            {@code reset()} is implementation specific. This default
            implementation throws an {@code IOException}.
            
            @throws IOException
                        always thrown in this default implementation.
            @see #mark(int)
            @see #markSupported()
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.Reader.skip(System.Int64)" -->
        <member name="M:biz.ritter.javapi.io.Reader.read(biz.ritter.javapi.nio.CharBuffer)">
            Reads characters and puts them into the {@code target} character buffer.
            
            @param target
                       the destination character buffer.
            @return the number of characters put into {@code target} or -1 if the end
                    of this reader has been reached before a character has been read.
            @throws IOException
                        if any I/O error occurs while reading from this reader.
            @throws NullPointerException
                        if {@code target} is {@code null}.
            @throws ReadOnlyBufferException
                        if {@code target} is read-only.
        </member>
        <member name="F:biz.ritter.javapi.io.FilterReader.inJ">
            The target Reader which is being filtered.
        </member>
        <member name="M:biz.ritter.javapi.io.FilterReader.#ctor(biz.ritter.javapi.io.Reader)">
            Constructs a new FilterReader on the Reader {@code in}.
            
            @param in
                       The non-null Reader to filter reads on.
        </member>
        <member name="M:biz.ritter.javapi.io.FilterReader.close">
            Closes this reader. This implementation closes the filtered reader.
            
            @throws IOException
                        if an error occurs while closing this reader.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.FilterReader.mark(System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.FilterReader.markSupported">
            Indicates whether this reader supports {@code mark()} and {@code reset()}.
            This implementation returns whether the filtered reader supports marking.
            
            @return {@code true} if {@code mark()} and {@code reset()} are supported
                    by the filtered reader, {@code false} otherwise.
            @see #mark(int)
            @see #reset()
            @see #skip(long)
        </member>
        <member name="M:biz.ritter.javapi.io.FilterReader.read">
            Reads a single character from the filtered reader and returns it as an
            integer with the two higher-order bytes set to 0. Returns -1 if the end
            of the filtered reader has been reached.
            
            @return The character read or -1 if the end of the filtered reader has
                    been reached.
            @throws IOException
                        if an error occurs while reading from this reader.
        </member>
        <member name="M:biz.ritter.javapi.io.FilterReader.read(System.Char[],System.Int32,System.Int32)">
            Reads at most {@code count} characters from the filtered reader and stores them
            in the byte array {@code buffer} starting at {@code offset}. Returns the
            number of characters actually read or -1 if no characters were read and
            the end of the filtered reader was encountered.
            
            @param buffer
                       the char array in which to store the characters read.
            @param offset
                       the initial position in {@code buffer} to store the characters
                       read from this reader.
            @param count
                       the maximum number of characters to store in {@code buffer}.
            @return the number of characters actually read or -1 if the end of the
                    filtered reader has been reached while reading.
            @throws IOException
                        if an error occurs while reading from this reader.
        </member>
        <member name="M:biz.ritter.javapi.io.FilterReader.ready">
            Indicates whether this reader is ready to be read without blocking. If
            the result is {@code true}, the next {@code read()} will not block. If
            the result is {@code false}, this reader may or may not block when
            {@code read()} is sent.
            
            @return {@code true} if this reader will not block when {@code read()}
                    is called, {@code false} if unknown or blocking will occur.
            @throws IOException
                        if the reader is closed or some other I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.FilterReader.reset">
            Resets this reader's position to the last marked location. Invocations of
            {@code read()} and {@code skip()} will occur from this new location. If
            this reader was not marked, the behavior depends on the implementation of
            {@code reset()} in the Reader subclass that is filtered by this reader.
            The default behavior for Reader is to throw an {@code IOException}.
            
            @throws IOException
                        if a problem occurred or the filtered reader does not support
                        {@code mark()} and {@code reset()}.
            @see #mark(int)
            @see #markSupported()
        </member>
        <member name="M:biz.ritter.javapi.io.FilterReader.skip(System.Int64)">
            Skips {@code count} characters in this reader. Subsequent {@code read()}'s
            will not return these characters unless {@code reset()} is used. The
            default implementation is to skip characters in the filtered reader.
            
            @param count
                       the maximum number of characters to skip.
            @return the number of characters actually skipped.
            @throws IOException
                        if the filtered reader is closed or some other I/O error
                        occurs.
            @see #mark(int)
            @see #markSupported()
            @see #reset()
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.text.Format" -->
        <member name="M:biz.ritter.javapi.text.Format.#ctor">
            Constructs a new {@code Format} instance.
        </member>
        <member name="M:biz.ritter.javapi.text.Format.clone">
            Returns a copy of this {@code Format} instance.
            
            @return a shallow copy of this format.
            
            @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.text.Format.format(System.Object)">
            Formats the specified object using the rules of this format.
            
            @param object
                       the object to format.
            @return the formatted string.
            @throws IllegalArgumentException
                    if the object cannot be formatted by this format.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.text.Format.format(System.Object,biz.ritter.javapi.lang.StringBuffer,biz.ritter.javapi.text.FieldPosition)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.text.Format.formatToCharacterIterator(System.Object)" -->
        <member name="M:biz.ritter.javapi.text.Format.parseObject(System.String)">
            Parses the specified string using the rules of this format.
            
            @param string
                       the string to parse.
            @return the object resulting from the parse.
            @throws ParseException
                       if an error occurs during parsing.
        </member>
        <member name="M:biz.ritter.javapi.text.Format.parseObject(System.String,biz.ritter.javapi.text.ParsePosition)">
            Parses the specified string starting at the index specified by
            {@code position}. If the string is successfully parsed then the index of
            the {@code ParsePosition} is updated to the index following the parsed
            text. On error, the index is unchanged and the error index of
            {@code ParsePosition} is set to the index where the error occurred.
            
            @param string
                       the string to parse.
            @param position
                       input/output parameter, specifies the start index in
                       {@code string} from where to start parsing. If parsing is
                       successful, it is updated with the index following the parsed
                       text; on error, the index is unchanged and the error index is
                       set to the index where the error occurred.
            @return the object resulting from the parse or {@code null} if there is
                    an error.
        </member>
        <member name="T:biz.ritter.javapi.text.FormatNS.Field">
            Inner class used to represent {@code Format} attributes in the
            {@code AttributedCharacterIterator} that the
            {@code formatToCharacterIterator()} method returns in {@code Format}
            subclasses.
        </member>
        <member name="T:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute">
            Defines keys for text attributes.
        </member>
        <member name="F:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.INPUT_METHOD_SEGMENT">
             This attribute marks segments from an input method. Most input
             methods create these segments for words.
            
             The value objects are of the type {@code Annotation} which contain
             {@code null}.
        </member>
        <member name="F:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.LANGUAGE">
            The attribute describing the language of a character. The value
            objects are of type {@code Locale} or a subtype of it.
        </member>
        <member name="F:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.READING">
            For languages that have different reading directions of text (like
            Japanese), this attribute allows to define which reading should be
            used. The value objects are of type {@code Annotation} which
            contain a {@code String}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.#ctor(System.String)">
             The constructor for an {@code Attribute} with the name passed.
            
             @param name
                        the name of the new {@code Attribute}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.Equals(System.Object)">
             Compares this attribute with the specified object. Checks if both
             objects are the same instance. It is defined final so all subclasses
             have the same behavior for this method.
            
             @param object
                        the object to compare against.
             @return {@code true} if the object passed is equal to this instance;
                     {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.getName">
             Returns the name of this attribute.
            
             @return the name of this attribute.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.GetHashCode">
             Calculates the hash code for objects of type {@code Attribute}. It
             is defined final so all sub types calculate their hash code
             identically.
            
             @return the hash code for this instance of {@code Attribute}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.readResolve">
             Resolves a deserialized instance to the correct constant attribute.
            
             @return the {@code Attribute} this instance represents.
             @throws InvalidObjectException
                         if this instance is not of type {@code Attribute.class}
                         or if it is not a known {@code Attribute}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute.ToString">
             Returns the name of the class followed by a "(", the name of the
             attribute, and a ")".
            
             @return the string representing this instance.
        </member>
        <member name="M:biz.ritter.javapi.text.FormatNS.Field.#ctor(System.String)">
             Constructs a new instance of {@code Field} with the given field name.
            
             @param fieldName
                        the field name.
        </member>
        <member name="T:biz.ritter.javapi.math.Elementary">
            Static library that provides the basic arithmetic mutable operations for
            {@link BigInteger}. The operations provided are listed below.
            <ul type="circle">
            <li>Addition.</li>
            <li>Subtraction.</li>
            <li>Comparison.</li>
            </ul>
            In addition to this, some <i><b>Inplace</b></i> (mutable) methods are provided.
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.#ctor">
            Just to denote that this class can't be instantiated 
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Elementary.compareArrays(System.Int32[],System.Int32[],System.Int32)" -->
        <member name="M:biz.ritter.javapi.math.Elementary.add(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#add(BigInteger) 
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.add(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Performs {@code res = a + b}. 
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.subtract(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#subtract(BigInteger) 
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.subtract(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Performs {@code res = a - b}. It is assumed the magnitude of a is not
            less than the magnitude of b.
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.add(System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Addss the value represented by {@code b} to the value represented by
            {@code a}. It is assumed the magnitude of a is not less than the
            magnitude of b.
            
            @return {@code a + b}
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceAdd(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Performs {@code op1 += op2}. {@code op1} must have enough place to store
            the result (i.e. {@code op1.bitLength() >= op2.bitLength()}). Both
            should be positive (i.e. {@code op1 >= op2}).
            
            @param op1 the input minuend, and the output result.
            @param op2 the addend
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceAdd(System.Int32[],System.Int32,System.Int32)">
            Adds an integer value to the array of integers remembering carry.
            
            @return a possible generated carry (0 or 1)
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceAdd(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Performs: {@code op1 += addend}. The number must to have place to hold a
            possible carry.
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.inplaceSubtract(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Performs {@code op1 -= op2}. {@code op1} must have enough place to store
            the result (i.e. {@code op1.bitLength() >= op2.bitLength()}). Both
            should be positive (what implies that {@code op1 >= op2}).
            
            @param op1
                       the input minuend, and the output result.
            @param op2
                       the subtrahend
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.inverseSubtract(System.Int32[],System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Performs {@code res = b - a}
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.subtract(System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Subtracts the value represented by {@code b} from the value represented
            by {@code a}. It is assumed the magnitude of a is not less than the
            magnitude of b.
            
            @return {@code a - b}
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.completeInPlaceSubtract(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Same as
            
            @link #inplaceSubtract(BigInteger, BigInteger), but without the
                  restriction of non-positive values
            @param op1
                       should have enough space to save the result
            @param op2
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.completeInPlaceAdd(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Same as @link #inplaceAdd(BigInteger, BigInteger), but without the restriction of
                  non-positive values
            @param op1 any number
            @param op2 any number
        </member>
        <member name="M:biz.ritter.javapi.math.Elementary.unsignedArraysCompare(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Compares two arrays, representing unsigned integer in little-endian order.
            Returns +1,0,-1 if a is - respective - greater, equal or lesser then b 
        </member>
        <member name="T:biz.ritter.javapi.lang.refj.ReferenceQueue`1">
             The {@code ReferenceQueue} is the container on which reference objects are
             enqueued when the garbage collector detects the reachability type specified
             for the referent.
            
             @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.#ctor">
            Constructs a new instance of this class.
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.poll">
             Returns the next available reference from the queue, removing it in the
             process. Does not wait for a reference to become available.
            
             @return the next available reference, or {@code null} if no reference is
                     immediately available
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.remove">
             Returns the next available reference from the queue, removing it in the
             process. Waits indefinitely for a reference to become available.
            
             @return the next available reference
            
             @throws InterruptedException
                         if the blocking call was interrupted for some reason
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.remove(System.Int64)">
             Returns the next available reference from the queue, removing it in the
             process. Waits for a reference to become available or the given timeout
             period to elapse, whichever happens first.
            
             @param timeout
                        maximum time (in ms) to spend waiting for a reference object
                        to become available. A value of zero results in the method
                        waiting indefinitely.
             @return the next available reference, or {@code null} if no reference
                     becomes available within the timeout period
             @throws IllegalArgumentException
                         if the wait period is negative.
             @throws InterruptedException
                         if the blocking call was interrupted for some reason
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.ReferenceQueue`1.enqueue(biz.ritter.javapi.lang.refj.Reference{`0})">
             Enqueue the reference object on the receiver.
            
             @param reference
                        reference object to be enqueued.
             @return boolean true if reference is enqueued. false if reference failed
                     to enqueue.
        </member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.readFully(System.Byte[])">
            Reads bytes from this file into {@code buffer}. Blocks until {@code
            buffer.length} number of bytes have been read, the end of the file is
            reached or an exception is thrown.
            
            @param buffer
                       the buffer to read bytes into.
            @throws EOFException
                        if the end of this file is detected.
            @throws IOException
                        if this file is closed or another I/O error occurs.
            @throws NullPointerException
                        if {@code buffer} is {@code null}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.RandomAccessFile.readFully(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.length">
            Returns the length of this file in bytes.
            
            @return the file's length in bytes.
            @throws IOException
                        if this file is closed or some other I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.openCheck">
            Checks to see if the file is currently open. Returns silently if it is,
            and throws an exception if it is not.
            
            @throws IOException
                        the receiver is closed.
        </member>
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.skipBytes(System.Int32)">
            Skips over {@code count} bytes in this file. Less than {@code count}
            bytes are skipped if the end of the file is reached or an exception is
            thrown during the operation. Nothing is done if {@code count} is
            negative.
            
            @param count
                       the number of bytes to skip.
            @return the number of bytes actually skipped.
            @throws IOException
                        if this file is closed or another I/O error occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.RandomAccessFile.seek(System.Int64)" -->
        <member name="M:biz.ritter.javapi.io.RandomAccessFile.getFilePointer">
            Gets the current position within this file. All reads and
            writes take place at the current file pointer position.
            
            @return the current offset in bytes from the beginning of the file.
            
            @throws IOException
                        if an error occurs while getting the file pointer of this
                        file.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.RandomAccessFile.read(System.Byte[],System.Int32,System.Int32)" -->
        <member name="T:biz.ritter.javapi.io.ByteArrayInputStream">
            A specialized {@link InputStream } for reading the contents of a byte array.
            
            @see ByteArrayOutputStream
        </member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.buf">
            The {@code byte} array containing the bytes to stream over.
        </member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.pos">
            The current position within the byte array.
        </member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.markJ">
            The current mark position. Initially set to 0 or the <code>offset</code>
            parameter within the constructor.
        </member>
        <member name="F:biz.ritter.javapi.io.ByteArrayInputStream.countJ">
            The total number of bytes initially available in the byte array
            {@code buf}.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.#ctor(System.Byte[])">
            Constructs a new {@code ByteArrayInputStream} on the byte array
            {@code buf}.
            
            @param buf
                       the byte array to stream over.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            Constructs a new {@code ByteArrayInputStream} on the byte array
            {@code buf} with the initial position set to {@code offset} and the
            number of bytes available set to {@code offset} + {@code length}.
            
            @param buf
                       the byte array to stream over.
            @param offset
                       the initial position in {@code buf} to start streaming from.
            @param length
                       the number of bytes available for streaming.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.available">
            Returns the number of bytes that are available before this stream will
            block. This method returns the number of bytes yet to be read from the
            source byte array.
            
            @return the number of bytes available before blocking.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.close">
            Closes this stream and frees resources associated with this stream.
            
            @throws IOException
                        if an I/O error occurs while closing this stream.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.mark(System.Int32)">
            Sets a mark position in this ByteArrayInputStream. The parameter
            {@code readlimit} is ignored. Sending {@code reset()} will reposition the
            stream back to the marked position.
            
            @param readlimit
                       ignored.
            @see #markSupported()
            @see #reset()
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.markSupported">
            Indicates whether this stream supports the {@code mark()} and
            {@code reset()} methods. Returns {@code true} since this class supports
            these methods.
            
            @return always {@code true}.
            @see #mark(int)
            @see #reset()
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.read">
            Reads a single byte from the source byte array and returns it as an
            integer in the range from 0 to 255. Returns -1 if the end of the source
            array has been reached.
            
            @return the byte read or -1 if the end of this stream has been reached.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.ByteArrayInputStream.read(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.reset">
             Resets this stream to the last marked location. This implementation
             resets the position to either the marked position, the start position
             supplied in the constructor or 0 if neither has been provided.
            
             @see #mark(int)
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayInputStream.skip(System.Int64)">
            Skips {@code count} number of bytes in this InputStream. Subsequent
            {@code read()}s will not return these bytes unless {@code reset()} is
            used. This implementation skips {@code count} number of bytes in the
            target stream. It does nothing and returns 0 if {@code n} is negative.
            
            @param n
                       the number of bytes to skip.
            @return the number of bytes actually skipped.
        </member>
        <member name="T:biz.ritter.javapi.lang.NoSuchMethodException">
            Thrown when the virtual machine notices that a program tries to reference,
            on a class or object, a method that does not exist.
        </member>
        <member name="M:biz.ritter.javapi.lang.NoSuchMethodException.#ctor">
            Constructs a new {@code NoSuchMethodException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.NoSuchMethodException.#ctor(System.String)">
            Constructs a new {@code NoSuchMethodException} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadOnlyCharArrayBuffer">
            CharArrayBuffer, ReadWriteCharArrayBuffer and ReadOnlyCharArrayBuffer compose
            the implementation of array based char buffers.
            <p>
            ReadOnlyCharArrayBuffer extends CharArrayBuffer with all the write methods
            throwing read only exception.
            </p>
            <p>
            This class is marked final for runtime performance.
            </p>
            
        </member>
        <member name="T:biz.ritter.javapi.util.zip.CheckedOutputStream">
            The {@code CheckedOutputStream} class is used to maintain a running checksum
            of all data written to a stream. The purpose of this checksum is to establish
            data integrity, by publishing the checksum to other parties wanting to read
            the non corrupted data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Checksum)">
             Constructs a new {@code CheckedOutputStream} on {@code OutputStream}
             {@code os}. The checksum is calculated using the algorithm implemented
             by {@code csum}.
            
             @param os
                        the output stream to calculate checksum for.
             @param cs
                        an entity implementing the checksum algorithm.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.getChecksum">
             Returns the checksum calculated on the stream read so far.
            
             @return the updated checksum.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.write(System.Int32)">
             Writes the specified byte to the underlying stream. The checksum is
             updated with {@code val}.
            
             @param val
                        the data value to written to the output stream.
             @throws IOException
                         if an IO error has occurred.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedOutputStream.write(System.Byte[],System.Int32,System.Int32)">
             Writes n bytes of data from {@code buf} starting at offset {@code off} to
             the underlying stream. The checksum is updated with the bytes written.
            
             @param buf
                        data written to the output stream.
             @param off
                        the offset to start reading the data from {@code buf} written
                        to the output stream.
             @param nbytes
                        number of bytes to write to the output stream.
             @throws IOException
                         if an IO error has occurred.
        </member>
        <member name="T:biz.ritter.javapi.util.Observer">
            {@code Observer} is the interface to be implemented by objects that 
            receive notification of updates on an {@code Observable} object.
            
            @see Observable 
        </member>
        <member name="M:biz.ritter.javapi.util.Observer.update(biz.ritter.javapi.util.Observable,System.Object)">
            This method is called if the specified {@code Observable} object's
            {@code notifyObservers} method is called (because the {@code Observable} 
            object has been updated.
            
            @param observable
                       the {@link Observable} object.
            @param data
                       the data passed to {@link Observable#notifyObservers(Object)}.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.NavigableMap`2" -->
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.firstEntry">
            Answers the entry with the smallest key, or null if the map is empty.
            
            @return the entry with the smallest key, or null if the map is empty
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.lastEntry">
            Answers the entry with the biggest key, or null if the map is empty.
            
            @return the entry with the biggest key, or null if the map is empty
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.pollFirstEntry">
            Deletes and answers the entry with the smallest key, or null if the map
            is empty.
            
            @return the entry with the smallest key, or null if the map is empty
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.pollLastEntry">
            Deletes and answers the entry with the biggest key, or null if the map is
            empty.
            
            @return the entry with the biggest key, or null if the map is empty
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.ceilingEntry(`0)">
            Answers an entry related with the smallest key greater than or equal to
            the specified key, or null if no such key.
            
            @param key
                       the key
            @return the entry, or null if no such key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.ceilingKey(`0)">
            Answers the smallest key greater than or equal to the specified key, or
            null if no such key.
            
            @param key
                       the key
            @return the smallest key greater than or equal to key, or null if no such
                    key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.higherEntry(`0)">
            Answers an entry related with the smallest key greater than the specified
            key, or null if no such key.
            
            @param key
                       the key
            @return the entry, or null if no such key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.higherKey(`0)">
            Answers the smallest key greater than the specified key, or null if no
            such key.
            
            @param key
                       the key
            @return the smallest key greater than key, or null if no such key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.floorEntry(`0)">
            Answers an entry related with the biggest key less than or equal to the
            specified key, or null if no such key.
            
            @param key
                       the key
            @return the entry, or null if no such key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.floorKey(`0)">
            Answers the biggest key less than or equal to the specified key, or null
            if no such key.
            
            @param key
                       the key
            @return the biggest key less than or equal to key, or null if no such key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.lowerEntry(`0)">
            Answers an entry related with the biggest key less than the specified
            key, or null if no such key.
            
            @param key
                       the key
            @return the entry, or null if no such key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.lowerKey(`0)">
            Answers the biggest key less than the specified key, or null if no such
            key.
            
            @param key
                       the key
            @return the biggest key less than key, or null if no such key
            @throws ClassCastException
                        if the key cannot be compared with the keys in the map
            @throws NullPointerException
                        if the key is null and the map can not contain null key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.navigableKeySet">
            Answers a NavigableSet view of the keys in ascending order.
            
            @return the navigable set view
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.descendingMap">
            Answers a reverse order view of the map.
            
            @return the reverse order view of the map
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.descendingKeySet">
            Answers a NavigableSet view of the keys in descending order.
            
            @return the navigable set view
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.subMap(`0,System.Boolean,`0,System.Boolean)">
            Answers a view of part of the map whose keys is from startKey to endKey.
            
            @param startKey
                       the start key
            @param startInclusive
                       true if the start key is in the returned map
            @param endKey
                       the end key
            @param endInclusive
                       true if the end key is in the returned map
            @return the sub-map view
            
            @exception ClassCastException
                           when the class of the start or end key is inappropriate
                           for this SubMap
            @exception NullPointerException
                           when the start or end key is null and this SortedMap does
                           not support null keys
            @exception IllegalArgumentException
                           when the start key is greater than the end key
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.headMap(`0,System.Boolean)">
            Answers a view of the head of the map whose keys are smaller than (or
            equal to, depends on inclusive argument) endKey.
            
            @param endKey
                       the end key
            @param inclusive
                       true if the end key is in the returned map
            @return the head-map view
            
            @exception ClassCastException
                           when the class of the end key is inappropriate for this
                           SubMap
            @exception NullPointerException
                           when the end key is null and this SortedMap does not
                           support null keys
            @exception IllegalArgumentException
                           when the map is range-limited and end key is out of the
                           range of the map
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableMap`2.tailMap(`0,System.Boolean)">
            Answers a view of the tail of the map whose keys are bigger than (or
            equal to, depends on inclusive argument) startKey.
            
            @param startKey
                       the start key
            @param inclusive
                       true if the start key is in the returned map
            @return the tail-map view
            
            @exception ClassCastException
                           when the class of the start key is inappropriate for this
                           SubMap
            @exception NullPointerException
                           when the start key is null and this SortedMap does not
                           support null keys
            @exception IllegalArgumentException
                           when the map is range-limited and start key is out of the
                           range of the map
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.ERA">
             Field number for {@code get} and {@code set} indicating the
             era, e.g., AD or BC in the Julian calendar. This is a calendar-specific
             value; see subclass documentation.
            
             @see GregorianCalendar#AD
             @see GregorianCalendar#BC
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.YEAR">
            Field number for {@code get} and {@code set} indicating the
            year. This is a calendar-specific value; see subclass documentation.
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.MONTH">
             Field number for {@code get} and {@code set} indicating the
             month. This is a calendar-specific value. The first month of the year is
             {@code JANUARY}; the last depends on the number of months in a
             year.
            
             @see #JANUARY
             @see #FEBRUARY
             @see #MARCH
             @see #APRIL
             @see #MAY
             @see #JUNE
             @see #JULY
             @see #AUGUST
             @see #SEPTEMBER
             @see #OCTOBER
             @see #NOVEMBER
             @see #DECEMBER
             @see #UNDECIMBER
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.WEEK_OF_YEAR">
             Field number for {@code get} and {@code set} indicating the
             week number within the current year. The first week of the year, as
             defined by {@code getFirstDayOfWeek()} and
             {@code getMinimalDaysInFirstWeek()}, has value 1. Subclasses
             define the value of {@code WEEK_OF_YEAR} for days before the first
             week of the year.
            
             @see #getFirstDayOfWeek
             @see #getMinimalDaysInFirstWeek
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.WEEK_OF_MONTH">
             Field number for {@code get} and {@code set} indicating the
             week number within the current month. The first week of the month, as
             defined by {@code getFirstDayOfWeek()} and
             {@code getMinimalDaysInFirstWeek()}, has value 1. Subclasses
             define the value of {@code WEEK_OF_MONTH} for days before the
             first week of the month.
            
             @see #getFirstDayOfWeek
             @see #getMinimalDaysInFirstWeek
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.DATE">
             Field number for {@code get} and {@code set} indicating the
             day of the month. This is a synonym for {@code DAY_OF_MONTH}. The
             first day of the month has value 1.
            
             @see #DAY_OF_MONTH
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_MONTH">
             Field number for {@code get} and {@code set} indicating the
             day of the month. This is a synonym for {@code DATE}. The first
             day of the month has value 1.
            
             @see #DATE
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_YEAR">
            Field number for {@code get} and {@code set} indicating the
            day number within the current year. The first day of the year has value
            1.
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_WEEK">
             Field number for {@code get} and {@code set} indicating the
             day of the week. This field takes values {@code SUNDAY},
             {@code MONDAY}, {@code TUESDAY}, {@code WEDNESDAY},
             {@code THURSDAY}, {@code FRIDAY}, and
             {@code SATURDAY}.
            
             @see #SUNDAY
             @see #MONDAY
             @see #TUESDAY
             @see #WEDNESDAY
             @see #THURSDAY
             @see #FRIDAY
             @see #SATURDAY
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.DAY_OF_WEEK_IN_MONTH">
             Field number for {@code get} and {@code set} indicating the
             ordinal number of the day of the week within the current month. Together
             with the {@code DAY_OF_WEEK} field, this uniquely specifies a day
             within a month. Unlike {@code WEEK_OF_MONTH} and
             {@code WEEK_OF_YEAR}, this field's value does <em>not</em>
             depend on {@code getFirstDayOfWeek()} or
             {@code getMinimalDaysInFirstWeek()}. {@code DAY_OF_MONTH 1}
             through {@code 7} always correspond to <code>DAY_OF_WEEK_IN_MONTH
             1</code>;
             {@code 8} through {@code 15} correspond to
             {@code DAY_OF_WEEK_IN_MONTH 2}, and so on.
             {@code DAY_OF_WEEK_IN_MONTH 0} indicates the week before
             {@code DAY_OF_WEEK_IN_MONTH 1}. Negative values count back from
             the end of the month, so the last Sunday of a month is specified as
             {@code DAY_OF_WEEK = SUNDAY, DAY_OF_WEEK_IN_MONTH = -1}. Because
             negative values count backward they will usually be aligned differently
             within the month than positive values. For example, if a month has 31
             days, {@code DAY_OF_WEEK_IN_MONTH -1} will overlap
             {@code DAY_OF_WEEK_IN_MONTH 5} and the end of {@code 4}.
            
             @see #DAY_OF_WEEK
             @see #WEEK_OF_MONTH
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.AM_PM">
             Field number for {@code get} and {@code set} indicating
             whether the {@code HOUR} is before or after noon. E.g., at
             10:04:15.250 PM the {@code AM_PM} is {@code PM}.
            
             @see #AM
             @see #PM
             @see #HOUR
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.AM">
            Value of the {@code AM_PM} field indicating the period of the day
            from midnight to just before noon.
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.PM">
            Value of the {@code AM_PM} field indicating the period of the day
            from noon to just before midnight.
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.HOUR">
             Field number for {@code get} and {@code set} indicating the
             hour of the morning or afternoon. {@code HOUR} is used for the
             12-hour clock. E.g., at 10:04:15.250 PM the {@code HOUR} is 10.
            
             @see #AM_PM
             @see #HOUR_OF_DAY
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.HOUR_OF_DAY">
             Field number for {@code get} and {@code set} indicating the
             hour of the day. {@code HOUR_OF_DAY} is used for the 24-hour
             clock. E.g., at 10:04:15.250 PM the {@code HOUR_OF_DAY} is 22.
            
             @see #HOUR
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.MINUTE">
            Field number for {@code get} and {@code set} indicating the
            minute within the hour. E.g., at 10:04:15.250 PM the {@code MINUTE}
            is 4.
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.SECOND">
            Field number for {@code get} and {@code set} indicating the
            second within the minute. E.g., at 10:04:15.250 PM the
            {@code SECOND} is 15.
        </member>
        <member name="F:biz.ritter.javapi.util.Calendar.MILLISECOND">
            Field number for {@code get} and {@code set} indicating the
            millisecond within the second. E.g., at 10:04:15.250 PM the
            {@code MILLISECOND} is 250.
        </member>
        <member name="F:biz.ritter.javapi.util.GregorianCalendar.BC">
            Value for the BC era.
        </member>
        <member name="F:biz.ritter.javapi.util.GregorianCalendar.AD">
            Value for the AD era.
        </member>
        <member name="T:biz.ritter.javapi.lang.UnsupportedOperationException">
            Thrown when an unsupported operation is attempted.
        </member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor">
            Constructs a new {@code UnsupportedOperationException} that includes the
            current stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor(System.String)">
            Constructs a new {@code UnsupportedOperationException} with the current
            stack trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
            Constructs a new {@code UnsupportedOperationException} with the current
            stack trace, the specified detail message and the specified cause.
            
            @param message
                       the detail message for this exception.
            @param cause
                       the optional cause of this exception, may be {@code null}.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.UnsupportedOperationException.#ctor(biz.ritter.javapi.lang.Throwable)">
            Constructs a new {@code UnsupportedOperationException} with the current
            stack trace and the specified cause.
            
            @param cause
                       the optional cause of this exception, may be {@code null}.
            @since 1.5
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.io.Writer" -->
        <member name="F:biz.ritter.javapi.io.Writer.lockJ">
            The object used to synchronize access to the writer.
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.#ctor">
            Constructs a new {@code Writer} with {@code this} as the object used to
            synchronize critical sections.
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.#ctor(System.Object)">
            Constructs a new {@code Writer} with {@code lock} used to synchronize
            critical sections.
            
            @param lock
                       the {@code Object} used to synchronize critical sections.
            @throws NullPointerException
                        if {@code lock} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.close">
            Closes this writer. Implementations of this method should free any
            resources associated with the writer.
            
            @throws IOException
                        if an error occurs while closing this writer.
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.flush">
            Flushes this writer. Implementations of this method should ensure that
            all buffered characters are written to the target.
            
            @throws IOException
                        if an error occurs while flushing this writer.
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.write(System.Char[])">
            Writes the entire character buffer {@code buf} to the target.
            
            @param buf
                       the non-null array containing characters to write.
            @throws IOException
                        if this writer is closed or another I/O error occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.Writer.write(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.Writer.write(System.Int32)">
            Writes one character to the target. Only the two least significant bytes
            of the integer {@code oneChar} are written.
            
            @param oneChar
                       the character to write to the target.
            @throws IOException
                        if this writer is closed or another I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.write(System.String)">
            Writes the characters from the specified string to the target.
            
            @param str
                       the non-null string containing the characters to write.
            @throws IOException
                        if this writer is closed or another I/O error occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.Writer.write(System.String,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.Writer.append(System.Char)">
            Appends the character {@code c} to the target. This method works the same
            way as {@link #write(int)}.
            
            @param c
                       the character to append to the target stream.
            @return this writer.
            @throws IOException
                        if this writer is closed or another I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.Writer.append(biz.ritter.javapi.lang.CharSequence)">
            Appends the character sequence {@code csq} to the target. This method
            works the same way as {@code Writer.write(csq.toString())}. If {@code
            csq} is {@code null}, then the string "null" is written to the target
            stream.
            
            @param csq
                       the character sequence appended to the target.
            @return this writer.
            @throws IOException
                        if this writer is closed or another I/O error occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.Writer.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.Writer.checkError">
            <summary>
             Returns true if this writer has encountered and suppressed an error. Used
             by PrintWriters as an alternative to checked exceptions.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.UnmappableCharacterException">
            An {@code UnmappableCharacterException} is thrown when an unmappable
            character for the given charset is encountered.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.UnmappableCharacterException.#ctor(System.Int32)">
            Constructs a new {@code UnmappableCharacterException}.
            
            @param length
                       the length of the unmappable character.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.UnmappableCharacterException.getInputLength">
            Gets the length of the unmappable character.
            
            @return the length of the unmappable character.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.UnmappableCharacterException.getMessage">
            Gets a message describing this exception.
            
            @return a message describing this exception.
        </member>
        <member name="T:biz.ritter.javapi.math.MathContext">
            Immutable objects describing settings such as rounding mode and digit
            precision for the numerical operations provided by class {@link BigDecimal}.
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.DECIMAL128">
            A {@code MathContext} which corresponds to the IEEE 754r quadruple
            decimal precision format: 34 digit precision and
            {@link RoundingMode#HALF_EVEN} rounding.
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.DECIMAL32">
            A {@code MathContext} which corresponds to the IEEE 754r single decimal
            precision format: 7 digit precision and {@link RoundingMode#HALF_EVEN}
            rounding.
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.DECIMAL64">
            A {@code MathContext} which corresponds to the IEEE 754r double decimal
            precision format: 16 digit precision and {@link RoundingMode#HALF_EVEN}
            rounding.
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.UNLIMITED">
            A {@code MathContext} for unlimited precision with
            {@link RoundingMode#HALF_UP} rounding.
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.serialVersionUID">
            This is the serialVersionUID used by the sun implementation 
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.precision">
            The number of digits to be used for an operation; results are rounded to
            this precision.
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.roundingMode">
            A {@code RoundingMode} object which specifies the algorithm to be used
            for rounding.
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.chPrecision">
             An array of {@code char} containing: {@code
             'p','r','e','c','i','s','i','o','n','='}. It's used to improve the
             methods related to {@code String} conversion.
            
             @see #MathContext(String)
             @see #toString()
        </member>
        <member name="F:biz.ritter.javapi.math.MathContext.chRoundingMode">
             An array of {@code char} containing: {@code
             'r','o','u','n','d','i','n','g','M','o','d','e','='}. It's used to
             improve the methods related to {@code String} conversion.
            
             @see #MathContext(String)
             @see #toString()
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.MathContext.#ctor(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.MathContext.#ctor(System.Int32,biz.ritter.javapi.math.RoundingMode)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.MathContext.#ctor(System.String)" -->
        <member name="M:biz.ritter.javapi.math.MathContext.getPrecision">
             Returns the precision. The precision is the number of digits used for an
             operation. Results are rounded to this precision. The precision is
             guaranteed to be non negative. If the precision is zero, then the
             computations have to be performed exact, results are not rounded in this
             case.
            
             @return the precision.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.MathContext.getRoundingMode" -->
        <member name="M:biz.ritter.javapi.math.MathContext.Equals(System.Object)">
             Returns true if x is a {@code MathContext} with the same precision
             setting and the same rounding mode as this {@code MathContext} instance.
            
             @param x
                        object to be compared.
             @return {@code true} if this {@code MathContext} instance is equal to the
                     {@code x} argument; {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.math.MathContext.GetHashCode">
             Returns the hash code for this {@code MathContext} instance.
            
             @return the hash code for this {@code MathContext}.
        </member>
        <member name="M:biz.ritter.javapi.math.MathContext.ToString">
             Returns the string representation for this {@code MathContext} instance.
             The string has the form
             {@code
             "precision=&lt;precision&gt; roundingMode=&lt;roundingMode&gt;"
             } where {@code &lt;precision&gt;} is an integer describing the number
             of digits used for operations and {@code &lt;roundingMode&gt;} is the
             string representation of the rounding mode.
            
             @return a string representation for this {@code MathContext} instance
        </member>
        <member name="T:biz.ritter.javapi.math.Division">
             Static library that provides all operations related with division and modular
             arithmetic to {@link BigInteger}. Some methods are provided in both mutable
             and immutable way. There are several variants provided listed below:
             
             <ul type="circle">
             <li> <b>Division</b>
             <ul type="circle">
             <li>{@link BigInteger} division and remainder by {@link BigInteger}.</li>
             <li>{@link BigInteger} division and remainder by {@code int}.</li>
             <li><i>gcd</i> between {@link BigInteger} numbers.</li>
             </ul>
             </li>
             <li> <b>Modular arithmetic </b>
             <ul type="circle">
             <li>Modular exponentiation between {@link BigInteger} numbers.</li>
             <li>Modular inverse of a {@link BigInteger} numbers.</li>
             </ul>
             </li>
            </ul>
        </member>
        <member name="M:biz.ritter.javapi.math.Division.divide(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32)">
            Divides the array 'a' by the array 'b' and gets the quotient and the
            remainder. Implements the Knuth's division algorithm. See D. Knuth, The
            Art of Computer Programming, vol. 2. Steps D1-D8 correspond the steps in
            the algorithm description.
            
            @param quot the quotient
            @param quotLength the quotient's length
            @param a the dividend
            @param aLength the dividend's length
            @param b the divisor
            @param bLength the divisor's length
            @return the remainder
        </member>
        <member name="M:biz.ritter.javapi.math.Division.divideArrayByInt(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Divides an array by an integer value. Implements the Knuth's division
            algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.
            
            @param dest the quotient
            @param src the dividend
            @param srcLength the length of the dividend
            @param divisor the divisor
            @return remainder
        </member>
        <member name="M:biz.ritter.javapi.math.Division.remainderArrayByInt(System.Int32[],System.Int32,System.Int32)">
            Divides an array by an integer value. Implements the Knuth's division
            algorithm. See D. Knuth, The Art of Computer Programming, vol. 2.
            
            @param src the dividend
            @param srcLength the length of the dividend
            @param divisor the divisor
            @return remainder
        </member>
        <member name="M:biz.ritter.javapi.math.Division.remainder(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Divides a <code>BigInteger</code> by a signed <code>int</code> and
            returns the remainder.
            
            @param dividend the BigInteger to be divided. Must be non-negative.
            @param divisor a signed int
            @return divide % divisor
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Division.divideLongByInt(System.Int64,System.Int32)" -->
        <member name="M:biz.ritter.javapi.math.Division.divideAndRemainderByInteger(biz.ritter.javapi.math.BigInteger,System.Int32,System.Int32)">
            Computes the quotient and the remainder after a division by an {@code int}
            number.
            
            @return an array of the form {@code [quotient, remainder]}.
        </member>
        <member name="M:biz.ritter.javapi.math.Division.multiplyAndSubtract(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            Multiplies an array by int and subtracts it from a subarray of another
            array.
            
            @param a the array to subtract from
            @param start the start element of the subarray of a
            @param b the array to be multiplied and subtracted
            @param bLen the length of b
            @param c the multiplier of b
            @return the carry element of subtraction
        </member>
        <member name="M:biz.ritter.javapi.math.Division.gcdBinary(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @param m a positive modulus
            Return the greatest common divisor of op1 and op2,
            
            @param op1
                       must be greater than zero
            @param op2
                       must be greater than zero
            @see BigInteger#gcd(BigInteger)
            @return {@code GCD(op1, op2)}
        </member>
        <member name="M:biz.ritter.javapi.math.Division.gcdBinary(System.Int64,System.Int64)">
            Performs the same as {@link #gcdBinary(BigInteger, BigInteger)}, but
            with numbers of 63 bits, represented in positives values of {@code long}
            type.
            
            @param op1
                       a positive number
            @param op2
                       a positive number
            @see #gcdBinary(BigInteger, BigInteger)
            @return <code>GCD(op1, op2)</code>
        </member>
        <member name="M:biz.ritter.javapi.math.Division.modInverseMontgomery(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Calculates a.modInverse(p) Based on: Savas, E; Koc, C "The Montgomery Modular
            Inverse - Revised"
        </member>
        <member name="M:biz.ritter.javapi.math.Division.calcN(biz.ritter.javapi.math.BigInteger)">
            Calculate the first digit of the inverse
        </member>
        <member name="M:biz.ritter.javapi.math.Division.modInverseHars(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Implements the "Shifting Euclidean modular inverse algorithm".
            "Laszlo Hars - Modular Inverse Algorithms Without Multiplications
            for Cryptographic Applications"
            
            @see BigInteger#modInverse(BigInteger)
            @param a
                       a positive number
            @param m
                       a positive modulus
        </member>
        <member name="M:biz.ritter.javapi.math.Division.oddModPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Performs modular exponentiation using the Montgomery Reduction. It
            requires that all parameters be positive and the modulus be odd. >
            
            @see BigInteger#modPow(BigInteger, BigInteger)
            @see #monPro(BigInteger, BigInteger, BigInteger, int)
            @see #slidingWindow(BigInteger, BigInteger, BigInteger, BigInteger,
                                 int)
            @see #squareAndMultiply(BigInteger, BigInteger, BigInteger, BigInteger,
                                 int)
        </member>
        <member name="M:biz.ritter.javapi.math.Division.evenModPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Performs modular exponentiation using the Montgomery Reduction. It
            requires that all parameters be positive and the modulus be even. Based
            <i>The square and multiply algorithm and the Montgomery Reduction C. K.
            Koc - Montgomery Reduction with Even Modulus</i>. The square and
            multiply algorithm and the Montgomery Reduction.
            
            @ar.org.fitc.ref "C. K. Koc - Montgomery Reduction with Even Modulus"
            @see BigInteger#modPow(BigInteger, BigInteger)
        </member>
        <member name="M:biz.ritter.javapi.math.Division.pow2ModPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,System.Int32)">
            It requires that all parameters be positive.
            
            @return {@code base<sup>exponent</sup> mod (2<sup>j</sup>)}.
            @see BigInteger#modPow(BigInteger, BigInteger)
        </member>
        <member name="M:biz.ritter.javapi.math.Division.monPro(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger,System.Int32)">
            Implements the Montgomery Product of two integers represented by
            {@code int} arrays. The arrays are supposed in <i>little
            endian</i> notation.
            
            @param a The first factor of the product.
            @param b The second factor of the product.
            @param modulus The modulus of the operations. Z<sub>modulus</sub>.
            @param n2 The digit modulus'[0].
            @ar.org.fitc.ref "C. K. Koc - Analyzing and Comparing Montgomery
                             Multiplication Algorithms"
            @see #modPowOdd(BigInteger, BigInteger, BigInteger)
        </member>
        <member name="M:biz.ritter.javapi.math.Division.finalSubtraction(System.Int32[],biz.ritter.javapi.math.BigInteger)">
            Performs the final reduction of the Montgomery algorithm.
            @see monPro(BigInteger, BigInteger, BigInteger, long)
            @see monSquare(BigInteger, BigInteger, long)
        </member>
        <member name="M:biz.ritter.javapi.math.Division.modPow2Inverse(biz.ritter.javapi.math.BigInteger,System.Int32)">
            @param x an odd positive number.
            @param n the exponent by which 2 is raised.
            @return {@code x<sup>-1</sup> (mod 2<sup>n</sup>)}.
        </member>
        <member name="M:biz.ritter.javapi.math.Division.inplaceModPow2(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Performs {@code x = x mod (2<sup>n</sup>)}.
            
            @param x a positive number, it will store the result.
            @param n a positive exponent of {@code 2}.
        </member>
        <member name="T:biz.ritter.javapi.io.ByteArrayOutputStream">
            A specialized {@link OutputStream} for class for writing content to an
            (internal) byte array. As bytes are written to this stream, the byte array
            may be expanded to hold more bytes. When the writing is considered to be
            finished, a copy of the byte array can be requested from the class.
            
            @see ByteArrayInputStream
        </member>
        <member name="F:biz.ritter.javapi.io.ByteArrayOutputStream.buf">
            The byte array containing the bytes written.
        </member>
        <member name="F:biz.ritter.javapi.io.ByteArrayOutputStream.count">
            The number of bytes written.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.#ctor">
            Constructs a new ByteArrayOutputStream with a default size of 32 bytes.
            If more than 32 bytes are written to this instance, the underlying byte
            array will expand.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.ByteArrayOutputStream.#ctor(System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.close">
            Closes this stream. This releases system resources used for this stream.
            
            @throws IOException
                        if an error occurs while attempting to close this stream.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.reset">
            Resets this stream to the beginning of the underlying byte array. All
            subsequent writes will overwrite any bytes previously stored in this
            stream.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.size">
            Returns the total number of bytes written to this stream so far.
            
            @return the number of bytes written to this stream.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.toByteArray">
            Returns the contents of this ByteArrayOutputStream as a byte array. Any
            changes made to the receiver after returning will not be reflected in the
            byte array returned to the caller.
            
            @return this stream's current contents as a byte array.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.ToString">
            Returns the contents of this ByteArrayOutputStream as a string. Any
            changes made to the receiver after returning will not be reflected in the
            string returned to the caller.
            
            @return this stream's current contents as a string.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.ByteArrayOutputStream.toString(System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.toString(System.String)">
            Returns the contents of this ByteArrayOutputStream as a string converted
            according to the encoding declared in {@code enc}.
            
            @param enc
                       a string representing the encoding to use when translating
                       this stream to a string.
            @return this stream's current contents as an encoded string.
            @throws UnsupportedEncodingException
                        if the provided encoding is not supported.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.ByteArrayOutputStream.write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.write(System.Int32)">
            Writes the specified byte {@code oneByte} to the OutputStream. Only the
            low order byte of {@code oneByte} is written.
            
            @param oneByte
                       the byte to be written.
        </member>
        <member name="M:biz.ritter.javapi.io.ByteArrayOutputStream.writeTo(biz.ritter.javapi.io.OutputStream)">
            Takes the contents of this stream and writes it to the output stream
            {@code out}.
            
            @param out
                       an OutputStream on which to write the contents of this stream.
            @throws IOException
                        if an error occurs while writing to {@code out}.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.lang.refj.SoftReference`1" -->
        <member name="T:biz.ritter.javapi.lang.refj.Reference`1">
             Provides an abstract class which describes behavior common to all reference
             objects. It is not possible to create immediate subclasses of
             {@code Reference} in addition to the ones provided by this package. It is
             also not desirable to do so, since references require very close cooperation
             with the system's garbage collector. The existing, specialized reference
             classes should be used instead.
            
             @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.#ctor">
            Constructs a new instance of this class.
            
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.clear">
            Makes the referent {@code null}. This does not force the reference
            object to be enqueued.
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.enqueue">
             Forces the reference object to be enqueued if it has been associated with
             a queue.
            
             @return {@code true} if this call has caused the {@code Reference} to
             become enqueued, or {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.get">
             Returns the referent of the reference object.
            
             @return the referent to which reference refers, or {@code null} if the
                     object has been cleared.
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.isEnqueued">
             Checks whether the reference object has been enqueued.
            
             @return {@code true} if the {@code Reference} has been enqueued, {@code
                     false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.initReference(System.Object)">
            Implement this method to support the provided subclass implementations.
            Initialize a newly created reference object. Associate the reference
            object with the referent.
            
            @param r the referent
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.initReference(System.Object,biz.ritter.javapi.lang.refj.ReferenceQueue{`0})">
            Implement this method to support the provided subclass implementations.
            Initialize a newly created reference object. Associate the reference
            object with the referent, and the specified ReferenceQueue.
            
            @param r the referent
            @param q the ReferenceQueue
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.enqueueImpl">
            Enqueue the reference object on the associated queue.
            
            @return boolean true if the Reference was successfully enqueued. false
                    otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.Reference`1.dequeue">
            Called when a Reference has been removed from its ReferenceQueue. Set the
            enqueued field to false.
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.SoftReference`1.#ctor(`0)">
             Constructs a new soft reference to the given referent. The newly created
             reference is not registered with any reference queue.
            
             @param r the referent to track
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.SoftReference`1.#ctor(`0,biz.ritter.javapi.lang.refj.ReferenceQueue{`0})">
             Constructs a new soft reference to the given referent. The newly created
             reference is registered with the given reference queue.
            
             @param r the referent to track
             @param q the queue to register to the reference object with. A null value
                      results in a weak reference that is not associated with any
                      queue.
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.SoftReference`1.get">
             Return the referent of the reference object.
            
             @return the referent to which reference refers, or {@code null} if the
                     referent has been cleared.
        </member>
        <member name="T:biz.ritter.javapi.lang.AssertionError">
             Thrown when an assertion has failed.
            
             @since 1.4
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor">
            Constructs a new {@code AssertionError} with no message.
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Object)">
            Constructs a new {@code AssertionError} with a message based on calling
            {@link String#valueOf(Object)} with the specified object. If the object
            is an instance of {@link Throwable}, then it also becomes the cause of
            this error.
            
            @param detailMessage
                       the object to be converted into the detail message and
                       optionally the cause.
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Boolean)">
            Constructs a new {@code AssertionError} with a message based on calling
            {@link String#valueOf(boolean)} with the specified boolean value.
            
            @param detailMessage
                       the value to be converted into the message.
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Char)">
            Constructs a new {@code AssertionError} with a message based on calling
            {@link String#valueOf(char)} with the specified character value.
            
            @param detailMessage
                       the value to be converted into the message.
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Int32)">
            Constructs a new {@code AssertionError} with a message based on calling
            {@link String#valueOf(int)} with the specified integer value.
            
            @param detailMessage
                       the value to be converted into the message.
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Int64)">
            Constructs a new {@code AssertionError} with a message based on calling
            {@link String#valueOf(long)} with the specified long value.
            
            @param detailMessage
                       the value to be converted into the message.
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Single)">
            Constructs a new {@code AssertionError} with a message based on calling
            {@link String#valueOf(float)} with the specified float value.
            
            @param detailMessage
                       the value to be converted into the message.
        </member>
        <member name="M:biz.ritter.javapi.lang.AssertionError.#ctor(System.Double)">
            Constructs a new {@code AssertionError} with a message based on calling
            {@link String#valueOf(double)} with the specified double value.
            
            @param detailMessage
                       the value to be converted into the message.
        </member>
        <member name="T:biz.ritter.javapi.io.DataInputStream">
            Wraps an existing {@link InputStream} and reads typed data from it.
            Typically, this stream has been written by a DataOutputStream. Types that can
            be read include byte, 16-bit short, 32-bit int, 32-bit float, 64-bit long,
            64-bit double, byte strings, and strings encoded in
            {@link DataInput modified UTF-8}.
            
            @see DataOutputStream
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.io.DataInput" -->
        <member name="M:biz.ritter.javapi.io.DataInput.readBoolean">
            Reads a boolean.
            
            @return the next boolean value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeBoolean(boolean)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readByte">
            Reads an 8-bit byte value.
            
            @return the next byte value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeByte(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readChar">
            Reads a 16-bit character value.
            
            @return the next char value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeChar(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readDouble">
            Reads a 64-bit double value.
            
            @return the next double value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeDouble(double)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readFloat">
            Reads a 32-bit float value.
            
            @return the next float value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeFloat(float)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readFully(System.Byte[])">
            Reads bytes into the byte array {@code buffer}. This method will block
            until {@code buffer.length} number of bytes have been read.
            
            @param buffer
                       the buffer to read bytes into.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#write(byte[])
            @see DataOutput#write(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readFully(System.Byte[],System.Int32,System.Int32)">
            Reads bytes and stores them in the byte array {@code buffer} starting at
            offset {@code offset}. This method blocks until {@code count} number of
            bytes have been read.
            
            @param buffer
                       the byte array in which to store the bytes read.
            @param offset
                       the initial position in {@code buffer} to store the bytes
                       read.
            @param count
                       the maximum number of bytes to store in {@code buffer}.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#write(byte[])
            @see DataOutput#write(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readInt">
            Reads a 32-bit integer value.
            
            @return the next int value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeInt(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readLine">
            Returns a string containing the next line of text available from this
            stream. A line is made of zero or more characters followed by {@code
            '\n'}, {@code '\r'}, {@code "\r\n"} or the end of the stream. The string
            does not include the newline sequence.
            
            @return the contents of the line or null if no characters have been read
                    before the end of the stream.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readLong">
            Reads a 64-bit long value.
            
            @return the next long value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeLong(long)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readShort">
            Reads a 16-bit short value.
            
            @return the next short value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeShort(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readUnsignedByte">
            Reads an unsigned 8-bit byte value and returns it as an int.
            
            @return the next unsigned byte value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeByte(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readUnsignedShort">
            Reads a 16-bit unsigned short value and returns it as an int.
            
            @return the next unsigned short value.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeShort(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.readUTF">
            Reads a string encoded with {@link DataInput modified UTF-8}.
            
            @return the next string encoded with {@link DataInput modified UTF-8}.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if an I/O error occurs while reading.
            @see DataOutput#writeUTF(java.lang.String)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInput.skipBytes(System.Int32)">
            Skips {@code count} number of bytes. This method will not throw an
            {@link EOFException} if the end of the input is reached before
            {@code count} bytes where skipped.
            
            @param count
                       the number of bytes to skip.
            @return the number of bytes actually skipped.
            @throws IOException
                        if a problem occurs during skipping.
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
            Constructs a new DataInputStream on the InputStream {@code in}. All
            reads are then filtered through this stream. Note that data read by this
            stream is not in a human readable format and was most likely created by a
            DataOutputStream.
            
            @param in
                       the source InputStream the filter reads from.
            @see DataOutputStream
            @see RandomAccessFile
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.read(System.Byte[])">
            Reads bytes from this stream into the byte array {@code buffer}. Returns
            the number of bytes that have been read.
            
            @param buffer
                       the buffer to read bytes into.
            @return the number of bytes that have been read or -1 if the end of the
                    stream has been reached.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#write(byte[])
            @see DataOutput#write(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.read(System.Byte[],System.Int32,System.Int32)">
            Reads at most {@code length} bytes from this stream and stores them in
            the byte array {@code buffer} starting at {@code offset}. Returns the
            number of bytes that have been read or -1 if no bytes have been read and
            the end of the stream has been reached.
            
            @param buffer
                       the byte array in which to store the bytes read.
            @param offset
                       the initial position in {@code buffer} to store the bytes
                       read from this stream.
            @param length
                       the maximum number of bytes to store in {@code buffer}.
            @return the number of bytes that have been read or -1 if the end of the
                    stream has been reached.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#write(byte[])
            @see DataOutput#write(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readBoolean">
            Reads a boolean from this stream.
            
            @return the next boolean value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before one byte
                        has been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeBoolean(boolean)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readByte">
            Reads an 8-bit byte value from this stream.
            
            @return the next byte value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before one byte
                        has been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeByte(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readToBuff(System.Int32)">
            Reads a 16-bit character value from this stream.
            
            @return the next char value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before two bytes
                        have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeChar(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readDouble">
            Reads a 64-bit double value from this stream.
            
            @return the next double value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before eight
                        bytes have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeDouble(double)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readFloat">
            Reads a 32-bit float value from this stream.
            
            @return the next float value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before four
                        bytes have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeFloat(float)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readFully(System.Byte[])">
            Reads bytes from this stream into the byte array {@code buffer}. This
            method will block until {@code buffer.length} number of bytes have been
            read.
            
            @param buffer
                       to read bytes into.
            @throws EOFException
                        if the end of the source stream is reached before enough
                        bytes have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#write(byte[])
            @see DataOutput#write(byte[], int, int)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.DataInputStream.readFully(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.DataInputStream.readInt">
            Reads a 32-bit integer value from this stream.
            
            @return the next int value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before four
                        bytes have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeInt(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readLine">
            Returns a string that contains the next line of text available from the
            source stream. A line is represented by zero or more characters followed
            by {@code '\n'}, {@code '\r'}, {@code "\r\n"} or the end of the stream.
            The string does not include the newline sequence.
            
            @return the contents of the line or {@code null} if no characters were
                    read before the end of the source stream has been reached.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @deprecated Use {@link BufferedReader}
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readLong">
            Reads a 64-bit long value from this stream.
            
            @return the next long value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before eight
                        bytes have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeLong(long)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readShort">
            Reads a 16-bit short value from this stream.
            
            @return the next short value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before two bytes
                        have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeShort(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUnsignedByte">
            Reads an unsigned 8-bit byte value from this stream and returns it as an
            int.
            
            @return the next unsigned byte value from the source stream.
            @throws EOFException
                        if the end of the filtered stream has been reached before one
                        byte has been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeByte(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUnsignedShort">
            Reads a 16-bit unsigned short value from this stream and returns it as an
            int.
            
            @return the next unsigned short value from the source stream.
            @throws EOFException
                        if the end of the filtered stream is reached before two bytes
                        have been read.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeShort(int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUTF">
            Reads an string encoded in {@link DataInput modified UTF-8} from this
            stream.
            
            @return the next {@link DataInput MUTF-8} encoded string read from the
                    source stream.
            @throws EOFException if the end of the input is reached before the read
                    request can be satisfied.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutput#writeUTF(java.lang.String)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.readUTF(biz.ritter.javapi.io.DataInput)">
            Reads a string encoded in {@link DataInput modified UTF-8} from the
            {@code DataInput} stream {@code in}.
            
            @param in
                       the input stream to read from.
            @return the next {@link DataInput MUTF-8} encoded string from the source
                    stream.
            @throws IOException
                        if a problem occurs while reading from this stream.
            @see DataOutputStream#writeUTF(java.lang.String)
        </member>
        <member name="M:biz.ritter.javapi.io.DataInputStream.skipBytes(System.Int32)">
             Skips {@code count} number of bytes in this stream. Subsequent {@code
             read()}s will not return these bytes unless {@code reset()} is used.
             
             This method will not throw an {@link EOFException} if the end of the
             input is reached before {@code count} bytes where skipped.
            
             @param count
                        the number of bytes to skip.
             @return the number of bytes actually skipped.
             @throws IOException
                         if a problem occurs during skipping.
             @see #mark(int)
             @see #reset()
        </member>
        <member name="T:biz.ritter.javapi.util.BitSet">
            The {@code BitSet} class implements a bit field. Each element in a
            {@code BitSet} can be on(1) or off(0). A {@code BitSet} is created with a
            given size and grows if this size is exceeded. Growth is always rounded to a
            64 bit boundary.
        </member>
        <member name="F:biz.ritter.javapi.util.BitSet.serialVersionUID">
            The {@code BitSet} class implements a bit field. Each element in a
            {@code BitSet} can be on(1) or off(0). A {@code BitSet} is created with a
            given size and grows if this size is exceeded. Growth is always rounded to a
            64 bit boundary.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.#ctor">
            Create a new {@code BitSet} with size equal to 64 bits.
            
            @see #clear(int)
            @see #set(int)
            @see #clear()
            @see #clear(int, int)
            @see #set(int, boolean)
            @see #set(int, int)
            @see #set(int, int, boolean)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.#ctor(System.Int32)">
            Create a new {@code BitSet} with size equal to nbits. If nbits is not a
            multiple of 64, then create a {@code BitSet} with size nbits rounded to
            the next closest multiple of 64.
            
            @param nbits
                       the size of the bit set.
            @throws NegativeArraySizeException
                        if {@code nbits} is negative.
            @see #clear(int)
            @see #set(int)
            @see #clear()
            @see #clear(int, int)
            @see #set(int, boolean)
            @see #set(int, int)
            @see #set(int, int, boolean)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.#ctor(System.Int64[],System.Boolean,System.Int32,System.Boolean)">
            Private constructor called from get(int, int) method
            
            @param bits
                       the size of the bit set
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.clone">
            Creates a copy of this {@code BitSet}.
            
            @return a copy of this {@code BitSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.Equals(System.Object)">
            Compares the argument to this {@code BitSet} and returns whether they are
            equal. The object must be an instance of {@code BitSet} with the same
            bits set.
            
            @param obj
                       the {@code BitSet} object to compare.
            @return a {@code boolean} indicating whether or not this {@code BitSet} and
                    {@code obj} are equal.
            @see #hashCode
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.growLength(System.Int32)">
            Increase the size of the internal array to accommodate {@code pos} bits.
            The new array max index will be a multiple of 64.
            
            @param len
                       the index the new array needs to be able to access.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.GetHashCode">
            Computes the hash code for this {@code BitSet}. If two {@code BitSet}s are equal
            the have to return the same result for {@code hashCode()}.
            
            @return the {@code int} representing the hash code for this bit
                    set.
            @see #equals
            @see java.util.Hashtable
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.get(System.Int32)">
            Retrieves the bit at index {@code pos}. Grows the {@code BitSet} if
            {@code pos > size}.
            
            @param pos
                       the index of the bit to be retrieved.
            @return {@code true} if the bit at {@code pos} is set,
                    {@code false} otherwise.
            @throws IndexOutOfBoundsException
                        if {@code pos} is negative.
            @see #clear(int)
            @see #set(int)
            @see #clear()
            @see #clear(int, int)
            @see #set(int, boolean)
            @see #set(int, int)
            @see #set(int, int, boolean)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.get(System.Int32,System.Int32)">
            Retrieves the bits starting from {@code pos1} to {@code pos2} and returns
            back a new bitset made of these bits. Grows the {@code BitSet} if
            {@code pos2 > size}.
            
            @param pos1
                       beginning position.
            @param pos2
                       ending position.
            @return new bitset of the range specified.
            @throws IndexOutOfBoundsException
                        if {@code pos1} or {@code pos2} is negative, or if
                        {@code pos2} is smaller than {@code pos1}.
            @see #get(int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32)">
            Sets the bit at index {@code pos} to 1. Grows the {@code BitSet} if
            {@code pos > size}.
            
            @param pos
                       the index of the bit to set.
            @throws IndexOutOfBoundsException
                        if {@code pos} is negative.
            @see #clear(int)
            @see #clear()
            @see #clear(int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32,System.Boolean)">
            Sets the bit at index {@code pos} to {@code val}. Grows the
            {@code BitSet} if {@code pos > size}.
            
            @param pos
                       the index of the bit to set.
            @param val
                       value to set the bit.
            @throws IndexOutOfBoundsException
                        if {@code pos} is negative.
            @see #set(int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32,System.Int32)">
            Sets the bits starting from {@code pos1} to {@code pos2}. Grows the
            {@code BitSet} if {@code pos2 > size}.
            
            @param pos1
                       beginning position.
            @param pos2
                       ending position.
            @throws IndexOutOfBoundsException
                        if {@code pos1} or {@code pos2} is negative, or if
                        {@code pos2} is smaller than {@code pos1}.
            @see #set(int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.set(System.Int32,System.Int32,System.Boolean)">
            Sets the bits starting from {@code pos1} to {@code pos2} to the given
            {@code val}. Grows the {@code BitSet} if {@code pos2 > size}.
            
            @param pos1
                       beginning position.
            @param pos2
                       ending position.
            @param val
                       value to set these bits.
            @throws IndexOutOfBoundsException
                        if {@code pos1} or {@code pos2} is negative, or if
                        {@code pos2} is smaller than {@code pos1}.
            @see #set(int,int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.clear">
            Clears all the bits in this {@code BitSet}.
            
            @see #clear(int)
            @see #clear(int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.clear(System.Int32)">
            Clears the bit at index {@code pos}. Grows the {@code BitSet} if
            {@code pos > size}.
            
            @param pos
                       the index of the bit to clear.
            @throws IndexOutOfBoundsException
                        if {@code pos} is negative.
            @see #clear(int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.clear(System.Int32,System.Int32)">
            Clears the bits starting from {@code pos1} to {@code pos2}. Grows the
            {@code BitSet} if {@code pos2 > size}.
            
            @param pos1
                       beginning position.
            @param pos2
                       ending position.
            @throws IndexOutOfBoundsException
                        if {@code pos1} or {@code pos2} is negative, or if
                        {@code pos2} is smaller than {@code pos1}.
            @see #clear(int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.flip(System.Int32)">
            Flips the bit at index {@code pos}. Grows the {@code BitSet} if
            {@code pos > size}.
            
            @param pos
                       the index of the bit to flip.
            @throws IndexOutOfBoundsException
                        if {@code pos} is negative.
            @see #flip(int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.flip(System.Int32,System.Int32)">
            Flips the bits starting from {@code pos1} to {@code pos2}. Grows the
            {@code BitSet} if {@code pos2 > size}.
            
            @param pos1
                       beginning position.
            @param pos2
                       ending position.
            @throws IndexOutOfBoundsException
                        if {@code pos1} or {@code pos2} is negative, or if
                        {@code pos2} is smaller than {@code pos1}.
            @see #flip(int)
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.intersects(biz.ritter.javapi.util.BitSet)">
            Checks if these two {@code BitSet}s have at least one bit set to true in the same
            position.
            
            @param bs
                       {@code BitSet} used to calculate the intersection.
            @return {@code true} if bs intersects with this {@code BitSet},
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.and(biz.ritter.javapi.util.BitSet)">
            Performs the logical AND of this {@code BitSet} with another
            {@code BitSet}. The values of this {@code BitSet} are changed accordingly.
            
            @param bs
                       {@code BitSet} to AND with.
            @see #or
            @see #xor
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.andNot(biz.ritter.javapi.util.BitSet)">
            Clears all bits in the receiver which are also set in the parameter
            {@code BitSet}. The values of this {@code BitSet} are changed accordingly.
            
            @param bs
                       {@code BitSet} to ANDNOT with.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.or(biz.ritter.javapi.util.BitSet)">
             Performs the logical OR of this {@code BitSet} with another {@code BitSet}.
             The values of this {@code BitSet} are changed accordingly.
            
             @param bs
                        {@code BitSet} to OR with.
             @see #xor
             @see #and
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.xor(biz.ritter.javapi.util.BitSet)">
             Performs the logical XOR of this {@code BitSet} with another {@code BitSet}.
             The values of this {@code BitSet} are changed accordingly.
            
             @param bs
                        {@code BitSet} to XOR with.
             @see #or
             @see #and
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.size">
            Returns the number of bits this {@code BitSet} has.
            
            @return the number of bits contained in this {@code BitSet}.
            @see #length
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.length">
            Returns the number of bits up to and including the highest bit set.
            
            @return the length of the {@code BitSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.ToString">
            Returns a string containing a concise, human-readable description of the
            receiver.
            
            @return a comma delimited list of the indices of all bits that are set.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.nextSetBit(System.Int32)">
            Returns the position of the first bit that is {@code true} on or after {@code pos}.
            
            @param pos
                       the starting position (inclusive).
            @return -1 if there is no bits that are set to {@code true} on or after {@code pos}.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.nextClearBit(System.Int32)">
            Returns the position of the first bit that is {@code false} on or after {@code pos}.
            
            @param pos
                       the starting position (inclusive).
            @return the position of the next bit set to {@code false}, even if it is further
                    than this {@code BitSet}'s size.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.isEmpty">
            Returns true if all the bits in this {@code BitSet} are set to false.
            
            @return {@code true} if the {@code BitSet} is empty,
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.BitSet.cardinality">
            Returns the number of bits that are {@code true} in this {@code BitSet}.
            
            @return the number of {@code true} bits in the set.
        </member>
        <member name="T:biz.ritter.javapi.lang.Void">
             Placeholder class for the Java keyword {@code void}.
            
             @since 1.1
        </member>
        <member name="F:biz.ritter.javapi.lang.Void.TYPE">
            The {@link Class} object that represents the primitive type {@code void}.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.Queue`1" -->
        <member name="M:biz.ritter.javapi.util.Queue`1.offer(`0)">
            Inserts the specified element into the queue provided that the condition
            allows such an operation. The method is generally preferable to
            {@link Collection#add}, since the latter might throw an exception if the
            operation fails.
            
            @param o
                       the specified element to insert into the queue.
            @return {@code true} if the operation succeeds and {@code false} if it
                    fails.
        </member>
        <member name="M:biz.ritter.javapi.util.Queue`1.poll">
            Gets and removes the element at the head of the queue, or returns {@code
            null} if there is no element in the queue.
            
            @return the element at the head of the queue or {@code null} if there is
                    no element in the queue.
        </member>
        <member name="M:biz.ritter.javapi.util.Queue`1.remove">
            Gets and removes the element at the head of the queue. Throws a
            NoSuchElementException if there is no element in the queue.
            
            @return the element at the head of the queue.
            @throws NoSuchElementException
                        if there is no element in the queue.
        </member>
        <member name="M:biz.ritter.javapi.util.Queue`1.peek">
            Gets but does not remove the element at the head of the queue.
            
            @return the element at the head of the queue or {@code null} if there is
                    no element in the queue.
        </member>
        <member name="M:biz.ritter.javapi.util.Queue`1.element">
            Gets but does not remove the element at the head of the queue. Throws a
            {@code NoSuchElementException} if there is no element in the queue.
            
            @return the element at the head of the queue.
            @throws NoSuchElementException
                        if there is no element in the queue.
        </member>
        <member name="T:biz.ritter.javapi.util.jar.Attributes">
            The {@code Attributes} class is used to store values for manifest entries.
            Attribute keys are generally instances of {@code Attributes.Name}. Values
            associated with attribute keys are of type {@code String}.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.Attributes.map">
            The {@code Attributes} as name/value pairs. Maps the attribute names (as
            {@link Attributes.Name}) of a JAR file manifest to arbitrary values. The
            attribute names thus are obtained from the {@link Manifest} for
            convenience.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.#ctor">
            Constructs an {@code Attributes} instance.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.#ctor(biz.ritter.javapi.util.jar.Attributes)">
             Constructs an {@code Attributes} instance obtaining keys and values from
             the parameter {@code attrib}.
            
             @param attrib
                        The attributes to obtain entries from.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.#ctor(System.Int32)">
             Constructs an {@code Attributes} instance with initial capacity of size
             {@code size}.
            
             @param size
                        Initial size of this {@code Attributes} instance.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.clear">
            Removes all key/value pairs from this {@code Attributes}.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.containsKey(System.Object)">
             Determines whether this {@code Attributes} contains the specified key.
            
             @param key
                        The key to search for.
             @return {@code true} if the key is found, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.containsValue(System.Object)">
             Determines whether this {@code Attributes} contains the specified value.
            
             @param value
                        the value to search for.
             @return {@code true} if the value is found, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.entrySet">
             Returns a set containing map entries for each of the key/value pair
             contained in this {@code Attributes}.
            
             @return a set of Map.Entry's
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.get(System.Object)">
             Returns the value associated with the parameter key.
            
             @param key
                        the key to search for.
             @return Object associated with key, or {@code null} if key does not
                     exist.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.isEmpty">
             Determines whether this {@code Attributes} contains any keys.
            
             @return {@code true} if one or more keys exist, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.keySet">
             Returns a {@code Set} containing all the keys found in this {@code
             Attributes}.
            
             @return a {@code Set} of all keys.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.put(System.Object,System.Object)">
             Stores key/value pairs in this {@code Attributes}.
            
             @param key
                        the key to associate with value.
             @param value
                        the value to store in this {@code Attributes}.
             @return the value being stored.
             @exception ClassCastException
                            when key is not an {@code Attributes.Name} or value is not
                            a {@code String}.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.putAll(biz.ritter.javapi.util.Map{System.Object,System.Object})">
             Stores all the key/value pairs in the argument in this {@code
             Attributes}.
            
             @param attrib
                        the associations to store (must be of type {@code
                        Attributes}).
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.remove(System.Object)">
             Deletes the key/value pair with key {@code key} from this {@code
             Attributes}.
            
             @param key
                        the key to remove.
             @return the values associated with the removed key, {@code null} if not
                     present.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.size">
             Returns the number of key/value pairs associated with this {@code
             Attributes}.
            
             @return the size of this {@code Attributes}.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.values">
             Returns a collection of all the values present in this {@code
             Attributes}.
            
             @return a collection of all values present.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.GetHashCode">
             Returns the hash code of this {@code Attributes}.
            
             @return the hash code of this object.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.Equals(System.Object)">
             Determines if this {@code Attributes} and the parameter {@code
             Attributes} are equal. Two {@code Attributes} instances are equal if they
             contain the same keys and values.
            
             @param obj
                        the object with which this {@code Attributes} is compared.
             @return {@code true} if the {@code Attributes} are equal, {@code false}
                     otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.getValue(biz.ritter.javapi.util.jar.AttributesNS.Name)">
             Returns the value associated with the parameter {@code Attributes.Name}
             key.
            
             @param name
                        the key to obtain the value for.
             @return the {@code String} associated with name, or {@code null} if name
                     is not a valid key.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.getValue(System.String)">
             Returns the string associated with the parameter name.
            
             @param name
                        the key to obtain the value for.
             @return the string associated with name, or {@code null} if name is not a
                     valid key.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.Attributes.putValue(System.String,System.String)">
             Stores the value {@code val} associated with the key {@code name} in this
             {@code Attributes}.
            
             @param name
                        the key to store.
             @param val
                        the value to store in this {@code Attributes}.
             @return the value being stored.
        </member>
        <member name="T:biz.ritter.javapi.util.jar.AttributesNS.Name">
             The name part of the name/value pairs constituting an attribute as
             defined by the specification of the JAR manifest. May be composed of the
             following ASCII signs as defined in the EBNF below:
            
             <pre>
             name       = alphanum *headerchar
             headerchar = alphanum | - | _
             alphanum   = {A-Z} | {a-z} | {0-9}
             </pre>
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.CLASS_PATH">
            The class path (a main attribute).
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.MANIFEST_VERSION">
            The version of the manifest file (a main attribute).
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.MAIN_CLASS">
            The main class's name (for stand-alone applications).
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SIGNATURE_VERSION">
            Defines the signature version of the JAR file.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.CONTENT_TYPE">
            The {@code Content-Type} manifest attribute.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SEALED">
            The {@code Sealed} manifest attribute which may have the value
            {@code true} for sealed archives.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_TITLE">
            The {@code Implementation-Title} attribute whose value is a string
            that defines the title of the extension implementation.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_VERSION">
            The {@code Implementation-Version} attribute defining the version of
            the extension implementation.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_VENDOR">
            The {@code Implementation-Vendor} attribute defining the organization
            that maintains the extension implementation.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SPECIFICATION_TITLE">
            The {@code Specification-Title} attribute defining the title of the
            extension specification.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SPECIFICATION_VERSION">
            The {@code Specification-Version} attribute defining the version of
            the extension specification.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.SPECIFICATION_VENDOR">
            The {@code Specification-Vendor} attribute defining the organization
            that maintains the extension specification.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.EXTENSION_LIST">
            The {@code Extension-List} attribute defining the extensions that are
            needed by the applet.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.EXTENSION_NAME">
            The {@code Extension-Name} attribute which defines the unique name of
            the extension.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.EXTENSION_INSTALLATION">
            The {@code Extension-Installation} attribute.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_VENDOR_ID">
            The {@code Implementation-Vendor-Id} attribute specifies the vendor
            of an extension implementation if the applet requires an
            implementation from a specific vendor.
        </member>
        <member name="F:biz.ritter.javapi.util.jar.AttributesNS.Name.IMPLEMENTATION_URL">
            The {@code Implementation-URL} attribute specifying a URL that can be
            used to obtain the most recent version of the extension if the
            required version is not already installed.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.#ctor(System.String)">
             A String which must satisfy the following EBNF grammar to specify an
             additional attribute:
            
             <pre>
             name       = alphanum *headerchar
             headerchar = alphanum | - | _
             alphanum   = {A-Z} | {a-z} | {0-9}
             </pre>
            
             @param s
                        The Attribute string.
             @exception IllegalArgumentException
                            if the string does not satisfy the EBNF grammar.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.#ctor(System.Byte[])">
            A private constructor for a trusted attribute name.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.ToString">
             Returns this attribute name.
            
             @return the attribute name.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.Equals(System.Object)">
             Returns whether the argument provided is the same as the attribute
             name.
            
             @return if the attribute names correspond.
             @param object
                        An attribute name to be compared with this name.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.AttributesNS.Name.GetHashCode">
             Computes a hash code of the name.
            
             @return the hash value computed from the name.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.Deque`1" -->
        <member name="M:biz.ritter.javapi.util.Deque`1.addFirst(`0)">
            Inserts an element at the head of this deque if it dose not violate size
            limit immediately. It is better to use offerFirst(E) if a deque is
            size-limited.
            
            @param e
                       the element
            @throws IllegalStateException
                        if it can not add now due to size limit
            @throws ClassCastException
                        if the class of element can not be added into this deque
            @throws NullPointerException
                        if the element is null and the deque can not contain null
                        element
            @throws IllegalArgumentException
                        if the element can not be added due to some property.
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.addLast(`0)">
            Inserts an element at the tail of this deque if it dose not violate size
            limit immediately. It is better to use offerLast(E) if a deque is
            size-limited.
            
            @param e
                       the element
            @throws IllegalStateException
                        if it can not add now due to size limit
            @throws ClassCastException
                        if the class of element can not be added into this deque
            @throws NullPointerException
                        if the element is null and the deque can not contain null
                        element
            @throws IllegalArgumentException
                        if the element can not be added due to some property.
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.offerFirst(`0)">
            Inserts an element at the head of this deque unless it would violate size
            limit. It is better than the addFirst(E) method in a size-limited deque,
            because the latter one may fail to add the element only by throwing an
            exception.
            
            @param e
                       the element
            @return true if the operation succeeds or false if it fails.
            @throws ClassCastException
                        if the class of element can not be added into this deque
            @throws NullPointerException
                        if the element is null and the deque can not contain null
                        element
            @throws IllegalArgumentException
                        if the element can not be added due to some property.
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.offerLast(`0)">
            Inserts an element at the tail of this deque unless it would violate size
            limit. It is better than the addLast(E) method in a size-limited deque,
            because the latter one may fail to add the element only by throwing an
            exception.
            
            @param e
                       the element
            @return true if the operation succeeds or false if it fails
            @throws ClassCastException
                        if the class of element can not be added into this deque
            @throws NullPointerException
                        if the element is null and the deque can not contain null
                        element
            @throws IllegalArgumentException
                        if the element can not be added due to some property
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeFirst">
            Gets and removes the head element of this deque. This method throws an
            exception if the deque is empty.
            
            @return the head element
            @throws NoSuchElementException
                        if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeLast">
            Gets and removes the tail element of this deque. This method throws an
            exception if the deque is empty.
            
            @return the tail element
            @throws NoSuchElementException
                        if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.pollFirst">
            Gets and removes the head element of this deque. This method returns null
            if the deque is empty.
            
            @return the head element or null if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.pollLast">
            Gets and removes the tail element of this deque. This method returns null
            if the deque is empty.
            
            @return the tail element or null if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.getFirst">
            Gets but not removes the head element of this deque. This method throws
            an exception if the deque is empty.
            
            @return the head element
            @throws NoSuchElementException
                        if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.getLast">
            Gets but not removes the tail element of this deque. This method throws
            an exception if the deque is empty.
            
            @return the tail element
            @throws NoSuchElementException
                        if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.peekFirst">
            Gets but not removes the head element of this deque. This method returns
            null if the deque is empty.
            
            @return the head element or null if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.peekLast">
            Gets but not removes the tail element of this deque. This method returns
            null if the deque is empty.
            
            @return the tail element or null if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeFirstOccurrence(System.Object)">
            Removes the first equivalent element of the specified object. If the
            deque does not contain the element, it is unchanged and returns false.
            
            @param o
                       the element to be removed
            @return true if the operation succeeds or false if the deque does not
                    contain the element.
            @throws ClassCastException
                        if the class of the element is incompatible with the deque
            @throws NullPointerException
                        if the element is null and the deque can not contain null
                        element
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.removeLastOccurrence(System.Object)">
            Removes the last equivalent element of the specified object. If the deque
            does not contain the element, it is unchanged and returns false.
            
            @param o
                       the element to be removed
            @return true if the operation succeeds or false if the deque does not
                    contain the element.
            @throws ClassCastException
                        if the class of the element is incompatible with the deque
            @throws NullPointerException
                        if the element is null and the deque can not contain null
                        element
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.push(`0)">
            Pushes the element to the deque(at the head of the deque), just same as
            addFirst(E).
            
            @param e
                       the element
            @throws IllegalStateException
                        if it can not add now due to size limit
            @throws ClassCastException
                        if the class of element can not be added into this deque
            @throws NullPointerException
                        if the element is null and the deque can not contain null
                        element
            @throws IllegalArgumentException
                        if the element can not be added due to some property.
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.pop">
            Pops the head element of the deque, just same as removeFirst().
            
            @return the head element
            @throws NoSuchElementException
                        if the deque is empty
        </member>
        <member name="M:biz.ritter.javapi.util.Deque`1.descendingIterator">
            Returns the iterator in reverse order, from tail to head.
            
            @return the iterator in reverse order
        </member>
        <member name="M:biz.ritter.javapi.net.Socket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Is used from ServerSocket to accept clients.
            </summary>
            <param name="newDelegateInstance">new C# Socket instance</param>
        </member>
        <member name="T:biz.ritter.javapi.net.BindException">
            A {@code BindException} is thrown when a process cannot bind a local
            address/port, either because it is already bound or reserved by the OS.
        </member>
        <member name="T:biz.ritter.javapi.net.SocketException">
            This {@code SocketException} may be thrown during socket creation or setting
            options, and is the superclass of all other socket related exceptions.
        </member>
        <member name="M:biz.ritter.javapi.net.SocketException.#ctor">
            Constructs a new {@code SocketException} instance with its walkback
            filled in.
        </member>
        <member name="M:biz.ritter.javapi.net.SocketException.#ctor(System.String)">
            Constructs a new {@code SocketException} instance with its walkback and
            message filled in.
            
            @param detailMessage
                       the detail message of this exception.
        </member>
        <member name="M:biz.ritter.javapi.net.BindException.#ctor">
            Constructs a new instance with its walkback filled in.
        </member>
        <member name="M:biz.ritter.javapi.net.BindException.#ctor(System.String)">
            Constructs a new instance with its walkback and message filled in.
            
            @param detailMessage
                       detail message of the exception.
        </member>
        <member name="F:biz.ritter.develop.ReleaseNote.jVersion">
            <summary>
            Versionsnummer
            </summary>
        </member>
        <member name="F:biz.ritter.develop.ReleaseNote.port">
            <summary>
            Umfang der bereits durchgeführten Portierung in %
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.security.PublicKey">
            {@code PublicKey} is the common interface for public keys.
            
            @see PrivateKey
        </member>
        <member name="T:biz.ritter.javapi.security.Key">
            {@code Key} is the common interface for all keys.
            
            @see PublicKey
            @see PrivateKey
        </member>
        <member name="M:biz.ritter.javapi.security.Key.getAlgorithm">
            Returns the name of the algorithm of this key. If the algorithm is
            unknown, {@code null} is returned.
            
            @return the name of the algorithm of this key or {@code null} if the
                    algorithm is unknown.
        </member>
        <member name="M:biz.ritter.javapi.security.Key.getFormat">
            Returns the name of the format used to encode this key, or {@code null}
            if it can not be encoded.
            
            @return the name of the format used to encode this key, or {@code null}
                    if it can not be encoded.
        </member>
        <member name="M:biz.ritter.javapi.security.Key.getEncoded">
            Returns the encoded form of this key, or {@code null} if encoding is not
            supported by this key.
            
            @return the encoded form of this key, or {@code null} if encoding is not
                    supported by this key.
        </member>
        <member name="T:biz.ritter.javapi.math.Multiplication">
            Static library that provides all multiplication of {@link BigInteger} methods.
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.#ctor">
            Just to denote that this class can't be instantiated. 
        </member>
        <member name="F:biz.ritter.javapi.math.Multiplication.whenUseKaratsuba">
            Break point in digits (number of {@code int} elements)
            between Karatsuba and Pencil and Paper multiply.
        </member>
        <member name="F:biz.ritter.javapi.math.Multiplication.tenPows">
            An array with powers of ten that fit in the type {@code int}.
            ({@code 10^0,10^1,...,10^9})
        </member>
        <member name="F:biz.ritter.javapi.math.Multiplication.fivePows">
            An array with powers of five that fit in the type {@code int}.
            ({@code 5^0,5^1,...,5^13})
        </member>
        <member name="F:biz.ritter.javapi.math.Multiplication.bigTenPows">
            An array with the first powers of ten in {@code BigInteger} version.
            ({@code 10^0,10^1,...,10^31})
        </member>
        <member name="F:biz.ritter.javapi.math.Multiplication.bigFivePows">
            An array with the first powers of five in {@code BigInteger} version.
            ({@code 5^0,5^1,...,5^31})
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiply(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            Performs a multiplication of two BigInteger and hides the algorithm used.
            @see BigInteger#multiply(BigInteger)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Multiplication.karatsuba(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Multiplication.multiplyPAP(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByInt(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Multiplies an array of integers by an integer value
            and saves the result in {@code res}.
            @param a the array of integers
            @param aSize the number of elements of intArray to be multiplied
            @param factor the multiplier
            @return the top digit of production
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByInt(System.Int32[],System.Int32,System.Int32)">
            Multiplies an array of integers by an integer value.
            @param a the array of integers
            @param aSize the number of elements of intArray to be multiplied
            @param factor the multiplier
            @return the top digit of production
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByPositiveInt(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Multiplies a number by a positive integer.
            @param val an arbitrary {@code BigInteger}
            @param factor a positive {@code int} number
            @return {@code val * factor}
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.square(System.Int32[],System.Int32,System.Int32[])">
            Performs a<sup>2</sup>
            @param a The number to square.
            @param aLen The length of the number to square.
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByTenPow(biz.ritter.javapi.math.BigInteger,System.Int64)">
            Multiplies a number by a power of ten.
            This method is used in {@code BigDecimal} class.
            @param val the number to be multiplied
            @param exp a positive {@code long} exponent
            @return {@code val * 10<sup>exp</sup>}
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.powerOf10(System.Int64)">
            It calculates a power of ten, which exponent could be out of 32-bit range.
            Note that internally this method will be used in the worst case with
            an exponent equals to: {@code Integer.MAX_VALUE - Integer.MIN_VALUE}.
            @param exp the exponent of power of ten, it must be positive.
            @return a {@code BigInteger} with value {@code 10<sup>exp</sup>}.
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.multiplyByFivePow(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Multiplies a number by a power of five.
            This method is used in {@code BigDecimal} class.
            @param val the number to be multiplied
            @param exp a positive {@code int} exponent
            @return {@code val * 5<sup>exp</sup>}
        </member>
        <member name="M:biz.ritter.javapi.math.Multiplication.unsignedMultAddAdd(System.Int32,System.Int32,System.Int32,System.Int32)">
            Computes the value unsigned ((uint)a*(uint)b + (uint)c + (uint)d). This
            method could improve the readability and performance of the code.
            
            @param a
                       parameter 1
            @param b
                       parameter 2
            @param c
                       parameter 3
            @param d
                       parameter 4
            @return value of expression
        </member>
        <member name="T:biz.ritter.javapi.lang.NumberFormatException">
            Thrown when an invalid value is passed to a string-to-number conversion
            method.
        </member>
        <member name="M:biz.ritter.javapi.lang.NumberFormatException.#ctor">
            Constructs a new {@code NumberFormatException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.NumberFormatException.#ctor(System.String)">
            Constructs a new {@code NumberFormatException} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.lang.ArithmeticException">
            Thrown when the an invalid arithmetic operation is attempted.
        </member>
        <member name="M:biz.ritter.javapi.lang.ArithmeticException.#ctor">
            Constructs a new {@code ArithmeticException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.ArithmeticException.#ctor(System.String)">
             Constructs a new {@code ArithmeticException} with the current stack trace
             and the specified detail message.
            
             @param detailMessage
                        the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.io.InterruptedIOException">
            Signals that a blocking I/O operation has been interrupted. The number of
            bytes that were transferred successfully before the interruption took place
            is stored in a field of the exception.
        </member>
        <member name="F:biz.ritter.javapi.io.InterruptedIOException.bytesTransferred">
            The number of bytes transferred before the I/O interrupt occurred.
        </member>
        <member name="M:biz.ritter.javapi.io.InterruptedIOException.#ctor">
            Constructs a new {@code InterruptedIOException} with its stack trace
            filled in.
        </member>
        <member name="M:biz.ritter.javapi.io.InterruptedIOException.#ctor(System.String)">
            Constructs a new {@code InterruptedIOException} with its stack trace and
            detail message filled in.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.ConsoleErrorPrintStream.println(System.String)">
            <summary>
            Override the PrintStream implementation with Console specific implementation
            </summary>
            <param name="output"></param>
        </member>
        <member name="T:biz.ritter.javapi.text.AttributedCharacterIterator">
            Extends the
            {@link CharacterIterator} interface, adding support for iterating over
            attributes and not only characters. An
            {@code AttributedCharacterIterator} also allows the user to find runs and
            their limits. Runs are defined as ranges of characters that all have the same
            attributes with the same values.
        </member>
        <member name="T:biz.ritter.javapi.text.CharacterIterator">
            <summary>
             An interface for the bidirectional iteration over a group of characters. The
             iteration starts at the begin index in the group of characters and continues
             to one index before the end index.
             <strong>Note: DONE field is moved to </strong>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.current">
            Returns the character at the current index.
            
            @return the current character, or {@code DONE} if the current index is
                    past the beginning or end of the sequence.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.first">
            Sets the current position to the begin index and returns the character at
            the new position.
            
            @return the character at the begin index.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.getBeginIndex">
            Returns the begin index.
            
            @return the index of the first character of the iteration.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.getEndIndex">
            Returns the end index.
            
            @return the index one past the last character of the iteration.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.getIndex">
            Returns the current index.
            
            @return the current index.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.last">
            Sets the current position to the end index - 1 and returns the character
            at the new position.
            
            @return the character before the end index.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.next">
            Increments the current index and returns the character at the new index.
            
            @return the character at the next index, or {@code DONE} if the next
                    index would be past the end.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.previous">
            Decrements the current index and returns the character at the new index.
            
            @return the character at the previous index, or {@code DONE} if the
                    previous index would be past the beginning.
        </member>
        <member name="M:biz.ritter.javapi.text.CharacterIterator.setIndex(System.Int32)">
            Sets the current index to a new position and returns the character at the
            new index.
            
            @param location
                       the new index that this character iterator is set to.
            @return the character at the new index, or {@code DONE} if the index is
                    past the end.
            @throws IllegalArgumentException
                    if {@code location} is less than the begin index or greater than
                    the end index.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getAllAttributeKeys">
             Returns a set of attributes present in the {@code
             AttributedCharacterIterator}. An empty set is returned if no attributes
             were defined.
            
             @return a set of attribute keys; may be empty.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getAttribute(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute)">
             Returns the value stored in the attribute for the current character. If
             the attribute was not defined then {@code null} is returned.
            
             @param attribute the attribute for which the value should be returned.
             @return the value of the requested attribute for the current character or
                     {@code null} if it was not defined.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getAttributes">
             Returns a map of all attributes of the current character. If no
             attributes were defined for the current character then an empty map is
             returned.
            
             @return a map of all attributes for the current character or an empty
                     map.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunLimit">
             Returns the index of the last character in the run having the same
             attributes as the current character.
            
             @return the index of the last character of the current run.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunLimit(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute)">
             Returns the index of the last character in the run that has the same
             attribute value for the given attribute as the current character.
            
             @param attribute
                        the attribute which the run is based on.
             @return the index of the last character of the current run.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunLimit(biz.ritter.javapi.util.Set{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute})">
             Returns the index of the last character in the run that has the same
             attribute values for the attributes in the set as the current character.
            
             @param attributes
                        the set of attributes which the run is based on.
             @return the index of the last character of the current run.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunStart">
             Returns the index of the first character in the run that has the same
             attributes as the current character.
            
             @return the index of the last character of the current run.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunStart(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute)">
             Returns the index of the first character in the run that has the same
             attribute value for the given attribute as the current character.
            
             @param attribute
                        the attribute which the run is based on.
             @return the index of the last character of the current run.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedCharacterIterator.getRunStart(biz.ritter.javapi.util.Set{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute})">
             Returns the index of the first character in the run that has the same
             attribute values for the attributes in the set as the current character.
            
             @param attributes
                        the set of attributes which the run is based on.
             @return the index of the last character of the current run.
        </member>
        <member name="T:biz.ritter.javapi.util.MissingFormatArgumentException">
            A {@code MissingFormatArgumentException} will be thrown if there is no
            corresponding argument with the specified conversion or an argument index
            that refers to a missing argument.
            
            @see java.lang.RuntimeException
        </member>
        <member name="T:biz.ritter.javapi.util.IllegalFormatException">
            An {@code IllegalFormatException} is thrown when a format string that
            contains either an illegal syntax or format specifier is transferred as a
            parameter. Only subclasses inheriting explicitly from this exception are
            allowed to be instantiated.
            
            @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.MissingFormatArgumentException.#ctor(System.String)">
            Constructs a new {@code MissingFormatArgumentException} with the
            specified conversion that lacks the argument.
            
            @param s
                      the specified conversion that lacks the argument.
        </member>
        <member name="M:biz.ritter.javapi.util.MissingFormatArgumentException.getFormatSpecifier">
            Returns the conversion associated with the exception.
            
            @return the conversion associated with the exception.
        </member>
        <member name="M:biz.ritter.javapi.util.MissingFormatArgumentException.getMessage">
            Returns the message of the exception.
            
            @return the message of the exception.
        </member>
        <member name="T:biz.ritter.javapi.util.zip.ZipException">
             This runtime exception is thrown by {@code ZipFile} and {@code
             ZipInputStream} when the file or stream is not a valid ZIP file.
            
             @see ZipFile
             @see ZipInputStream
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipException.#ctor">
            Constructs a new {@code ZipException} instance.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipException.#ctor(System.String)">
             Constructs a new {@code ZipException} instance with the specified
             message.
            
             @param detailMessage
                        the detail message for the exception.
        </member>
        <member name="M:biz.ritter.javapi.util.Properties.#ctor(System.Collections.IDictionary)">
            <summary>
            Helpermethod for easier .net implementation
            </summary>
            <param name="defaultJ"></param>
        </member>
        <member name="T:biz.ritter.javapi.util.Enumeration`1">
            An Enumeration is used to sequence over a collection of objects.
            <p>
            Preferably an {@link Iterator} should be used. {@code Iterator} replaces the
            enumeration interface and adds a way to remove elements from a collection.
            </p>
            @see Hashtable
            @see Properties
            @see Vector
            @version 1.0
        </member>
        <member name="M:biz.ritter.javapi.util.Enumeration`1.hasMoreElements">
            Returns whether this {@code Enumeration} has more elements.
            
            @return {@code true} if there are more elements, {@code false} otherwise.
            @see #nextElement
        </member>
        <member name="M:biz.ritter.javapi.util.Enumeration`1.nextElement">
            Returns the next element in this {@code Enumeration}.
            
            @return the next element..
            @throws NoSuchElementException
                        if there are no more elements.
            @see #hasMoreElements
        </member>
        <member name="M:biz.ritter.javapi.util.IAC_PropertyNameEnumeration.nextElement">
            Returns the next element in this {@code Enumeration}.
            
            @return the next element..
            @throws NoSuchElementException
                        if there are no more elements.
            @see #hasMoreElements
        </member>
        <member name="F:biz.ritter.javapi.lang.SystemJ.outJ">
            <see cref="!:java.lang.System.out"/>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.DeflaterInputStream">
            An inputstream filter to compress data by the compressing format of Deflate.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterInputStream.def">
            The Deflater used by this DeflaterInputStream
        </member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterInputStream.buf">
            The internal input data buffer used by this DeflaterInputStream.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
            Constructs a DeflaterInputStream with the default Deflater and internal
            input buffer length.
            
            @param in
                       the InputStream that the DeflaterInputStream reads data from.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Deflater)">
            Constructs a DeflaterInputStream with a specified Deflater and the
            default internal input buffer length.
            
            @param in
                       the InputStream that the DeflaterInputStream reads data from.
            @param defl
                       an specifed Deflater used to compress data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Deflater,System.Int32)">
            Constructs a DeflaterInputStream with a specified Deflater and input
            buffer length.
            
            @param in
                       the InputStream that the DeflaterInputStream reads data from.
            @param defl
                       a specifed Deflater used to compress data.
            @param bufLen
                       the buffer length of the internal input data buffer.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.close">
            Closes the underlying input stream and discards any remaining uncompressed
            data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.read">
            Reads a byte from the compressed input stream.
            
            @return the byte or -1 if the end of the compressed input stream has been
                    reached.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.read(System.Byte[],System.Int32,System.Int32)">
            Reads compressed data into a byte buffer.
            
            @param b
                       the byte buffer that compressed data will be read into.
            @param off
                       the offset in the byte buffer where compressed data will start
                       to be read into.
            @param len
                       the length of the compressed data that is expected to read.
            @return the number of bytes read or -1 if the end of the compressed input
                    stream has been reached.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.skip(System.Int64)">
            Skips n bytes from the DeflateInputStream.
            
            @param n
                       the bytes to skipped. If n is greater than Integer.MAX_VALUE,
                       the DeflateInputStream tries to skip Integer.MAX_VALUE bytes.
            @return the number of bytes actually skipped.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.available">
            Returns 1 to denote there is data to read while 0 if no data is
            available. The returned value does not denote how many bytes that can be
            read.
            
            @return 1 to denote there is data to read while 0 if no data is
                    available.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.markSupported">
            Denotes whether this inputstream support mark()/reset() operation. Always
            returns false since the two operaions are not supported in
            DeflaterInputStream.
            
            @return always returns false.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.mark(System.Int32)">
            Not supported in DeflaterInputStream and just does nothing.
            
            @param limit
                       maximum number of bytes that can be read before the mark
                       becomes invalid.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterInputStream.reset">
            Not supported in DeflaterInputStream and just throws IOException.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.LinkedHashSet`1" -->
        <member name="T:biz.ritter.javapi.util.HashSet`1">
            HashSet is an implementation of a Set. All optional operations (adding and
            removing) are supported. The elements can be any objects.
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor">
            Constructs a new empty instance of {@code HashSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor(System.Int32)">
            Constructs a new instance of {@code HashSet} with the specified capacity.
            
            @param capacity
                       the initial capacity of this {@code HashSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor(System.Int32,System.Single)">
            Constructs a new instance of {@code HashSet} with the specified capacity
            and load factor.
            
            @param capacity
                       the initial capacity.
            @param loadFactor
                       the initial load factor.
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
            Constructs a new instance of {@code HashSet} containing the unique
            elements in the specified collection.
            
            @param collection
                       the collection of elements to add.
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.add(`0)">
            Adds the specified object to this {@code HashSet} if not already present.
            
            @param object
                       the object to add.
            @return {@code true} when this {@code HashSet} did not already contain
                    the object, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.clear">
            Removes all elements from this {@code HashSet}, leaving it empty.
            
            @see #isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.clone">
            Returns a new {@code HashSet} with the same elements and size as this
            {@code HashSet}.
            
            @return a shallow copy of this {@code HashSet}.
            @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.contains(System.Object)">
            Searches this {@code HashSet} for the specified object.
            
            @param object
                       the object to search for.
            @return {@code true} if {@code object} is an element of this
                    {@code HashSet}, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.isEmpty">
            Returns true if this {@code HashSet} has no elements, false otherwise.
            
            @return {@code true} if this {@code HashSet} has no elements,
                    {@code false} otherwise.
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.iterator">
            Returns an Iterator on the elements of this {@code HashSet}.
            
            @return an Iterator on the elements of this {@code HashSet}.
            @see Iterator
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.remove(System.Object)">
            Removes the specified object from this {@code HashSet}.
            
            @param object
                       the object to remove.
            @return {@code true} if the object was removed, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.HashSet`1.size">
            Returns the number of elements in this {@code HashSet}.
            
            @return the number of elements in this {@code HashSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor">
            Constructs a new empty instance of {@code LinkedHashSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor(System.Int32)">
            Constructs a new instance of {@code LinkedHashSet} with the specified
            capacity.
            
            @param capacity
                       the initial capacity of this {@code LinkedHashSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor(System.Int32,System.Single)">
            Constructs a new instance of {@code LinkedHashSet} with the specified
            capacity and load factor.
            
            @param capacity
                       the initial capacity.
            @param loadFactor
                       the initial load factor.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashSet`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
            Constructs a new instance of {@code LinkedHashSet} containing the unique
            elements in the specified collection.
            
            @param collection
                       the collection of elements to add.
        </member>
        <member name="T:biz.ritter.javapi.util.EventObject">
            {@code EventObject}s represent events. Typically applications subclass this class to
            add event specific information.
            
            @see EventListener
        </member>
        <member name="F:biz.ritter.javapi.util.EventObject.source">
            The event source.
        </member>
        <member name="M:biz.ritter.javapi.util.EventObject.#ctor(System.Object)">
            Constructs a new instance of this class.
            
            @param source
                       the object which fired the event.
        </member>
        <member name="M:biz.ritter.javapi.util.EventObject.getSource">
            Returns the event source.
            
            @return the object which fired the event.
        </member>
        <member name="M:biz.ritter.javapi.util.EventObject.ToString">
            Returns the string representation of this {@code EventObject}.
            
            @return the string representation of this {@code EventObject}.
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferOverflowException">
            <summary>
            A <code>BufferOverflowException</code> is thrown when elements are written
            to a buffer but there is not enough remaining space in the buffer.
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferOverflowException.#ctor">
            <summary>
            Constructs a <code>BufferOverflowException</code>.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.lang.Integer.TYPE">
            The {@link Class} object that represents the primitive type {@code int}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Integer.parseInt(System.String,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.Integer.numberOfTrailingZeros(System.Int32)">
             Determines the number of trailing zeros in the specified integer after
             the {@link #lowestOneBit(int) lowest one bit}.
            
             @param i
                        the integer to examine.
             @return the number of trailing zeros in {@code i}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.bitCount(System.Int32)">
             Counts the number of 1 bits in the specified integer; this is also
             referred to as population count.
            
             @param i
                        the integer to examine.
             @return the number of 1 bits in {@code i}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.toString(System.Int32)">
            Converts the specified integer into its decimal string representation.
            The returned string is a concatenation of a minus sign if the number is
            negative and characters from '0' to '9'.
            
            @param value
                       the integer to convert.
            @return the decimal string representation of {@code value}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.numberOfLeadingZeros(System.Int32)">
             Determines the number of leading zeros in the specified integer prior to
             the {@link #highestOneBit(int) highest one bit}.
            
             @param i
                        the integer to examine.
             @return the number of leading zeros in {@code i}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.highestOneBit(System.Int32)">
            Determines the highest (leftmost) bit of the specified integer that is 1
            and returns the bit mask value for that bit. This is also referred to as
            the Most Significant 1 Bit. Returns zero if the specified integer is
            zero.
            
            @param i
                       the integer to examine.
            @return the bit mask indicating the highest 1 bit in {@code i}.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.signum(System.Int32)">
            Returns the value of the {@code signum} function for the specified
            integer.
            
            @param i
                       the integer value to check.
            @return -1 if {@code i} is negative, 1 if {@code i} is positive, 0 if
                    {@code i} is zero.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.decode(System.String)">
            Parses the specified string and returns a {@code Integer} instance if the
            string can be decoded into an integer value. The string may be an
            optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."),
            octal ("0..."), or decimal ("...") representation of an integer.
            
            @param string
                       a string representation of an integer value.
            @return an {@code Integer} containing the value represented by
                    {@code string}.
            @throws NumberFormatException
                        if {@code string} can not be parsed as an integer value.
        </member>
        <member name="M:biz.ritter.javapi.lang.Integer.valueOf(System.String)">
            Parses the specified string as a signed decimal integer value.
            
            @param string
                       the string representation of an integer value.
            @return an {@code Integer} instance containing the integer value
                    represented by {@code string}.
            @throws NumberFormatException
                        if {@code string} is {@code null}, has a length of zero or
                        can not be parsed as an integer value.
            @see #parseInt(String)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Integer.valueOf(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.lang.IAC_INTERGER_valueOfCache.CACHE" -->
        <member name="T:biz.ritter.javapi.text.ParsePosition">
            Tracks the current position in a parsed string. In case of an error the error
            index can be set to the position where the error occurred without having to
            change the parse position.
        </member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.#ctor(System.Int32)">
            Constructs a new {@code ParsePosition} with the specified index.
            
            @param index
                       the index to begin parsing.
        </member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.Equals(System.Object)">
            Compares the specified object to this {@code ParsePosition} and indicates
            if they are equal. In order to be equal, {@code object} must be an
            instance of {@code ParsePosition} and it must have the same index and
            error index.
            
            @param object
                       the object to compare with this object.
            @return {@code true} if the specified object is equal to this
                    {@code ParsePosition}; {@code false} otherwise.
            @see #hashCode
        </member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.getErrorIndex">
            Returns the index at which the parse could not continue.
            
            @return the index of the parse error or -1 if there is no error.
        </member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.getIndex">
            Returns the current parse position.
            
            @return the current position.
        </member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.setErrorIndex(System.Int32)">
            Sets the index at which the parse could not continue.
            
            @param index
                       the index of the parse error.
        </member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.setIndex(System.Int32)">
            Sets the current parse position.
            
            @param index
                       the current parse position.
        </member>
        <member name="M:biz.ritter.javapi.text.ParsePosition.ToString">
            Returns the string representation of this parse position.
            
            @return the string representation of this parse position.
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.CodingErrorAction">
            Used to indicate what kind of actions to take in case of encoding/decoding
            errors. Currently three actions are defined: {@code IGNORE}, {@code REPLACE}
            and {@code REPORT}.
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CodingErrorAction.IGNORE">
            Denotes the action to ignore any errors.
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CodingErrorAction.REPLACE">
            Denotes the action to fill in the output with a replacement character
            when malformed input or an unmappable character is encountered.
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CodingErrorAction.REPORT">
            Denotes the action to report the encountered error in an appropriate
            manner, for example to throw an exception or return an informative
            result.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CodingErrorAction.ToString">
            Returns a text description of this action indication.
            
            @return a text description of this action indication.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.nio.charset.CharsetEncoder" -->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.#ctor(biz.ritter.javapi.nio.charset.Charset,System.Single,System.Single)">
            Constructs a new <code>CharsetEncoder</code> using the given
            <code>Charset</code>, average number and maximum number of bytes
            created by this encoder for one input character.
            
            @param cs
                       the <code>Charset</code> to be used by this encoder.
            @param averageBytesPerChar
                       average number of bytes created by this encoder for one input
                       character, must be positive.
            @param maxBytesPerChar
                       maximum number of bytes which can be created by this encoder
                       for one input character, must be positive.
            @throws IllegalArgumentException
                        if <code>maxBytesPerChar</code> or
                        <code>averageBytesPerChar</code> is negative.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.#ctor(biz.ritter.javapi.nio.charset.Charset,System.Single,System.Single,System.Byte[])">
            Constructs a new <code>CharsetEncoder</code> using the given
            <code>Charset</code>, replacement byte array, average number and
            maximum number of bytes created by this encoder for one input character.
            
            @param cs
                       the <code>Charset</code> to be used by this encoder.
            @param averageBytesPerChar
                       average number of bytes created by this encoder for one single
                       input character, must be positive.
            @param maxBytesPerChar
                       maximum number of bytes which can be created by this encoder
                       for one single input character, must be positive.
            @param replacement
                       the replacement byte array, cannot be null or empty, its
                       length cannot be larger than <code>maxBytesPerChar</code>,
                       and must be a legal replacement, which can be justified by
                       {@link #isLegalReplacement(byte[]) isLegalReplacement}.
            @throws IllegalArgumentException
                        if any parameters are invalid.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.averageBytesPerChar">
            Gets the average number of bytes created by this encoder for a single
            input character.
            
            @return the average number of bytes created by this encoder for a single
                    input character.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetEncoder.canEncode(System.Char)" -->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.canEncode(biz.ritter.javapi.lang.CharSequence)">
            Checks if a given <code>CharSequence</code> can be encoded by this
            encoder.
            
            Note that this method can change the internal status of this encoder, so
            it should not be called when another encode process is ongoing, otherwise
            it will throw an <code>IllegalStateException</code>.
            
            This method can be overridden for performance improvement.
            
            @param sequence
                       the given <code>CharSequence</code>.
            @return true if the given <code>CharSequence</code> can be encoded by
                    this encoder.
            @throws IllegalStateException
                        if current internal status is neither RESET or FLUSH.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.charset">
            Gets the <code>Charset</code> which this encoder uses.
            
            @return the <code>Charset</code> which this encoder uses.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetEncoder.encode(biz.ritter.javapi.nio.CharBuffer)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetEncoder.encode(biz.ritter.javapi.nio.CharBuffer,biz.ritter.javapi.nio.ByteBuffer,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetEncoder.encodeLoop(biz.ritter.javapi.nio.CharBuffer,biz.ritter.javapi.nio.ByteBuffer)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetEncoder.flush(biz.ritter.javapi.nio.ByteBuffer)" -->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implFlush(biz.ritter.javapi.nio.ByteBuffer)">
            Flushes this encoder. The default implementation does nothing and always
            returns <code>CoderResult.UNDERFLOW</code>; this method can be
            overridden if needed.
            
            @param out
                       the output buffer.
            @return <code>CoderResult.UNDERFLOW</code> or
                    <code>CoderResult.OVERFLOW</code>.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implOnMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Notifies that this encoder's <code>CodingErrorAction</code> specified
            for malformed input error has been changed. The default implementation
            does nothing; this method can be overridden if needed.
            
            @param newAction
                       the new action.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implOnUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Notifies that this encoder's <code>CodingErrorAction</code> specified
            for unmappable character error has been changed. The default
            implementation does nothing; this method can be overridden if needed.
            
            @param newAction
                       the new action.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implReplaceWith(System.Byte[])">
            Notifies that this encoder's replacement has been changed. The default
            implementation does nothing; this method can be overridden if needed.
            
            @param newReplacement
                       the new replacement string.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.implReset">
            Resets this encoder's charset related state. The default implementation
            does nothing; this method can be overridden if needed.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.isLegalReplacement(System.Byte[])">
            Checks if the given argument is legal as this encoder's replacement byte
            array.
            
            The given byte array is legal if and only if it can be decode into
            sixteen bits Unicode characters.
            
            This method can be overridden for performance improvement.
            
            @param repl
                       the given byte array to be checked.
            @return true if the the given argument is legal as this encoder's
                    replacement byte array.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.malformedInputAction">
            Gets this encoder's <code>CodingErrorAction</code> when a malformed
            input error occurred during the encoding process.
            
            @return this encoder's <code>CodingErrorAction</code> when a malformed
                    input error occurred during the encoding process.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.maxBytesPerChar">
            Gets the maximum number of bytes which can be created by this encoder for
            one input character, must be positive.
            
            @return the maximum number of bytes which can be created by this encoder
                    for one input character, must be positive.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.onMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Sets this encoder's action on malformed input error.
            
            This method will call the
            {@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput}
            method with the given new action as argument.
            
            @param newAction
                       the new action on malformed input error.
            @return this encoder.
            @throws IllegalArgumentException
                        if the given newAction is null.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.onUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Sets this encoder's action on unmappable character error.
            
            This method will call the
            {@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter}
            method with the given new action as argument.
            
            @param newAction
                       the new action on unmappable character error.
            @return this encoder.
            @throws IllegalArgumentException
                        if the given newAction is null.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.replacement">
            Gets the replacement byte array, which is never null or empty.
            
            @return the replacement byte array, cannot be null or empty.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.replaceWith(System.Byte[])">
            Sets the new replacement value.
            
            This method first checks the given replacement's validity, then changes
            the replacement value and finally calls the
            {@link #implReplaceWith(byte[]) implReplaceWith} method with the given
            new replacement as argument.
            
            @param replacement
                       the replacement byte array, cannot be null or empty, its
                       length cannot be larger than <code>maxBytesPerChar</code>,
                       and it must be legal replacement, which can be justified by
                       calling <code>isLegalReplacement(byte[] repl)</code>.
            @return this encoder.
            @throws IllegalArgumentException
                        if the given replacement cannot satisfy the requirement
                        mentioned above.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.reset">
            Resets this encoder. This method will reset the internal status and then
            calla <code>implReset()</code> to reset any status related to the
            specific charset.
            
            @return this encoder.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetEncoder.unmappableCharacterAction">
            Gets this encoder's <code>CodingErrorAction</code> when unmappable
            character occurred during encoding process.
            
            @return this encoder's <code>CodingErrorAction</code> when unmappable
                    character occurred during encoding process.
        </member>
        <member name="T:biz.ritter.javapi.lang.InterruptedException">
            Thrown when a waiting thread is activated before the condition it was waiting
            for has been satisfied.
        </member>
        <member name="M:biz.ritter.javapi.lang.InterruptedException.#ctor">
            Constructs a new {@code InterruptedException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.InterruptedException.#ctor(System.String)">
            Constructs a new {@code InterruptedException} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.lang.InternalError">
            Thrown when the virtual machine notices that it has gotten into an undefined
            state.
        </member>
        <member name="M:biz.ritter.javapi.lang.InternalError.#ctor">
            Constructs a new {@code InternalError} that includes the current stack
            trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.InternalError.#ctor(System.String)">
            Constructs a new {@code InternalError} with the current stack trace and
            the specified detail message.
            
            @param detailMessage
                       the detail message for this error.
        </member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper">
            <summary>
            This utility class wrap a .net framework System.IO.Stream instance into a Java java.io.InputStream.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper.delegateInstance">
            <summary>
            The base .net Stream instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.InputStreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Construct new wrapper for given Stream instance
            </summary>
            <param name="dotNetStream">Stream to wrap</param>
        </member>
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.EnumeratorWrapper`1">
            <summary>
            This class take a .net IEnumerator instance inside and use this to delegate the
            java.util.Enumeration method calls.
            </summary>
            <typeparam name="K">Type to enumerate</typeparam>
        </member>
        <member name="T:biz.ritter.javapi.lang.Deprecated">
            <summary>
            Simple Implementation of <code>Deprecated</code> annotation, but
            we cannot extends the .net <code>System.ObsoleteAttribute</code> and
            so use [Obsolete] are better for IDE...
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.annotation.AbstractAnnotation">
             Defines the interface implemented by all annotations. Note that the interface
             itself is <i>not</i> an annotation, and neither is an interface that simply
             extends this one. Only the compiler is able to create proper annotation
             types.
            
             <strong>Basties Note: implemented as abstract class</strong>
             @since 1.5
        </member>
        <member name="T:biz.ritter.javapi.lang.annotation.Annotation">
            <summary>
            Do not use directly, better use AbstractAnnotation!!!
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.annotationType">
             Returns the type of this annotation.
            
             @return A {@code Class} instance representing the annotation type.
        </member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.equals(System.Object)">
             Determines whether or not this annotation is equivalent to the annotation
             passed. This is determined according to the following rules:
             
             <ul>
                 <li>
                     Two annotations {@code x} and {@code y} are equal if and only if
                     they are members of the same annotation type and all the member
                     values of {@code x} are equal to the corresponding member values
                     of {@code y}.
                 </li>
                 <li>
                     The equality of primitive member values {@code x} and {@code y}
                     is determined (in a way similar to) using the corresponding
                     wrapper classes. For example,
                     {@code Integer.valueOf(x).equals(Integer.valueOf(y)} is used for
                     {@code int} values. Note: The behavior is identical to the
                     {@code ==} operator for all but the floating point type, so the
                     implementation may as well use {@code ==} in these cases for
                     performance reasons. Only for the {@code float} and {@code double}
                     types the result will be slightly different: {@code NaN} is equal
                     to {@code NaN}, and {@code -0.0} is equal to {@code 0.0}, both of
                     which is normally not the case.
                 </li>
                 <li>
                     The equality of two array member values {@code x} and {@code y}
                     is determined using the corresponding {@code equals(x, y)}
                     helper function in {@link java.util.Arrays}.
                 </li>
                 <li>
                     The hash code for all other member values is determined by simply
                     calling their {@code equals()} method.
                 </li>
             </ul>
            
             @param obj
                        The object to compare to.
            
             @return {@code true} if {@code obj} is equal to this annotation,
                        {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.hashCode">
             Returns the hash code of this annotation. The hash code is determined
             according to the following rules:
             
             <ul>
                 <li>
                     The hash code of an annotation is the sum of the hash codes of
                     its annotation members.
                 </li>
                 <li>
                     The hash code of an annotation member is calculated as {@code
                     (0x7f * n.hashCode()) ^ v.hashCode())}, where {@code n} is the
                     name of the member (as a {@code String}) and {@code v} its value.
                 </li>
                 <li>
                     The hash code for a primitive member value is determined using
                     the corresponding wrapper type. For example, {@code
                     Integer.valueOf(v).hashCode()} is used for an {@code int} value
                     {@code v}.
                 </li>
                 <li>
                     The hash code for an array member value {@code v} is determined
                     using the corresponding {@code hashCode(v)} helper function in
                     {@link java.util.Arrays}.
                 </li>
                 <li>
                     The hash code for all other member values is determined by simply
                     calling their {@code hashCode} method.
                 </li>
             </ul>
            
             @return the hash code.
        </member>
        <member name="M:biz.ritter.javapi.lang.annotation.AbstractAnnotation.toString">
            Returns a {@code String} representation of this annotation. It is not
            strictly defined what the representation has to look like, but it usually
            consists of the name of the annotation, preceded by a "@". If the
            annotation contains field members, their names and values are also
            included in the result.
            
            @return the {@code String} that represents this annotation.
        </member>
        <member name="T:biz.ritter.javapi.io.BufferedOutputStream">
             Wraps an existing {@link OutputStream} and <em>buffers</em> the output.
             Expensive interaction with the underlying input stream is minimized, since
             most (smaller) requests can be satisfied by accessing the buffer alone. The
             drawback is that some extra space is required to hold the buffer and that
             copying takes place when flushing that buffer, but this is usually outweighed
             by the performance benefits.
             
             <p/>A typical application pattern for the class looks like this:<p/>
            
             <pre>
             BufferedOutputStream buf = new BufferedOutputStream(new FileOutputStream(&quot;file.java&quot;));
             </pre>
            
             @see BufferedInputStream
        </member>
        <member name="F:biz.ritter.javapi.io.BufferedOutputStream.buf">
            The buffer containing the bytes to be written to the target stream.
        </member>
        <member name="F:biz.ritter.javapi.io.BufferedOutputStream.count">
            The total number of bytes inside the byte array {@code buf}.
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
            Constructs a new {@code BufferedOutputStream} on the {@link OutputStream}
            {@code out}. The buffer size is set to the default value of 8 KB.
            
            @param out
                       the {@code OutputStream} for which write operations are
                       buffered.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.flush">
            Flushes this stream to ensure all pending data is written out to the
            target stream. In addition, the target stream is flushed.
            
            @throws IOException
                        if an error occurs attempting to flush this stream.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedOutputStream.write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.write(System.Int32)">
            Writes one byte to this stream. Only the low order byte of the integer
            {@code oneByte} is written. If there is room in the buffer, the byte is
            copied into the buffer and the count incremented. Otherwise, the buffer
            plus {@code oneByte} are written to the target stream, the target is
            flushed, and the buffer is reset.
            
            @param oneByte
                       the byte to be written.
            @throws IOException
                        if an error occurs attempting to write to this stream.
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedOutputStream.flushInternal">
            Flushes only internal buffer.
        </member>
        <member name="T:biz.ritter.javapi.lang.Short">
            The wrapper for the primitive type {@code short}.
            
            @see java.lang.Number
            @since 1.1
        </member>
        <member name="F:biz.ritter.javapi.lang.Short.TYPE">
            The {@link Class} object that represents the primitive type {@code
            short}.
        </member>
        <member name="F:biz.ritter.javapi.lang.Short.value">
            The value which the receiver represents.
        </member>
        <member name="F:biz.ritter.javapi.lang.Short.MAX_VALUE">
            Constant for the maximum {@code short} value, 2<sup>15</sup>-1.
        </member>
        <member name="F:biz.ritter.javapi.lang.Short.MIN_VALUE">
            Constant for the minimum {@code short} value, -2<sup>15</sup>.
        </member>
        <member name="F:biz.ritter.javapi.lang.Short.SIZE">
             Constant for the number of bits needed to represent a {@code short} in
             two's complement form.
            
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.#ctor(System.String)">
             Constructs a new {@code Short} from the specified string.
            
             @param string
                        the string representation of a short value.
             @throws NumberFormatException
                         if {@code string} can not be decoded into a short value.
             @see #parseShort(String)
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.#ctor(System.Int16)">
             Constructs a new {@code Short} with the specified primitive short value.
            
             @param value
                        the primitive short value to store in the new instance.
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.compareTo(biz.ritter.javapi.lang.Short)">
            Compares this object to the specified short object to determine their
            relative order.
            
            @param object
                       the short object to compare this object to.
            @return a negative value if the value of this short is less than the
                    value of {@code object}; 0 if the value of this short and the
                    value of {@code object} are equal; a positive value if the value
                    of this short is greater than the value of {@code object}.
            @throws NullPointerException
                        if {@code object} is null.
            @see java.lang.Comparable
            @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.decode(System.String)">
             Parses the specified string and returns a {@code Short} instance if the
             string can be decoded into a short value. The string may be an optional
             minus sign "-" followed by a hexadecimal ("0x..." or "#..."), octal
             ("0..."), or decimal ("...") representation of a short.
            
             @param string
                        a string representation of a short value.
             @return a {@code Short} containing the value represented by
                     {@code string}.
             @throws NumberFormatException
                         if {@code string} can not be parsed as a short value.
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.Equals(System.Object)">
             Compares this instance with the specified object and indicates if they
             are equal. In order to be equal, {@code object} must be an instance of
             {@code Short} and have the same short value as this object.
            
             @param object
                        the object to compare this short with.
             @return {@code true} if the specified object is equal to this
                     {@code Short}; {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.parseShort(System.String)">
             Parses the specified string as a signed decimal short value. The ASCII
             character \u002d ('-') is recognized as the minus sign.
            
             @param string
                        the string representation of a short value.
             @return the primitive short value represented by {@code string}.
             @throws NumberFormatException
                         if {@code string} is {@code null}, has a length of zero or
                         can not be parsed as a short value.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Short.parseShort(System.String,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.Short.shortValue">
             Gets the primitive value of this short.
            
             @return this object's primitive value.
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.toString(System.Int16)">
             Returns a string containing a concise, human-readable description of the
             specified short value with radix 10.
            
             @param value
                         the short to convert to a string.
             @return a printable representation of {@code value}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Short.valueOf(System.String)">
             Parses the specified string as a signed decimal short value.
            
             @param string
                        the string representation of a short value.
             @return a {@code Short} instance containing the short value represented
                     by {@code string}.
             @throws NumberFormatException
                         if {@code string} is {@code null}, has a length of zero or
                         can not be parsed as a short value.
             @see #parseShort(String)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Short.valueOf(System.String,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.Short.reverseBytes(System.Int16)">
            Reverses the bytes of the specified short.
            
            @param s
                       the short value for which to reverse bytes.
            @return the reversed value.
            @since 1.5
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Short.valueOf(System.Int16)" -->
        <member name="F:biz.ritter.javapi.lang.IAC_SHORT_valueOfCache.CACHE">
            A cache of instances used by {@link Short#valueOf(short)} and auto-boxing.
        </member>
        <member name="T:biz.ritter.javapi.dotnet.lang.ConsoleOutputPrintStream">
            Default OutputStream to write something on Console.
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.ConsoleOutputPrintStream.println(System.String)">
            <summary>
            Override the PrintStream implementation with Console specific implementation
            </summary>
            <param name="output"></param>
        </member>
        <member name="T:biz.ritter.javapi.nio.InvalidMarkException">
            An {@code InvalidMarkException} is thrown when {@code reset()} is called on a
            buffer, but no mark has been set previously.
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.lang.IllegalStateException">
            Thrown when an action is attempted at a time when the virtual machine is not
            in the correct state.
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor">
            Constructs a new {@code IllegalStateException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor(System.String)">
            Constructs a new {@code IllegalStateException} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor(System.String,biz.ritter.javapi.lang.Throwable)">
            Constructs a new {@code IllegalStateException} with the current stack
            trace, the specified detail message and the specified cause.
            
            @param message
                       the detail message for this exception.
            @param cause
                       the cause of this exception.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalStateException.#ctor(biz.ritter.javapi.lang.Throwable)">
            Constructs a new {@code IllegalStateException} with the current stack
            trace and the specified cause.
            
            @param cause
                       the cause of this exception, may be {@code null}.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.nio.InvalidMarkException.#ctor">
            Constructs an {@code InvalidMarkException}.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.nio.ByteBuffer" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.allocate(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.wrap(System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.wrap(System.Byte[],System.Int32,System.Int32)" -->
        <member name="F:biz.ritter.javapi.nio.ByteBuffer.orderJ">
            The byte order of this buffer, default is {@code BIG_ENDIAN}.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.#ctor(System.Int32)">
            Constructs a {@code ByteBuffer} with given capacity.
            
            @param capacity
                       the capacity of the buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.array">
            Returns the byte array which this buffer is based on, if there is one.
            
            @return the byte array which this buffer is based on.
            @exception ReadOnlyBufferException
                           if this buffer is based on a read-only array.
            @exception UnsupportedOperationException
                           if this buffer is not based on an array.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.arrayOffset" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.asReadOnlyBuffer" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.compact" -->
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.compareTo(biz.ritter.javapi.nio.ByteBuffer)">
            Compares the remaining bytes of this buffer to another byte buffer's
            remaining bytes.
            
            @param otherBuffer
                       another byte buffer.
            @return a negative value if this is less than {@code other}; 0 if this
                    equals to {@code other}; a positive value if this is greater
                    than {@code other}.
            @exception ClassCastException
                           if {@code other} is not a byte buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.duplicate" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.Equals(System.Object)" -->
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.get">
            Returns the byte at the current position and increases the position by 1.
            
            @return the byte at the current position.
            @exception BufferUnderflowException
                           if the position is equal or greater than limit.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.get(System.Byte[])" -->
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.get(System.Byte[],System.Int32,System.Int32)">
            Reads bytes from the current position into the specified byte array,
            starting at the specified offset, and increases the position by the
            number of bytes read.
            
            @param dest
                       the target byte array.
            @param off
                       the offset of the byte array, must not be negative and
                       not greater than {@code dest.length}.
            @param len
                       the number of bytes to read, must not be negative and not
                       greater than {@code dest.length - off}
            @return this buffer.
            @exception IndexOutOfBoundsException
                           if either {@code off} or {@code len} is invalid.
            @exception BufferUnderflowException
                           if {@code len} is greater than {@code remaining()}.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.get(System.Int32)">
            Returns the byte at the specified index and does not change the position.
            
            @param index
                       the index, must not be negative and less than limit.
            @return the byte at the specified index.
            @exception IndexOutOfBoundsException
                           if index is invalid.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.hasArray">
            Indicates whether this buffer is based on a byte array and provides
            read/write access.
            
            @return {@code true} if this buffer is based on a byte array and provides
                    read/write access, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.GetHashCode">
             Calculates this buffer's hash code from the remaining chars. The
             position, limit, capacity and mark don't affect the hash code.
            
             @return the hash code calculated from the remaining bytes.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.order" -->
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.order(biz.ritter.javapi.nio.ByteOrder)">
            Sets the byte order of this buffer.
            
            @param byteOrder
                       the byte order to set. If {@code null} then the order
                       will be {@link ByteOrder#LITTLE_ENDIAN LITTLE_ENDIAN}.
            @return this buffer.
            @see ByteOrder
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.protectedArray">
            Child class implements this method to realize {@code array()}.
            
            @see #array()
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.protectedArrayOffset">
            Child class implements this method to realize {@code arrayOffset()}.
            
            @see #arrayOffset()
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.protectedHasArray">
            Child class implements this method to realize {@code hasArray()}.
            
            @see #hasArray()
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(System.Byte)">
            Writes the given byte to the current position and increases the position
            by 1.
            
            @param b
                       the byte to write.
            @return this buffer.
            @exception BufferOverflowException
                           if position is equal or greater than limit.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.put(System.Byte[])" -->
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(System.Byte[],System.Int32,System.Int32)">
            Writes bytes in the given byte array, starting from the specified offset,
            to the current position and increases the position by the number of bytes
            written.
            
            @param src
                       the source byte array.
            @param off
                       the offset of byte array, must not be negative and not greater
                       than {@code src.length}.
            @param len
                       the number of bytes to write, must not be negative and not
                       greater than {@code src.length - off}.
            @return this buffer.
            @exception BufferOverflowException
                           if {@code remaining()} is less than {@code len}.
            @exception IndexOutOfBoundsException
                           if either {@code off} or {@code len} is invalid.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(biz.ritter.javapi.nio.ByteBuffer)">
            Writes all the remaining bytes of the {@code src} byte buffer to this
            buffer's current position, and increases both buffers' position by the
            number of bytes copied.
            
            @param src
                       the source byte buffer.
            @return this buffer.
            @exception BufferOverflowException
                           if {@code src.remaining()} is greater than this buffer's
                           {@code remaining()}.
            @exception IllegalArgumentException
                           if {@code src} is this buffer.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.put(System.Int32,System.Byte)">
            Write a byte to the specified index of this buffer without changing the
            position.
            
            @param index
                       the index, must not be negative and less than the limit.
            @param b
                       the byte to write.
            @return this buffer.
            @exception IndexOutOfBoundsException
                           if {@code index} is invalid.
            @exception ReadOnlyBufferException
                           if no changes may be made to the contents of this buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.slice" -->
        <member name="M:biz.ritter.javapi.nio.ByteBuffer.ToString">
            Returns a string representing the state of this byte buffer.
            
            @return a string representing the state of this byte buffer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getInt" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getInt(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getLong" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getLong(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getShort" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getShort(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getChar" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.getChar(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.putChar(System.Char)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.putChar(System.Int32,System.Char)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.putShort(System.Int16)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.ByteBuffer.putShort(System.Int32,System.Int16)" -->
        <member name="T:biz.ritter.javapi.net.URIEncoderDecoder">
            This class is used to encode a string using the format required by {@code
            application/x-www-form-urlencoded} MIME content type. It contains helper
            methods used by the URI class, and performs encoding and decoding in a
            slightly different way than {@code URLEncoder} and {@code URLDecoder}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URIEncoderDecoder.validate(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URIEncoderDecoder.quoteIllegal(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URIEncoderDecoder.encodeOthers(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URIEncoderDecoder.decode(System.String)" -->
        <member name="T:biz.ritter.javapi.lang.LinkageError">
            {@code LinkageError} is the superclass of all error classes that occur when
            loading and linking class files.
            
            @see Error
        </member>
        <member name="M:biz.ritter.javapi.lang.LinkageError.#ctor">
            Constructs a new {@code LinkageError} that includes the current stack
            trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.LinkageError.#ctor(System.String)">
            Constructs a new {@code LinkageError} with the current stack trace and
            the specified detail message.
            
            @param detailMessage
                       the detail message for this error.
        </member>
        <member name="T:biz.ritter.javapi.lang.InstantiationException">
            Thrown when a program attempts to access a constructor which is not
            accessible from the location where the reference is made.
        </member>
        <member name="M:biz.ritter.javapi.lang.InstantiationException.#ctor">
            Constructs a new {@code InstantiationException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.InstantiationException.#ctor(System.String)">
            Constructs a new {@code InstantiationException} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="M:biz.ritter.javapi.lang.InstantiationException.#ctor(System.Type)">
            Constructs a new {@code InstantiationException} with the current stack
            trace and the class that caused this exception.
            
            @param clazz
                       the class that can not be instantiated.
        </member>
        <member name="T:biz.ritter.javapi.io.DataOutput">
            Defines an interface for classes that are able to write typed data to some
            target. Typically, this data can be read in by a class which implements
            DataInput. Types that can be written include byte, 16-bit short, 32-bit int,
            32-bit float, 64-bit long, 64-bit double, byte strings, and {@link DataInput
            MUTF-8} encoded strings.
            
            @see DataOutputStream
            @see RandomAccessFile
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.write(System.Byte[])">
            Writes the entire contents of the byte array {@code buffer} to this
            stream.
            
            @param buffer
                       the buffer to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readFully(byte[])
            @see DataInput#readFully(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.write(System.Byte[],System.Int32,System.Int32)">
            Writes {@code count} bytes from the byte array {@code buffer} starting at
            offset {@code index}.
            
            @param buffer
                       the buffer to write.
            @param offset
                       the index of the first byte in {@code buffer} to write.
            @param count
                       the number of bytes from the {@code buffer} to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readFully(byte[])
            @see DataInput#readFully(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.write(System.Int32)">
            Writes the specified 8-bit byte.
            
            @param oneByte
                       the byte to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readByte()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeBoolean(System.Boolean)">
            Writes the specified boolean.
            
            @param val
                       the boolean value to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readBoolean()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeByte(System.Int32)">
            Writes the specified 8-bit byte.
            
            @param val
                       the byte value to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readByte()
            @see DataInput#readUnsignedByte()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeBytes(System.String)">
            Writes the low order 8-bit bytes from the specified string.
            
            @param str
                       the string containing the bytes to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readFully(byte[])
            @see DataInput#readFully(byte[],int,int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeChar(System.Int32)">
            Writes the specified 16-bit character. Only the two least significant
            bytes of the integer {@code oneByte} are written, with the higher one
            written first. This represents the Unicode value of the char.
            
            @param val
                       the character to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readChar()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeChars(System.String)">
            Writes the 16-bit characters contained in {@code str}.
            
            @param str
                       the string that contains the characters to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readChar()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeDouble(System.Double)">
            Writes the specified 64-bit double. The resulting output is the eight
            bytes returned by {@link Double#doubleToLongBits(double)}.
            
            @param val
                       the double to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readDouble()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeFloat(System.Single)">
            Writes the specified 32-bit float. The resulting output is the four bytes
            returned by {@link Float#floatToIntBits(float)}.
            
            @param val
                       the float to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readFloat()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeInt(System.Int32)">
            Writes the specified 32-bit int. The resulting output is the four bytes,
            highest order first, of {@code val}.
            
            @param val
                       the int to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readInt()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeLong(System.Int64)">
            Writes the specified 64-bit long. The resulting output is the eight
            bytes, highest order first, of {@code val}.
            
            @param val
                       the long to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readLong()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeShort(System.Int32)">
            Writes the specified 16-bit short. Only the lower two bytes of {@code
            val} are written with the higher one written first.
            
            @param val
                       the short to write.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readShort()
            @see DataInput#readUnsignedShort()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutput.writeUTF(System.String)">
            Writes the specified string encoded in {@link DataInput modified UTF-8}.
            
            @param str
                       the string to write encoded in {@link DataInput modified UTF-8}.
            @throws IOException
                        if an I/O error occurs while writing.
            @see DataInput#readUTF()
        </member>
        <member name="T:biz.ritter.javapi.util.DuplicateFormatFlagsException">
             The unchecked exception will be thrown out if there are duplicate flags given
             out in the format specifier.
            
             @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.DuplicateFormatFlagsException.#ctor(System.String)">
            Constructs a new {@code DuplicateFormatFlagsException} with the flags
            containing duplicates.
            
            @param f
                      the format flags that contain a duplicate flag.
        </member>
        <member name="M:biz.ritter.javapi.util.DuplicateFormatFlagsException.getFlags">
            Returns the format flags that contain a duplicate flag.
            
            @return the format flags that contain a duplicate flag.
        </member>
        <member name="M:biz.ritter.javapi.util.DuplicateFormatFlagsException.getMessage">
            Returns the message string of the DuplicateFormatFlagsException.
            
            @return the message string of the DuplicateFormatFlagsException.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2" -->
        <member name="T:biz.ritter.javapi.util.concurrent.ConcurrentMap`2">
            <summary>
            
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.putIfAbsent(`0,`1)">
             If the specified key is not already associated
             with a value, associate it with the given value.
             This is equivalent to
             <pre>
               if (!map.containsKey(key))
                   return map.put(key, value);
               else
                   return map.get(key);</pre>
             except that the action is performed atomically.
            
             @param key key with which the specified value is to be associated
             @param value value to be associated with the specified key
             @return the previous value associated with the specified key, or
                     <tt>null</tt> if there was no mapping for the key.
                     (A <tt>null</tt> return can also indicate that the map
                     previously associated <tt>null</tt> with the key,
                     if the implementation supports null values.)
             @throws UnsupportedOperationException if the <tt>put</tt> operation
                     is not supported by this map
             @throws ClassCastException if the class of the specified key or value
                     prevents it from being stored in this map
             @throws NullPointerException if the specified key or value is null,
                     and this map does not permit null keys or values
             @throws IllegalArgumentException if some property of the specified key
                     or value prevents it from being stored in this map
            
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.remove(System.Object,System.Object)">
             Removes the entry for a key only if currently mapped to a given value.
             This is equivalent to
             <pre>
               if (map.containsKey(key) &amp;&amp; map.get(key).equals(value)) {
                   map.remove(key);
                   return true;
               } else return false;</pre>
             except that the action is performed atomically.
            
             @param key key with which the specified value is associated
             @param value value expected to be associated with the specified key
             @return <tt>true</tt> if the value was removed
             @throws UnsupportedOperationException if the <tt>remove</tt> operation
                     is not supported by this map
             @throws ClassCastException if the key or value is of an inappropriate
                     type for this map (optional)
             @throws NullPointerException if the specified key or value is null,
                     and this map does not permit null keys or values (optional)
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.replace(`0,`1,`1)">
             Replaces the entry for a key only if currently mapped to a given value.
             This is equivalent to
             <pre>
               if (map.containsKey(key) &amp;&amp; map.get(key).equals(oldValue)) {
                   map.put(key, newValue);
                   return true;
               } else return false;</pre>
             except that the action is performed atomically.
            
             @param key key with which the specified value is associated
             @param oldValue value expected to be associated with the specified key
             @param newValue value to be associated with the specified key
             @return <tt>true</tt> if the value was replaced
             @throws UnsupportedOperationException if the <tt>put</tt> operation
                     is not supported by this map
             @throws ClassCastException if the class of a specified key or value
                     prevents it from being stored in this map
             @throws NullPointerException if a specified key or value is null,
                     and this map does not permit null keys or values
             @throws IllegalArgumentException if some property of a specified key
                     or value prevents it from being stored in this map
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentMap`2.replace(`0,`1)">
             Replaces the entry for a key only if currently mapped to some value.
             This is equivalent to
             <pre>
               if (map.containsKey(key)) {
                   return map.put(key, value);
               } else return null;</pre>
             except that the action is performed atomically.
            
             @param key key with which the specified value is associated
             @param value value to be associated with the specified key
             @return the previous value associated with the specified key, or
                     <tt>null</tt> if there was no mapping for the key.
                     (A <tt>null</tt> return can also indicate that the map
                     previously associated <tt>null</tt> with the key,
                     if the implementation supports null values.)
             @throws UnsupportedOperationException if the <tt>put</tt> operation
                     is not supported by this map
             @throws ClassCastException if the class of the specified key or value
                     prevents it from being stored in this map
             @throws NullPointerException if the specified key or value is null,
                     and this map does not permit null keys or values
             @throws IllegalArgumentException if some property of the specified key
                     or value prevents it from being stored in this map
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.subMap(`0,System.Boolean,`0,System.Boolean)">
            @throws ClassCastException       {@inheritDoc}
            @throws NullPointerException     {@inheritDoc}
            @throws IllegalArgumentException {@inheritDoc}
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.headMap(`0,System.Boolean)">
            @throws ClassCastException       {@inheritDoc}
            @throws NullPointerException     {@inheritDoc}
            @throws IllegalArgumentException {@inheritDoc}
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.tailMap(`0,System.Boolean)">
            @throws ClassCastException       {@inheritDoc}
            @throws NullPointerException     {@inheritDoc}
            @throws IllegalArgumentException {@inheritDoc}
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.subMap(`0,`0)">
            @throws ClassCastException       {@inheritDoc}
            @throws NullPointerException     {@inheritDoc}
            @throws IllegalArgumentException {@inheritDoc}
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.headMap(`0)">
            @throws ClassCastException       {@inheritDoc}
            @throws NullPointerException     {@inheritDoc}
            @throws IllegalArgumentException {@inheritDoc}
        </member>
        <member name="M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.tailMap(`0)">
            @throws ClassCastException       {@inheritDoc}
            @throws NullPointerException     {@inheritDoc}
            @throws IllegalArgumentException {@inheritDoc}
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.descendingMap" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.navigableKeySet" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.keySet" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.concurrent.ConcurrentNavigableMap`2.descendingKeySet" -->
        <member name="T:biz.ritter.javapi.lang.StackTraceElement">
             A representation of a single stack frame. Arrays of {@code StackTraceElement}
             are stored in {@link Throwable} objects to represent the whole state of the
             call stack at the time a {@code Throwable} gets thrown.
            
             @see Throwable#getStackTrace()
             @since 1.4
        </member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.#ctor(System.String,System.String,System.String,System.Int32)">
             Constructs a new {@code StackTraceElement} for a specified execution
             point.
            
             @param cls
                        the fully qualified name of the class where execution is at.
             @param method
                        the name of the method where execution is at.
             @param file
                        The name of the file where execution is at or {@code null}.
             @param line
                        the line of the file where execution is at, a negative number
                        if unknown or {@code -2} if the execution is in a native
                        method.
             @throws NullPointerException
                         if {@code cls} or {@code method} is {@code null}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.#ctor">
            <p>
            Private, nullary constructor for VM use only.
            </p>
        </member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.Equals(System.Object)">
             Compares this instance with the specified object and indicates if they
             are equal. In order to be equal, the following conditions must be
             fulfilled:
             <ul>
             <li>{@code obj} must be a stack trace element,</li>
             <li>the method names of this stack trace element and of {@code obj} must
             not be {@code null},</li>
             <li>the class, method and file names as well as the line number of this
             stack trace element and of {@code obj} must be equal.</li>
             </ul>
            
             @param obj
                        the object to compare this instance with.
             @return {@code true} if the specified object is equal to this
                     {@code StackTraceElement}; {@code false} otherwise.
             @see #hashCode
        </member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.getClassName">
            Returns the fully qualified name of the class belonging to this
            {@code StackTraceElement}.
            
            @return the fully qualified type name of the class
        </member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.getFileName">
            Returns the name of the Java source file containing class belonging to
            this {@code StackTraceElement}.
            
            @return the name of the file, or {@code null} if this information is not
                    available.
        </member>
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.getLineNumber">
            Returns the line number in the source for the class belonging to this
            {@code StackTraceElement}.
            
            @return the line number, or a negative number if this information is not
                    available.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StackTraceElement.getMethodName" -->
        <member name="M:biz.ritter.javapi.lang.StackTraceElement.isNativeMethod">
            Indicates if the method name returned by {@link #getMethodName()} is
            implemented as a native method.
            
            @return {@code true} if the method in which this stack trace element is
                    executing is a native method; {@code false} otherwise.
        </member>
        <member name="T:biz.ritter.javapi.lang.Byte">
             The wrapper for the primitive type {@code byte}.
            
             @since 1.1
        </member>
        <member name="F:biz.ritter.javapi.lang.Byte.TYPE">
            The {@link Class} object that represents the primitive type {@code byte}.
        </member>
        <member name="F:biz.ritter.javapi.lang.Byte.value">
            The value which the receiver represents.
        </member>
        <member name="F:biz.ritter.javapi.lang.Byte.MAX_VALUE">
            The maximum {@code Byte} value, 2<sup>7</sup>-1.
        </member>
        <member name="F:biz.ritter.javapi.lang.Byte.MIN_VALUE">
            The minimum {@code Byte} value, -2<sup>7</sup>.
        </member>
        <member name="F:biz.ritter.javapi.lang.Byte.SIZE">
            The number of bits needed to represent a {@code Byte} value in two's
            complement form.
            
            @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Byte.CACHE">
            A cache of instances used by {@link #valueOf(byte)} and auto-boxing.
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.#ctor(System.Byte)">
            Constructs a new {@code Byte} with the specified primitive byte value.
            
            @param value
                       the primitive byte value to store in the new instance.
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.#ctor(System.SByte)">
            <summary>
            In addition, set the signed byte value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.#ctor(System.String)">
            Constructs a new {@code Byte} from the specified string.
            
            @param string
                       the string representation of a single byte value.
            @throws NumberFormatException
                        if {@code string} can not be decoded into a byte value.
            @see #parseByte(String)
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.byteValue">
            Gets the primitive value of this byte.
            
            @return this object's primitive value.
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.sbyteValue">
            <summary>
            In addition, returns thesigned byte value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.compareTo(biz.ritter.javapi.lang.Byte)">
            Compares this object to the specified byte object to determine their
            relative order.
            
            @param object
                       the byte object to compare this object to.
            @return a negative value if the value of this byte is less than the value
                    of {@code object}; 0 if the value of this byte and the value of
                    {@code object} are equal; a positive value if the value of this
                    byte is greater than the value of {@code object}.
            @see java.lang.Comparable
            @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.decode(System.String)">
            Parses the specified string and returns a {@code Byte} instance if the
            string can be decoded into a single byte value. The string may be an
            optional minus sign "-" followed by a hexadecimal ("0x..." or "#..."),
            octal ("0..."), or decimal ("...") representation of a byte.
            
            @param string
                       a string representation of a single byte value.
            @return a {@code Byte} containing the value represented by {@code string}.
            @throws NumberFormatException
                        if {@code string} can not be parsed as a byte value.
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.Equals(System.Object)">
            Compares this object with the specified object and indicates if they are
            equal. In order to be equal, {@code object} must be an instance of
            {@code Byte} and have the same byte value as this object.
            
            @param object
                       the object to compare this byte with.
            @return {@code true} if the specified object is equal to this
                    {@code Byte}; {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.parseByte(System.String)">
            Parses the specified string as a signed decimal byte value. The ASCII
            character \u002d ('-') is recognized as the minus sign.
            
            @param string
                       the string representation of a single byte value.
            @return the primitive byte value represented by {@code string}.
            @throws NumberFormatException
                        if {@code string} is {@code null}, has a length of zero or
                        can not be parsed as a byte value.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Byte.parseByte(System.String,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.Byte.toString(System.Byte)">
            Returns a string containing a concise, human-readable description of the
            specified byte value.
            
            @param value
                       the byte to convert to a string.
            @return a printable representation of {@code value}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Byte.valueOf(System.String)">
            Parses the specified string as a signed decimal byte value.
            
            @param string
                       the string representation of a single byte value.
            @return a {@code Byte} instance containing the byte value represented by
                    {@code string}.
            @throws NumberFormatException
                        if {@code string} is {@code null}, has a length of zero or
                        can not be parsed as a byte value.
            @see #parseByte(String)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Byte.valueOf(System.String,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Byte.valueOf(System.Byte)" -->
        <member name="T:biz.ritter.javapi.util.zip.DeflaterOutputStream">
             This class provides an implementation of {@code FilterOutputStream} that
             compresses data using the <i>DEFLATE</i> algorithm. Basically it wraps the
             {@code Deflater} class and takes care of the buffering.
            
             @see Deflater
        </member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterOutputStream.buf">
            The buffer for the data to be written to.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.DeflaterOutputStream.def">
            The deflater used.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Deflater)">
             This constructor lets you pass the {@code Deflater} specifying the
             compression algorithm.
            
             @param os
                        is the {@code OutputStream} where to write the compressed data
                        to.
             @param def
                        is the specific {@code Deflater} that is used to compress
                        data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
             This is the most basic constructor. You only need to pass the {@code
             OutputStream} to which the compressed data shall be written to. The
             default settings for the {@code Deflater} and internal buffer are used.
             In particular the {@code Deflater} produces a ZLIB header in the output
             stream.
            
             @param os
                        is the OutputStream where to write the compressed data to.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Deflater,System.Int32)">
             This constructor lets you specify both the compression algorithm as well
             as the internal buffer size to be used.
            
             @param os
                        is the {@code OutputStream} where to write the compressed data
                        to.
             @param def
                        is the specific {@code Deflater} that will be used to compress
                        data.
             @param bsize
                        is the size to be used for the internal buffer.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.deflate">
             Compress the data in the input buffer and write it to the underlying
             stream.
            
             @throws IOException
                         If an error occurs during deflation.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.close">
             Writes any unwritten compressed data to the underlying stream, the closes
             all underlying streams. This stream can no longer be used after close()
             has been called.
            
             @throws IOException
                         If an error occurs while closing the data compression
                         process.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.finish">
             Writes any unwritten data to the underlying stream. Does not close the
             stream.
            
             @throws IOException
                         If an error occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DeflaterOutputStream.write(System.Byte[],System.Int32,System.Int32)">
             Compresses {@code nbytes} of data from {@code buf} starting at
             {@code off} and writes it to the underlying stream.
            
             @param buffer
                        the buffer of data to compress.
             @param off
                        offset in buffer to extract data from.
             @param nbytes
                        the number of bytes of data to read from the buffer.
             @throws IOException
                         If an error occurs during writing.
        </member>
        <member name="T:biz.ritter.javapi.util.MapEntry`2">
            MapEntry is an internal class which provides an implementation of Map.Entry.
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferUnderflowException">
            A <code>BufferUnderflowException</code> is thrown when elements are read
            from a buffer but there are not enough remaining elements in the buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferUnderflowException.#ctor">
            Constructs a <code>BufferUnderflowException</code>.
        </member>
        <member name="T:biz.ritter.javapi.math.Conversion">
            Static library that provides {@link BigInteger} base conversion from/to any
            integer represented in an {@link java.lang.String} Object.
        </member>
        <member name="M:biz.ritter.javapi.math.Conversion.#ctor">
            Just to denote that this class can't be instantiated 
        </member>
        <member name="F:biz.ritter.javapi.math.Conversion.digitFitInInt">
            Holds the maximal exponent for each radix, so that radix<sup>digitFitInInt[radix]</sup>
            fit in an {@code int} (32 bits).
        </member>
        <member name="F:biz.ritter.javapi.math.Conversion.bigRadices">
            bigRadices values are precomputed maximal powers of radices (integer
            numbers from 2 to 36) that fit into unsigned int (32 bits). bigRadices[0] =
            2 ^ 31, bigRadices[8] = 10 ^ 9, etc.
        </member>
        <member name="M:biz.ritter.javapi.math.Conversion.bigInteger2String(biz.ritter.javapi.math.BigInteger,System.Int32)">
            @see BigInteger#toString(int) 
        </member>
        <member name="M:biz.ritter.javapi.math.Conversion.toDecimalScaledString(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Builds the correspondent {@code String} representation of {@code val}
            being scaled by {@code scale}.
            
            @see BigInteger#toString()
            @see BigDecimal#toString()
        </member>
        <member name="M:biz.ritter.javapi.math.Conversion.bigInteger2Double(biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#doubleValue() 
        </member>
        <member name="T:biz.ritter.javapi.lang.IllegalMonitorStateException">
            Thrown when a monitor operation is attempted when the monitor is not in the
            correct state, for example when a thread attempts to exit a monitor which it
            does not own.
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalMonitorStateException.#ctor">
            Constructs a new {@code IllegalMonitorStateException} that includes the
            current stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalMonitorStateException.#ctor(System.String)">
            Constructs a new {@code IllegalArgumentException} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.zip.ZipInputStream" -->
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
             Constructs a new {@code ZipInputStream} from the specified input stream.
            
             @param stream
                        the input stream to representing a ZIP archive.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.close">
             Closes this {@code ZipInputStream}.
            
             @throws IOException
                         if an {@code IOException} occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.closeEntry">
             Closes the current ZIP entry and positions to read the next entry.
            
             @throws IOException
                         if an {@code IOException} occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.getNextEntry">
             Reads the next entry from this {@code ZipInputStream} or {@code null} if
             no more entries are present.
            
             @return the next {@code ZipEntry} contained in the input stream.
             @throws IOException
                         if an {@code IOException} occurs.
             @see ZipEntry
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.read(System.Byte[],System.Int32,System.Int32)">
             Reads up to the specified number of uncompressed bytes into the buffer
             starting at the offset.
            
             @param buffer
                        a byte array
             @param start
                        the starting offset into the buffer
             @param length
                        the number of bytes to read
             @return the number of bytes read
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.skip(System.Int64)">
             Skips up to the specified number of bytes in the current ZIP entry.
            
             @param value
                        the number of bytes to skip.
             @return the number of bytes skipped.
             @throws IOException
                         if an {@code IOException} occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.available">
             Returns 0 if the {@code EOF} has been reached, otherwise returns 1.
            
             @return 0 after {@code EOF} of current entry, 1 otherwise.
             @throws IOException
                         if an IOException occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipInputStream.createZipEntry(System.String)">
             creates a {@link ZipEntry } with the given name.
            
             @param name
                        the name of the entry.
             @return the created {@code ZipEntry}.
        </member>
        <member name="F:biz.ritter.javapi.text.CharacterIteratorConstants.DONE">
            A constant which indicates that there is no character at the current
            index.
        </member>
        <member name="T:biz.ritter.javapi.text.AttributedString">
            Holds a string with attributes describing the characters of
            this string.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(biz.ritter.javapi.text.AttributedCharacterIterator)">
             Constructs an {@code AttributedString} from an {@code
             AttributedCharacterIterator}, which represents attributed text.
            
             @param iterator
                        the {@code AttributedCharacterIterator} that contains the text
                        for this attributed string.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(biz.ritter.javapi.text.AttributedCharacterIterator,System.Int32,System.Int32)">
             Constructs an {@code AttributedString} from a range of the text contained
             in the specified {@code AttributedCharacterIterator}, starting at {@code
             start} and ending at {@code end}. All attributes will be copied to this
             attributed string.
            
             @param iterator
                        the {@code AttributedCharacterIterator} that contains the text
                        for this attributed string.
             @param start
                        the start index of the range of the copied text.
             @param end
                        the end index of the range of the copied text.
             @throws IllegalArgumentException
                         if {@code start} is less than first index of
                         {@code iterator}, {@code end} is greater than the last
                         index + 1 in {@code iterator} or if {@code start > end}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(biz.ritter.javapi.text.AttributedCharacterIterator,System.Int32,System.Int32,biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute[])">
             Constructs an {@code AttributedString} from a range of the text contained
             in the specified {@code AttributedCharacterIterator}, starting at {@code
             start}, ending at {@code end} and it will copy the attributes defined in
             the specified set. If the set is {@code null} then all attributes are
             copied.
            
             @param iterator
                        the {@code AttributedCharacterIterator} that contains the text
                        for this attributed string.
             @param start
                        the start index of the range of the copied text.
             @param end
                        the end index of the range of the copied text.
             @param attributes
                        the set of attributes that will be copied, or all if it is
                        {@code null}.
             @throws IllegalArgumentException
                         if {@code start} is less than first index of
                         {@code iterator}, {@code end} is greater than the last index +
                         1 in {@code iterator} or if {@code start > end}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(System.String)">
             Creates an {@code AttributedString} from the given text.
            
             @param value
                        the text to take as base for this attributed string.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.#ctor(System.String,biz.ritter.javapi.util.Map{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object})">
             Creates an {@code AttributedString} from the given text and the
             attributes. The whole text has the given attributes applied.
            
             @param value
                        the text to take as base for this attributed string.
             @param attributes
                        the attributes that the text is associated with.
             @throws IllegalArgumentException
                         if the length of {@code value} is 0 but the size of {@code
                         attributes} is greater than 0.
             @throws NullPointerException
                         if {@code value} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.addAttribute(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object)">
             Applies a given attribute to this string.
            
             @param attribute
                        the attribute that will be applied to this string.
             @param value
                        the value of the attribute that will be applied to this
                        string.
             @throws IllegalArgumentException
                         if the length of this attributed string is 0.
             @throws NullPointerException
                         if {@code attribute} is {@code null}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.text.AttributedString.addAttribute(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.text.AttributedString.addAttributes(biz.ritter.javapi.util.Map{biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute,System.Object},System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.text.AttributedString.getIterator">
             Returns an {@code AttributedCharacterIterator} that gives access to the
             complete content of this attributed string.
            
             @return the newly created {@code AttributedCharacterIterator}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.getIterator(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute[])">
             Returns an {@code AttributedCharacterIterator} that gives access to the
             complete content of this attributed string. Only attributes contained in
             {@code attributes} are available from this iterator if they are defined
             for this text.
            
             @param attributes
                        the array containing attributes that will be in the new
                        iterator if they are defined for this text.
             @return the newly created {@code AttributedCharacterIterator}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedString.getIterator(biz.ritter.javapi.text.AttributedCharacterIteratorNS.Attribute[],System.Int32,System.Int32)">
             Returns an {@code AttributedCharacterIterator} that gives access to the
             contents of this attributed string starting at index {@code start} up to
             index {@code end}. Only attributes contained in {@code attributes} are
             available from this iterator if they are defined for this text.
            
             @param attributes
                        the array containing attributes that will be in the new
                        iterator if they are defined for this text.
             @param start
                        the start index of the iterator on the underlying text.
             @param end
                        the end index of the iterator on the underlying text.
             @return the newly created {@code AttributedCharacterIterator}.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.clone">
            Returns a new {@code AttributedIterator} with the same source string,
            begin, end, and current index as this attributed iterator.
            
            @return a shallow copy of this attributed iterator.
            @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getBeginIndex">
            Returns the begin index in the source string.
            
            @return the index of the first character to iterate.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getEndIndex">
            Returns the end index in the source String.
            
            @return the index one past the last character to iterate.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getIndex">
            Returns the current index in the source String.
            
            @return the current index.
        </member>
        <member name="M:biz.ritter.javapi.text.AttributedIterator.getAllAttributeKeys">
             Returns a set of attributes present in the {@code AttributedString}.
             An empty set returned indicates that no attributes where defined.
            
             @return a set of attribute keys that may be empty.
        </member>
        <member name="T:biz.ritter.javapi.math.BigInteger">
            <summary>
             This class represents immutable integer numbers of arbitrary length. Large
             numbers are typically used in security applications and therefore BigIntegers
             offer dedicated functionality like the generation of large prime numbers or
             the computation of modular inverse.
             <p/>
             Since the class was modeled to offer all the functionality as the {@link Integer}
             class does, it provides even methods that operate bitwise on a two's
             complement representation of large integers. Note however that the
             implementations favors an internal representation where magnitude and sign
             are treated separately. Hence such operations are inefficient and should be
             discouraged. In simple words: Do NOT implement any bit fields based on
             BigInteger.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.EQUALS">
            The {@code BigInteger} constant 0 used for comparison. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.GREATER">
            The {@code BigInteger} constant 1 used for comparison. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.LESS">
            The {@code BigInteger} constant -1 used for comparison. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.serialVersionUID">
            This is the serialVersionUID used by the sun implementation. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.digits">
            
             The magnitude of this big integer. This array holds unsigned little
             endian digits. For example:
               {@code 13} is represented as [ 13 ]
               {@code -13} is represented as [ 13 ]
               {@code 2^32 + 13} is represented as [ 13, 1 ]
               {@code 2^64 + 13} is represented as [ 13, 0, 1 ]
               {@code 2^31} is represented as [ Integer.MIN_VALUE ]
             The magnitude array may be longer than strictly necessary, which results
             in additional trailing zeros.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.numberLength">
            The length of this in measured in ints. Can be less than digits.length(). */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.sign">
            The sign of this. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.ZERO">
            
             The {@code BigInteger} constant 0.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.ONE">
            
             The {@code BigInteger} constant 1.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.TEN">
            
             The {@code BigInteger} constant 10.
            
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.MINUS_ONE">
            The {@code BigInteger} constant -1. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.SMALL_VALUES">
            All the {@code BigInteger} numbers in the range [0,10] are cached. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.signumJ">
            sign field, used for serialization. */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.magnitude">
            absolute value field, used for serialization */
        </member>
        <member name="F:biz.ritter.javapi.math.BigInteger.hashCode">
            Cache for the hash code. */
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,biz.ritter.javapi.util.Random)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32,biz.ritter.javapi.util.Random)" -->
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.String)">
            <summary>
             Constructs a new {@code BigInteger} instance from the string
             representation. The string representation consists of an optional minus
             sign followed by a non-empty sequence of decimal digits.
            
             @param val
                        string representation of the new {@code BigInteger}.
             @throws NullPointerException
                         if {@code val == null}.
             @throws NumberFormatException
                         if {@code val} is not a valid representation of a {@code
                         BigInteger}.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.#ctor(System.String,System.Int32)" -->
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Byte[])">
            <summary>
             Constructs a new {@code BigInteger} instance with the given sign and the
             given magnitude. The sign is given as an integer (-1 for negative, 0 for
             zero, 1 for positive). The magnitude is specified as a byte array. The
             most significant byte is the entry at index 0.
            
             @param signum
                        sign of the new {@code BigInteger} (-1 for negative, 0 for
                        zero, 1 for positive).
             @param magnitude
                        magnitude of the new {@code BigInteger} with the most
                        significant byte first.
             @throws NullPointerException
                         if {@code magnitude == null}.
             @throws NumberFormatException
                         if the sign is not one of -1, 0, 1 or if the sign is zero and
                         the magnitude contains non-zero entries.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Byte[])">
            <summary>
             Constructs a new {@code BigInteger} from the given two's complement
             representation. The most significant byte is the entry at index 0. The
             most significant bit of this entry determines the sign of the new {@code
             BigInteger} instance. The given array must not be empty.
            
             @param val
                        two's complement representation of the new {@code BigInteger}.
             @throws NullPointerException
                         if {@code val == null}.
             @throws NumberFormatException
                         if the length of {@code val} is zero.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32)">
            <summary>
             Constructs a number which array is of size 1.
             
             @param sign
                        the sign of the number
             @param value
                        the only one digit of array
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32,System.Int32[])">
            <summary>
             Constructs a number without to create new space. This construct should be
             used only if the three fields of representation are known.
             
             @param sign
                        the sign of the number
             @param numberLength
                        the length of the internal array
             @param digits
                        a reference of some array created before
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int64)">
            <summary>
             Creates a new {@code BigInteger} whose value is equal to the specified
             {@code long}.
             
             @param sign
                        the sign of the number
             @param val
                        the value of the new {@code BigInteger}.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.#ctor(System.Int32,System.Int32[])">
            <summary>
             Creates a new {@code BigInteger} with the given sign and magnitude. This
             constructor does not create a copy, so any changes to the reference will
             affect the new number.
             
             @param signum
                        The sign of the number represented by {@code digits}
             @param digits
                        The magnitude of the number
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.toByteArray">
            
             Returns the two's complement representation of this BigInteger in a byte
             array.
            
             @return two's complement representation of {@code this}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.setFromString(biz.ritter.javapi.math.BigInteger,System.String,System.Int32)">
            @see BigInteger#BigInteger(String, int) */
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.abs">
            
             Returns a (new) {@code BigInteger} whose value is the absolute value of
             {@code this}.
            
             @return {@code abs(this)}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.negate">
            
             Returns a new {@code BigInteger} whose value is the {@code -this}.
            
             @return {@code -this}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.add(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this + val}.
            
             @param val
                        value to be added to {@code this}.
             @return {@code this + val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.subtract(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this - val}.
            
             @param val
                        value to be subtracted from {@code this}.
             @return {@code this - val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.signum" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.shiftRight(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.shiftLeft(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.bitLength" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.testBit(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.setBit(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.clearBit(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.flipBit(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.getLowestSetBit" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.bitCount" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.not" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.and(biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.or(biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.xor(biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.andNot(biz.ritter.javapi.math.BigInteger)" -->
        <member name="M:biz.ritter.javapi.math.BigInteger.intValue">
            
             Returns this {@code BigInteger} as an int value. If {@code this} is too
             big to be represented as an int, then {@code this} % 2^32 is returned.
            
             @return this {@code BigInteger} as an int value.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.longValue">
            
             Returns this {@code BigInteger} as an long value. If {@code this} is too
             big to be represented as an long, then {@code this} % 2^64 is returned.
            
             @return this {@code BigInteger} as a long value.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.floatValue">
            
             Returns this {@code BigInteger} as an float value. If {@code this} is too
             big to be represented as an float, then {@code Float.POSITIVE_INFINITY}
             or {@code Float.NEGATIVE_INFINITY} is returned. Note, that not all
             integers x in the range [-Float.MAX_VALUE, Float.MAX_VALUE] can be
             represented as a float. The float representation has a mantissa of length
             24. For example, 2^24+1 = 16777217 is returned as float 16777216.0.
            
             @return this {@code BigInteger} as a float value.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.doubleValue">
            
             Returns this {@code BigInteger} as an double value. If {@code this} is
             too big to be represented as an double, then {@code
             Double.POSITIVE_INFINITY} or {@code Double.NEGATIVE_INFINITY} is
             returned. Note, that not all integers x in the range [-Double.MAX_VALUE,
             Double.MAX_VALUE] can be represented as a double. The double
             representation has a mantissa of length 53. For example, 2^53+1 =
             9007199254740993 is returned as double 9007199254740992.0.
            
             @return this {@code BigInteger} as a double value
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.compareTo(biz.ritter.javapi.math.BigInteger)" -->
        <member name="M:biz.ritter.javapi.math.BigInteger.min(biz.ritter.javapi.math.BigInteger)">
            
             Returns the minimum of this {@code BigInteger} and {@code val}.
            
             @param val
                        value to be used to compute the minimum with {@code this}.
             @return {@code min(this, val)}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.max(biz.ritter.javapi.math.BigInteger)">
            
             Returns the maximum of this {@code BigInteger} and {@code val}.
            
             @param val
                        value to be used to compute the maximum with {@code this}
             @return {@code max(this, val)}
             @throws NullPointerException
                         if {@code val == null}
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.GetHashCode">
            
             Returns a hash code for this {@code BigInteger}.
            
             @return hash code for {@code this}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.Equals(System.Object)">
            
             Returns {@code true} if {@code x} is a BigInteger instance and if this
             instance is equal to this {@code BigInteger}.
            
             @param x
                        object to be compared with {@code this}.
             @return true if {@code x} is a BigInteger and {@code this == x},
                      {@code false} otherwise.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.ToString">
            
             Returns a string representation of this {@code BigInteger} in decimal
             form.
            
             @return a string representation of {@code this} in decimal form.
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.toString(System.Int32)" -->
        <member name="M:biz.ritter.javapi.math.BigInteger.gcd(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is greatest common divisor
             of {@code this} and {@code val}. If {@code this==0} and {@code val==0}
             then zero is returned, otherwise the result is positive.
            
             @param val
                        value with which the greatest common divisor is computed.
             @return {@code gcd(this, val)}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.multiply(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this * val}.
            
             @param val
                        value to be multiplied with {@code this}.
             @return {@code this * val}.
             @throws NullPointerException
                         if {@code val == null}.
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.pow(System.Int32)" -->
        <member name="M:biz.ritter.javapi.math.BigInteger.divideAndRemainder(biz.ritter.javapi.math.BigInteger)">
            
             Returns a {@code BigInteger} array which contains {@code this / divisor}
             at index 0 and {@code this % divisor} at index 1.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code [this / divisor, this % divisor]}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @see #divide
             @see #remainder
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.divide(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this / divisor}.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.remainder(biz.ritter.javapi.math.BigInteger)">
            
             Returns a new {@code BigInteger} whose value is {@code this % divisor}.
             Regarding signs this methods has the same behavior as the % operator on
             int's, i.e. the sign of the remainder is the same as the sign of this.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this % divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.modInverse(biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.modPow(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.mod(biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.isProbablePrime(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.nextProbablePrime" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigInteger.probablePrime(System.Int32,biz.ritter.javapi.util.Random)" -->
        <member name="M:biz.ritter.javapi.math.BigInteger.cutOffLeadingZeroes">
            Decreases {@code numberLength} if there are zero high elements. */
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.isOne">
            Tests if {@code this.abs()} is equals to {@code ONE} */
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.putBytesPositiveToIntegers(System.Byte[])">
            
             Puts a big-endian byte array into a little-endian int array.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.putBytesNegativeToIntegers(System.Byte[])">
            
             Puts a big-endian byte array into a little-endian applying two
             complement.
            
        </member>
        <member name="M:biz.ritter.javapi.math.BigInteger.copy">
            
             Returns a copy of the current instance to achieve immutability
            
        </member>
        <member name="T:biz.ritter.javapi.lang.ClassCastException">
            Thrown when a program attempts to cast a an object to a type with which it is
            not compatible.
        </member>
        <member name="M:biz.ritter.javapi.lang.ClassCastException.#ctor">
            Constructs a new {@code ClassCastException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.ClassCastException.#ctor(System.String)">
            Constructs a new {@code ClassCastException} with the current stack trace
            and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="M:biz.ritter.javapi.lang.ClassCastException.#ctor(System.Type,System.Type)">
            Constructs a new {@code ClassCastException} with the current stack trace
            and a detail message based on the source and target class.
            
            @param instanceClass
                       the class being cast from.
            @param castClass
                       the class being cast to.
        </member>
        <member name="T:biz.ritter.javapi.io.InputStreamReader">
            A class for turning a byte stream into a character stream. Data read from the
            source input stream is converted into characters by either a default or a
            provided character converter. The default encoding is taken from the
            "file.encoding" system property. {@code InputStreamReader} contains a buffer
            of bytes read from the source stream and converts these into characters as
            needed. The buffer size is 8K.
            
            @see OutputStreamWriter
        </member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream)">
            Constructs a new {@code InputStreamReader} on the {@link InputStream}
            {@code in}. This constructor sets the character converter to the encoding
            specified in the "file.encoding" property and falls back to ISO 8859_1
            (ISO-Latin-1) if the property doesn't exist.
            
            @param in
                       the input stream from which to read characters.
        </member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream,System.String)">
            Constructs a new InputStreamReader on the InputStream {@code in}. The
            character converter that is used to decode bytes into characters is
            identified by name by {@code enc}. If the encoding cannot be found, an
            UnsupportedEncodingException error is thrown.
            
            @param in
                       the InputStream from which to read characters.
            @param enc
                       identifies the character converter to use.
            @throws NullPointerException
                        if {@code enc} is {@code null}.
            @throws UnsupportedEncodingException
                        if the encoding specified by {@code enc} cannot be found.
        </member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.nio.charset.CharsetDecoder)">
            Constructs a new InputStreamReader on the InputStream {@code in} and
            CharsetDecoder {@code dec}.
            
            @param in
                       the source InputStream from which to read characters.
            @param dec
                       the CharsetDecoder used by the character conversion.
        </member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.nio.charset.Charset)">
            Constructs a new InputStreamReader on the InputStream {@code in} and
            Charset {@code charset}.
            
            @param in
                       the source InputStream from which to read characters.
            @param charset
                       the Charset that defines the character converter
        </member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.close">
            Closes this reader. This implementation closes the source InputStream and
            releases all local storage.
            
            @throws IOException
                        if an error occurs attempting to close this reader.
        </member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.getEncoding">
            Returns the name of the encoding used to convert bytes into characters.
            The value {@code null} is returned if this reader has been closed.
            
            @return the name of the character converter or {@code null} if this
                    reader is closed.
        </member>
        <member name="M:biz.ritter.javapi.io.InputStreamReader.read">
            Reads a single character from this reader and returns it as an integer
            with the two higher-order bytes set to 0. Returns -1 if the end of the
            reader has been reached. The byte value is either obtained from
            converting bytes in this reader's buffer or by first filling the buffer
            from the source InputStream and then reading from the buffer.
            
            @return the character read or -1 if the end of the reader has been
                    reached.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.InputStreamReader.read(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.InputStreamReader.ready">
            Indicates whether this reader is ready to be read without blocking. If
            the result is {@code true}, the next {@code read()} will not block. If
            the result is {@code false} then this reader may or may not block when
            {@code read()} is called. This implementation returns {@code true} if
            there are bytes available in the buffer or the source stream has bytes
            available.
            
            @return {@code true} if the receiver will not block when {@code read()}
                    is called, {@code false} if unknown or blocking will occur.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
        </member>
        <member name="T:biz.ritter.javapi.io.BufferedInputStream">
             Wraps an existing {@link InputStream} and <em>buffers</em> the input.
             Expensive interaction with the underlying input stream is minimized, since
             most (smaller) requests can be satisfied by accessing the buffer alone. The
             drawback is that some extra space is required to hold the buffer and that
             copying takes place when filling that buffer, but this is usually outweighed
             by the performance benefits.
             
             <p/>A typical application pattern for the class looks like this:<p/>
            
             <pre>
             BufferedInputStream buf = new BufferedInputStream(new FileInputStream(&quot;file.java&quot;));
             </pre>
            
             @see BufferedOutputStream
        </member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.buf">
            The buffer containing the current bytes read from the target InputStream.
        </member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.count">
            The total number of bytes inside the byte array {@code buf}.
        </member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.marklimit">
            The current limit, which when passed, invalidates the current mark.
        </member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.markpos">
            The currently marked position. -1 indicates no mark has been set or the
            mark has been invalidated.
        </member>
        <member name="F:biz.ritter.javapi.io.BufferedInputStream.pos">
            The current position within the byte array {@code buf}.
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
            Constructs a new {@code BufferedInputStream} on the {@link InputStream}
            {@code in}. The default buffer size (8 KB) is allocated and all reads
            can now be filtered through this stream.
            
            @param in
                       the InputStream the buffer reads from.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedInputStream.#ctor(biz.ritter.javapi.io.InputStream,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.available">
            Returns the number of bytes that are available before this stream will
            block. This method returns the number of bytes available in the buffer
            plus those available in the source stream.
            
            @return the number of bytes available before blocking.
            @throws IOException
                        if this stream is closed.
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.close">
            Closes this stream. The source stream is closed and any resources
            associated with it are released.
            
            @throws IOException
                        if an error occurs while closing this stream.
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.mark(System.Int32)">
            Sets a mark position in this stream. The parameter {@code readlimit}
            indicates how many bytes can be read before a mark is invalidated.
            Calling {@code reset()} will reposition the stream back to the marked
            position if {@code readlimit} has not been surpassed. The underlying
            buffer may be increased in size to allow {@code readlimit} number of
            bytes to be supported.
            
            @param readlimit
                       the number of bytes that can be read before the mark is
                       invalidated.
            @see #reset()
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.markSupported">
            Indicates whether {@code BufferedInputStream} supports the {@code mark()}
            and {@code reset()} methods.
            
            @return {@code true} for BufferedInputStreams.
            @see #mark(int)
            @see #reset()
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.read">
            Reads a single byte from this stream and returns it as an integer in the
            range from 0 to 255. Returns -1 if the end of the source string has been
            reached. If the internal buffer does not contain any available bytes then
            it is filled from the source stream and the first byte is returned.
            
            @return the byte read or -1 if the end of the source stream has been
                    reached.
            @throws IOException
                        if this stream is closed or another IOException occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedInputStream.read(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.reset">
            Resets this stream to the last marked location.
            
            @throws IOException
                        if this stream is closed, no mark has been set or the mark is
                        no longer valid because more than {@code readlimit} bytes
                        have been read since setting the mark.
            @see #mark(int)
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedInputStream.skip(System.Int64)">
            Skips {@code amount} number of bytes in this stream. Subsequent
            {@code read()}'s will not return these bytes unless {@code reset()} is
            used.
            
            @param amount
                       the number of bytes to skip. {@code skip} does nothing and
                       returns 0 if {@code amount} is less than zero.
            @return the number of bytes actually skipped.
            @throws IOException
                        if this stream is closed or another IOException occurs.
        </member>
        <member name="T:org.apache.harmony.archive.util.Util">
            Helpers for the archive module.
        </member>
        <member name="M:org.apache.harmony.archive.util.Util.asciiEndsWithIgnoreCase(System.String,System.String)">
            Returns whether the given source string ends with the suffix, ignoring
            case and assuming that the strings are ascii encoded.
            
            @param source
                       the string to match.
            @param suffix
                       the suffix to test.
            @return {@code true} if the source does end with the given suffix, or
                    {@code false} if not.
        </member>
        <member name="M:org.apache.harmony.archive.util.Util.asciiEqualsIgnoreCase(System.Byte[],System.Byte[])">
            Compares the given byte arrays and returns whether they are equal,
            ignoring case differences and assuming they are ascii-encoded strings.
            
            @param buf1
                       first byte array to compare.
            @param buf2
                       second byte array to compare.
            @return the result of the comparison.
        </member>
        <member name="M:org.apache.harmony.archive.util.Util.asciiEqualsIgnoreCase(System.String,System.String)">
            Compares the given strings and returns whether they are equal, ignoring
            case differences and assuming they are ascii-encoded strings.
            
            @param s1
                       first string to compare.
            @param s2
                       second string to compare.
            @return the result of the comparison.
        </member>
        <member name="T:biz.ritter.javapi.util.zip.ZipError">
            This error is thrown when an unrecoverable ZIP error has occurred.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipError.#ctor(System.String)">
            the Constructor
            
            @param s
                       the message
        </member>
        <member name="T:biz.ritter.javapi.util.TreeSet`1">
            TreeSet is an implementation of SortedSet. All optional operations (adding
            and removing) are supported. The elements can be any objects which are
            comparable to each other either using their natural order or a specified
            Comparator.
            
            @since 1.2
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.NavigableSet`1" -->
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.pollFirst">
            Deletes and answers the smallest element, or null if the set is empty.
            
            @return the smallest element, or null if the set is empty
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.pollLast">
            Deletes and answers the biggest element, or null if the set is empty.
            
            @return the biggest element, or null if the set is empty
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.higher(`0)">
            Answers the smallest element bigger than the specified one, or null if no
            such element.
            
            @param e
                       the specified element
            @return the smallest element bigger than the specified one, or null if no
                    such element
            @throws ClassCastException
                        if the element cannot be compared with the ones in the set
            @throws NullPointerException
                        if the element is null and the set can not contain null
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.ceiling(`0)">
            Answers the smallest element bigger than or equal to the specified one,
            or null if no such element.
            
            @param e
                       the specified element
            @return the smallest element bigger than or equal to the specified one,
                    or null if no such element
            @throws ClassCastException
                        if the element cannot be compared with the ones in the set
            @throws NullPointerException
                        if the element is null and the set can not contain null
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.lower(`0)">
            Answers the biggest element less than the specified one, or null if no
            such element.
            
            @param e
                       the specified element
            @return the biggest element less than the specified one, or null if no
                    such element
            @throws ClassCastException
                        if the element cannot be compared with the ones in the set
            @throws NullPointerException
                        if the element is null and the set can not contain null
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.floor(`0)">
            Answers the biggest element less than or equal to the specified one, or
            null if no such element.
            
            @param e
                       the specified element
            @return the biggest element less than or equal to the specified one, or
                    null if no such element
            @throws ClassCastException
                        if the element cannot be compared with the ones in the set
            @throws NullPointerException
                        if the element is null and the set can not contain null
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.descendingIterator">
            Answers a descending iterator of this set.
            
            @return the descending iterator
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.descendingSet">
            Answers a reverse order view of this set.
            
            @return the reverse order view
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.subSet(`0,System.Boolean,`0,System.Boolean)">
            Answers a NavigableSet of the specified portion of this set which
            contains elements greater (or equal to, depends on startInclusive) the
            start element but less than (or equal to, depends on endInclusive) the
            end element. The returned NavigableSet is backed by this set so changes
            to one are reflected by the other.
            
            @param start
                       the start element
            @param startInclusive
                       true if the start element is in the returned set
            @param end
                       the end element
            @param endInclusive
                       true if the end element is in the returned set
            @return the subset
            
            @throws ClassCastException
                        when the start or end object cannot be compared with the
                        elements in this set
            @throws NullPointerException
                        when the start or end object is null and the set cannot
                        contain null
            @throws IllegalArgumentException
                        when the start is bigger than end; or start or end is out of
                        range and the set has a range
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.headSet(`0,System.Boolean)">
            Answers a NavigableSet of the specified portion of this set which
            contains elements less than (or equal to, depends on endInclusive) the
            end element. The returned NavigableSet is backed by this set so changes
            to one are reflected by the other.
            
            @param end
                       the end element
            @param endInclusive
                       true if the end element is in the returned set
            @return the subset
            
            @throws ClassCastException
                        when the end object cannot be compared with the elements in
                        this set
            @throws NullPointerException
                        when the end object is null and the set cannot contain handle
                        null
            @throws IllegalArgumentException
                        when end is out of range and the set has a range
        </member>
        <member name="M:biz.ritter.javapi.util.NavigableSet`1.tailSet(`0,System.Boolean)">
            Answers a NavigableSet of the specified portion of this set which
            contains elements greater (or equal to, depends on startInclusive) the
            start element. The returned NavigableSet is backed by this set so changes
            to one are reflected by the other.
            
            @param start
                       the start element
            @param startInclusive
                       true if the start element is in the returned set
            @return the subset
            
            @throws ClassCastException
                        when the start object cannot be compared with the elements in
                        this set
            @throws NullPointerException
                        when the start object is null and the set cannot contain null
            @throws IllegalArgumentException
                        when start is out of range and the set has a range
        </member>
        <member name="F:biz.ritter.javapi.util.TreeSet`1.backingMap">
            Keys are this set's elements. Values are always Boolean.TRUE 
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor">
            Constructs a new empty instance of {@code TreeSet} which uses natural
            ordering.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
            Constructs a new instance of {@code TreeSet} which uses natural ordering
            and containing the unique elements in the specified collection.
            
            @param collection
                       the collection of elements to add.
            @throws ClassCastException
                           when an element in the collection does not implement the
                           Comparable interface, or the elements in the collection
                           cannot be compared.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor(biz.ritter.javapi.util.Comparator{`0})">
            Constructs a new empty instance of {@code TreeSet} which uses the
            specified comparator.
            
            @param comparator
                       the comparator to use.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.#ctor(biz.ritter.javapi.util.SortedSet{`0})">
            Constructs a new instance of {@code TreeSet} containing the elements of
            the specified SortedSet and using the same Comparator.
            
            @param set
                       the SortedSet of elements to add.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.add(`0)">
            Adds the specified object to this {@code TreeSet}.
            
            @param object
                       the object to add.
            @return {@code true} when this {@code TreeSet} did not already contain
                    the object, {@code false} otherwise.
            @throws ClassCastException
                        when the object cannot be compared with the elements in this
                        {@code TreeSet}.
            @throws NullPointerException
                        when the object is null and the comparator cannot handle
                        null.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.addAll(biz.ritter.javapi.util.Collection{`0})">
            Adds the objects in the specified collection to this {@code TreeSet}.
            
            @param collection
                       the collection of objects to add.
            @return {@code true} if this {@code TreeSet} was modified, {@code false}
                    otherwise.
            @throws ClassCastException
                        when an object in the collection cannot be compared with the
                        elements in this {@code TreeSet}.
            @throws NullPointerException
                        when an object in the collection is null and the comparator
                        cannot handle null.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.clear">
            Removes all elements from this {@code TreeSet}, leaving it empty.
            
            @see #isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.clone">
            Returns a new {@code TreeSet} with the same elements, size and comparator
            as this {@code TreeSet}.
            
            @return a shallow copy of this {@code TreeSet}.
            @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.comparator">
            Returns the comparator used to compare elements in this {@code TreeSet}.
            
            @return a Comparator or null if the natural ordering is used
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.contains(System.Object)">
            Searches this {@code TreeSet} for the specified object.
            
            @param object
                       the object to search for.
            @return {@code true} if {@code object} is an element of this
                    {@code TreeSet}, {@code false} otherwise.
            @throws ClassCastException
                        when the object cannot be compared with the elements in this
                        {@code TreeSet}.
            @throws NullPointerException
                        when the object is null and the comparator cannot handle
                        null.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.isEmpty">
            Returns true if this {@code TreeSet} has no element, otherwise false.
            
            @return true if this {@code TreeSet} has no element.
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.iterator">
            Returns an Iterator on the elements of this {@code TreeSet}.
            
            @return an Iterator on the elements of this {@code TreeSet}.
            @see Iterator
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.descendingIterator">
            {@inheritDoc}
            
            @see java.util.NavigableSet#descendingIterator()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.remove(System.Object)">
            Removes an occurrence of the specified object from this {@code TreeSet}.
            
            @param object
                       the object to remove.
            @return {@code true} if this {@code TreeSet} was modified, {@code false}
                    otherwise.
            @throws ClassCastException
                        when the object cannot be compared with the elements in this
                        {@code TreeSet}.
            @throws NullPointerException
                        when the object is null and the comparator cannot handle
                        null.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.size">
            Returns the number of elements in this {@code TreeSet}.
            
            @return the number of elements in this {@code TreeSet}.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.first">
            Answers the first element in this TreeSet.
            
            @return the first element
            
            @exception NoSuchElementException
                           when this TreeSet is empty
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.last">
            Answers the last element in this TreeSet.
            
            @return the last element
            
            @exception NoSuchElementException
                           when this TreeSet is empty
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.pollFirst">
            {@inheritDoc}
            
            @see java.util.NavigableSet#pollFirst()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.pollLast">
            {@inheritDoc}
            
            @see java.util.NavigableSet#pollLast()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.higher(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableSet#higher(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.lower(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableSet#lower(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.ceiling(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableSet#ceiling(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.floor(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableSet#floor(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.descendingSet">
            {@inheritDoc}
            
            @see java.util.NavigableSet#descendingSet()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.subSet(`0,System.Boolean,`0,System.Boolean)">
            {@inheritDoc}
            
            @see java.util.NavigableSet#subSet(Object, boolean, Object, boolean)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.headSet(`0,System.Boolean)">
            {@inheritDoc}
            
            @see java.util.NavigableSet#headSet(Object, boolean)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.tailSet(`0,System.Boolean)">
            {@inheritDoc}
            
            @see java.util.NavigableSet#tailSet(Object, boolean)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.subSet(`0,`0)">
            Answers a SortedSet of the specified portion of this TreeSet which
            contains elements greater or equal to the start element but less than the
            end element. The returned SortedSet is backed by this TreeSet so changes
            to one are reflected by the other.
            
            @param start
                       the start element
            @param end
                       the end element
            @return a subset where the elements are greater or equal to
                    <code>start</code> and less than <code>end</code>
            
            @exception ClassCastException
                           when the start or end object cannot be compared with the
                           elements in this TreeSet
            @exception NullPointerException
                           when the start or end object is null and the comparator
                           cannot handle null
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.headSet(`0)">
            Answers a SortedSet of the specified portion of this TreeSet which
            contains elements less than the end element. The returned SortedSet is
            backed by this TreeSet so changes to one are reflected by the other.
            
            @param end
                       the end element
            @return a subset where the elements are less than <code>end</code>
            
            @exception ClassCastException
                           when the end object cannot be compared with the elements
                           in this TreeSet
            @exception NullPointerException
                           when the end object is null and the comparator cannot
                           handle null
        </member>
        <member name="M:biz.ritter.javapi.util.TreeSet`1.tailSet(`0)">
            Answers a SortedSet of the specified portion of this TreeSet which
            contains elements greater or equal to the start element. The returned
            SortedSet is backed by this TreeSet so changes to one are reflected by
            the other.
            
            @param start
                       the start element
            @return a subset where the elements are greater or equal to
                    <code>start</code>
            
            @exception ClassCastException
                           when the start object cannot be compared with the elements
                           in this TreeSet
            @exception NullPointerException
                           when the start object is null and the comparator cannot
                           handle null
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.StringTokenizer" -->
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String)">
            Constructs a new {@code StringTokenizer} for the parameter string using
            whitespace as the delimiter. The {@code returnDelimiters} flag is set to
            {@code false}.
            
            @param string
                       the string to be tokenized.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String,System.String)">
            Constructs a new {@code StringTokenizer} for the parameter string using
            the specified delimiters. The {@code returnDelimiters} flag is set to
            {@code false}. If {@code delimiters} is {@code null}, this constructor
            doesn't throw an {@code Exception}, but later calls to some methods might
            throw a {@code NullPointerException}.
            
            @param string
                       the string to be tokenized.
            @param delimiters
                       the delimiters to use.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            Constructs a new {@code StringTokenizer} for the parameter string using
            the specified delimiters, returning the delimiters as tokens if the
            parameter {@code returnDelimiters} is {@code true}. If {@code delimiters}
            is null this constructor doesn't throw an {@code Exception}, but later
            calls to some methods might throw a {@code NullPointerException}.
            
            @param string
                       the string to be tokenized.
            @param delimiters
                       the delimiters to use.
            @param returnDelimiters
                       {@code true} to return each delimiter as a token.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.countTokens">
            Returns the number of unprocessed tokens remaining in the string.
            
            @return number of tokens that can be retreived before an {@code
                    Exception} will result from a call to {@code nextToken()}.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.hasMoreElements">
            Returns {@code true} if unprocessed tokens remain. This method is
            implemented in order to satisfy the {@code Enumeration} interface.
            
            @return {@code true} if unprocessed tokens remain.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.hasMoreTokens">
            Returns {@code true} if unprocessed tokens remain.
            
            @return {@code true} if unprocessed tokens remain.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.nextElement">
            Returns the next token in the string as an {@code Object}. This method is
            implemented in order to satisfy the {@code Enumeration} interface.
            
            @return next token in the string as an {@code Object}
            @throws NoSuchElementException
                           if no tokens remain.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.nextToken">
            Returns the next token in the string as a {@code String}.
            
            @return next token in the string as a {@code String}.
            @throws NoSuchElementException
                           if no tokens remain.
        </member>
        <member name="M:biz.ritter.javapi.util.StringTokenizer.nextToken(System.String)">
            Returns the next token in the string as a {@code String}. The delimiters
            used are changed to the specified delimiters.
            
            @param delims
                       the new delimiters to use.
            @return next token in the string as a {@code String}.
            @throws NoSuchElementException
                           if no tokens remain.
        </member>
        <member name="T:biz.ritter.javapi.nio.BufferFactory">
            <summary>
            Provide factory service of buffer classes.
            <p>
            Since all buffer impl classes are package private (except DirectByteBuffer),
            this factory is the only entrance to access buffer functions from outside of
            the impl package.
            </p>
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newByteBuffer(System.Byte[])">
            <summary>
            Returns a new byte buffer based on the specified byte array.
            
            @param array
                       The byte array
            @return A new byte buffer based on the specified byte array.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newByteBuffer(System.Int32)">
            <summary>
            Returns a new array based byte buffer with the specified capacity.
            
            @param capacity
                       The capacity of the new buffer
            @return A new array based byte buffer with the specified capacity.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(System.Char[])">
            <summary>
            Returns a new char buffer based on the specified char array.
            
            @param array
                       The char array
            @return A new char buffer based on the specified char array.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(biz.ritter.javapi.lang.CharSequence)">
            <summary>
            Returns a new readonly char buffer based on the specified char sequence.
            
            @param chseq
                       The char sequence
            @return A new readonly char buffer based on the specified char sequence.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.BufferFactory.newCharBuffer(System.Int32)">
            <summary>
            Returns a new array based char buffer with the specified capacity.
            
            @param capacity
                       The capacity of the new buffer
            @return A new array based char buffer with the specified capacity.
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.StringIndexOutOfBoundsException">
             Thrown by <code>String</code> methods to indicate that an index
             is either negative or greater than the size of the string.  For
             some methods such as the charAt method, this exception also is
             thrown when the index is equal to the size of the string.
            
             @author  unascribed
             @version 1.23, 11/17/05
             @see     java.lang.String#charAt(int)
             @since   JDK1.0
        </member>
        <member name="M:biz.ritter.javapi.lang.StringIndexOutOfBoundsException.#ctor">
             Constructs a <code>StringIndexOutOfBoundsException</code> with no 
             detail message. 
            
             @since   JDK1.0.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringIndexOutOfBoundsException.#ctor(System.String)">
             Constructs a <code>StringIndexOutOfBoundsException</code> with 
             the specified detail message. 
            
             @param   s   the detail message.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringIndexOutOfBoundsException.#ctor(System.Int32)">
             Constructs a new <code>StringIndexOutOfBoundsException</code> 
             class with an argument indicating the illegal index. 
            
             @param   index   the illegal index.
        </member>
        <member name="T:biz.ritter.javapi.math.BitLevel">
            Static library that provides all the <b>bit level</b> operations for
            {@link BigInteger}. The operations are:
            <ul type="circle">
            <li>Left Shifting</li>
            <li>Right Shifting</li>
            <li>Bit clearing</li>
            <li>Bit setting</li>
            <li>Bit counting</li>
            <li>Bit testing</li>
            <li>Getting of the lowest bit set</li>
            </ul>
            All operations are provided in immutable way, and some in both mutable and
            immutable.
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.#ctor">
            Just to denote that this class can't be instantiated. 
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.bitLength(biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#bitLength() 
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.bitCount(biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#bitCount() 
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.testBit(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Performs a fast bit testing for positive numbers. The bit to to be tested
            must be in the range {@code [0, val.bitLength()-1]}
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.nonZeroDroppedBits(System.Int32,System.Int32[])">
            Check if there are 1s in the lowest bits of this BigInteger
            
            @param numberOfBits the number of the lowest bits to check
            @return false if all bits are 0s, true otherwise
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftLeft(biz.ritter.javapi.math.BigInteger,System.Int32)">
            @see BigInteger#shiftLeft(int) 
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BitLevel.inplaceShiftLeft(biz.ritter.javapi.math.BigInteger,System.Int32)" -->
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftLeft(System.Int32[],System.Int32[],System.Int32,System.Int32)">
            Abstractly shifts left an array of integers in little endian (i.e. shift
            it right). Total shift distance in bits is intCount * 32 + count
            
            @param result the destination array
            @param source the source array
            @param intCount the shift distance in integers
            @param count an additional shift distance in bits
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftLeftOneBit(System.Int32[],System.Int32[],System.Int32)">
             Shifts the source digits left one bit, creating a value whose magnitude
             is doubled.
            
             @param result an array of digits that will hold the computed result when
                  this method returns. The size of this array is {@code srcLen + 1},
                  and the format is the same as {@link BigInteger#digits}.
             @param source the array of digits to shift left, in the same format as
                  {@link BigInteger#digits}.
             @param srcLen the length of {@code source}; may be less than {@code
                  source.length}
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftRight(biz.ritter.javapi.math.BigInteger,System.Int32)">
            @see BigInteger#shiftRight(int) 
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.inplaceShiftRight(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Performs {@code val >>= count} where {@code val} is a positive number.
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.shiftRight(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            Shifts right an array of integers. Total shift distance in bits is
            intCount * 32 + count.
            
            @param result
                       the destination array
            @param resultLen
                       the destination array's length
            @param source
                       the source array
            @param intCount
                       the number of elements to be shifted
            @param count
                       the number of bits to be shifted
            @return dropped bit's are all zero (i.e. remaider is zero)
        </member>
        <member name="M:biz.ritter.javapi.math.BitLevel.flipBit(biz.ritter.javapi.math.BigInteger,System.Int32)">
            Performs a flipBit on the BigInteger, returning a BigInteger with the the
            specified bit flipped.
            @param intCount: the index of the element of the digits array where the operation will be performed
            @param bitNumber: the bit's position in the intCount element
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.TYPE">
             The {@link Class} object that represents the primitive type {@code
             double}.
            
             @since 1.1
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.MAX_VALUE">
            Constant for the maximum {@code double} value, (2 - 2<sup>-52</sup>) *
            2<sup>1023</sup>.
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.MIN_VALUE">
            Constant for the minimum {@code double} value, 2<sup>-1074</sup>.
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.NaN">
            Constant for the Not-a-Number (NaN) value of the {@code double} type.
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.POSITIVE_INFINITY">
            Constant for the Positive Infinity value of the {@code double} type.
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.MAX_EXPONENT">
            <p>
            Maximum exponent that a finite double variable may have.
            </p>
            @since 1.6
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.MIN_EXPONENT">
            <p>
            Minimum exponent that a finite double variable may have.
            </p>
            @since 1.6
        </member>
        <member name="F:biz.ritter.javapi.lang.Double.NEGATIVE_INFINITY">
            Constant for the Negative Infinity value of the {@code double} type.
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.isNaN">
            Indicates whether this object is a <em>Not-a-Number (NaN)</em> value.
            
            @return {@code true} if this double is <em>Not-a-Number</em>;
                    {@code false} if it is a (potentially infinite) double number.
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.longBitsToDouble(System.Int64)">
            Converts the specified IEEE 754 floating-point double precision bit
            pattern to a Java double value.
            
            @param bits
                       the IEEE 754 floating-point double precision representation of
                       a double value.
            @return the double value converted from {@code bits}.
            @see #doubleToLongBits(double)
            @see #doubleToRawLongBits(double)
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.doubleToLongBits(System.Double)">
            Converts the specified double value to a binary representation conforming
            to the IEEE 754 floating-point double precision bit layout. All
            <em>Not-a-Number (NaN)</em> values are converted to a single NaN
            representation ({@code 0x7ff8000000000000L}).
            
            @param value
                       the double value to convert.
            @return the IEEE 754 floating-point double precision representation of
                    {@code value}.
            @see #doubleToRawLongBits(double)
            @see #longBitsToDouble(long)
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.isNaN(System.Double)">
            Indicates whether the specified double is a <em>Not-a-Number (NaN)</em>
            value.
            
            @param d
                       the double value to check.
            @return {@code true} if {@code d} is <em>Not-a-Number</em>;
                    {@code false} if it is a (potentially infinite) double number.
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.isInfinite">
            Indicates whether this object represents an infinite value.
            
            @return {@code true} if the value of this double is positive or negative
                    infinity; {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.isInfinite(System.Double)">
            Indicates whether the specified double represents an infinite value.
            
            @param d
                       the double to check.
            @return {@code true} if the value of {@code d} is positive or negative
                    infinity; {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Double.toString(System.Double)">
            Returns a string containing a concise, human-readable description of the
            specified double value.
            
            @param d
                        the double to convert to a string.
            @return a printable representation of {@code d}.
        </member>
        <member name="T:biz.ritter.javapi.io.PrintWriter">
            Wraps either an existing {@link OutputStream} or an existing {@link Writer}
            and provides convenience methods for printing common data types in a human
            readable format. No {@code IOException} is thrown by this class. Instead,
            callers should use {@link #checkError()} to see if a problem has occurred in
            this writer.
        </member>
        <member name="F:biz.ritter.javapi.io.PrintWriter.outJ">
            The writer to print data to.
        </member>
        <member name="F:biz.ritter.javapi.io.PrintWriter.ioError">
            Indicates whether this PrintWriter is in an error state.
        </member>
        <member name="F:biz.ritter.javapi.io.PrintWriter.autoflush">
            Indicates whether or not this PrintWriter should flush its contents after
            printing a new line.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.OutputStream)">
            Constructs a new {@code PrintWriter} with {@code out} as its target
            stream. By default, the new print writer does not automatically flush its
            contents to the target stream when a newline is encountered.
            
            @param out
                       the target output stream.
            @throws NullPointerException
                        if {@code out} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.OutputStream,System.Boolean)">
            Constructs a new {@code PrintWriter} with {@code out} as its target
            stream. The parameter {@code autoflush} determines if the print writer
            automatically flushes its contents to the target stream when a newline is
            encountered.
            
            @param out
                       the target output stream.
            @param autoflush
                       indicates whether contents are flushed upon encountering a
                       newline sequence.
            @throws NullPointerException
                        if {@code out} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.Writer)">
            Constructs a new {@code PrintWriter} with {@code wr} as its target
            writer. By default, the new print writer does not automatically flush its
            contents to the target writer when a newline is encountered.
            
            @param wr
                       the target writer.
            @throws NullPointerException
                        if {@code wr} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.Writer,System.Boolean)">
            Constructs a new {@code PrintWriter} with {@code out} as its target
            writer. The parameter {@code autoflush} determines if the print writer
            automatically flushes its contents to the target writer when a newline is
            encountered.
            
            @param wr
                       the target writer.
            @param autoflush
                       indicates whether to flush contents upon encountering a
                       newline sequence.
            @throws NullPointerException
                        if {@code out} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.File)">
            Constructs a new {@code PrintWriter} with {@code file} as its target. The
            virtual machine's default character set is used for character encoding.
            The print writer does not automatically flush its contents to the target
            file when a newline is encountered. The output to the file is buffered.
            
            @param file
                       the target file. If the file already exists, its contents are
                       removed, otherwise a new file is created.
            @throws FileNotFoundException
                        if an error occurs while opening or creating the target file.
            @throws SecurityException
                        if a security manager exists and it denies writing to the
                        target file.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(biz.ritter.javapi.io.File,System.String)">
            Constructs a new {@code PrintWriter} with {@code file} as its target. The
            character set named {@code csn} is used for character encoding.
            The print writer does not automatically flush its contents to the target
            file when a newline is encountered. The output to the file is buffered.
            
            @param file
                       the target file. If the file already exists, its contents are
                       removed, otherwise a new file is created.
            @param csn
                       the name of the character set used for character encoding.
            @throws FileNotFoundException
                        if an error occurs while opening or creating the target file.
            @throws NullPointerException
                        if {@code csn} is {@code null}.
            @throws SecurityException
                        if a security manager exists and it denies writing to the
                        target file.
            @throws UnsupportedEncodingException
                        if the encoding specified by {@code csn} is not supported.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(System.String)">
            Constructs a new {@code PrintWriter} with the file identified by {@code
            fileName} as its target. The virtual machine's default character set is
            used for character encoding. The print writer does not automatically
            flush its contents to the target file when a newline is encountered. The
            output to the file is buffered.
            
            @param fileName
                       the target file's name. If the file already exists, its
                       contents are removed, otherwise a new file is created.
            @throws FileNotFoundException
                        if an error occurs while opening or creating the target file.
            @throws SecurityException
                        if a security manager exists and it denies writing to the
                        target file.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.#ctor(System.String,System.String)">
            Constructs a new {@code PrintWriter} with the file identified by {@code
            fileName} as its target. The character set named {@code csn} is used for
            character encoding. The print writer does not automatically flush its
            contents to the target file when a newline is encountered. The output to
            the file is buffered.
            
            @param fileName
                       the target file's name. If the file already exists, its
                       contents are removed, otherwise a new file is created.
            @param csn
                       the name of the character set used for character encoding.
            @throws FileNotFoundException
                        if an error occurs while opening or creating the target file.
            @throws NullPointerException
                        if {@code csn} is {@code null}.
            @throws SecurityException
                        if a security manager exists and it denies writing to the
                        target file.
            @throws UnsupportedEncodingException
                        if the encoding specified by {@code csn} is not supported.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.checkError">
            Flushes this writer and returns the value of the error flag.
            
            @return {@code true} if either an {@code IOException} has been thrown
                    previously or if {@code setError()} has been called;
                    {@code false} otherwise.
            @see #setError()
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.clearError">
            Sets the error state of the stream to false.
            
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.close">
            Closes this print writer. Flushes this writer and then closes the target.
            If an I/O error occurs, this writer's error flag is set to {@code true}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.flush">
            Ensures that all pending data is sent out to the target. It also
            flushes the target. If an I/O error occurs, this writer's error
            state is set to {@code true}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.format(System.String,System.Object[])">
            Writes a string formatted by an intermediate {@code Formatter} to the
            target using the specified format string and arguments. For the locale,
            the default value of the current virtual machine instance is used. If
            automatic flushing is enabled then the buffer is flushed as well.
            
            @param format
                       the format string used for {@link java.util.Formatter#format}.
            @param args
                       the list of arguments passed to the formatter. If there are
                       more arguments than required by the {@code format} string,
                       then the additional arguments are ignored.
            @return this writer.
            @throws IllegalFormatException
                        if the format string is illegal or incompatible with the
                        arguments, if there are not enough arguments or if any other
                        error regarding the format string or arguments is detected.
            @throws NullPointerException
                        if {@code format} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.format(biz.ritter.javapi.util.Locale,System.String,System.Object[])">
            Writes a string formatted by an intermediate {@code Formatter} to the
            target using the specified locale, format string and arguments. If
            automatic flushing is enabled then this writer is flushed.
            
            @param l
                       the locale used in the method. No localization will be applied
                       if {@code l} is {@code null}.
            @param format
                       the format string used for {@link java.util.Formatter#format}.
            @param args
                       the list of arguments passed to the formatter. If there are
                       more arguments than required by the {@code format} string,
                       then the additional arguments are ignored.
            @return this writer.
            @throws IllegalFormatException
                        if the format string is illegal or incompatible with the
                        arguments, if there are not enough arguments or if any other
                        error regarding the format string or arguments is detected.
            @throws NullPointerException
                        if {@code format} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.printf(System.String,System.Object[])">
            Prints a formatted string. The behavior of this method is the same as
            this writer's {@code #format(String, Object...)} method. For the locale,
            the default value of the current virtual machine instance is used.
            
            @param format
                       the format string used for {@link java.util.Formatter#format}.
            @param args
                       the list of arguments passed to the formatter. If there are
                       more arguments than required by the {@code format} string,
                       then the additional arguments are ignored.
            @return this writer.
            @throws IllegalFormatException
                        if the format string is illegal or incompatible with the
                        arguments, if there are not enough arguments or if any other
                        error regarding the format string or arguments is detected.
            @throws NullPointerException
                        if {@code format} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.printf(biz.ritter.javapi.util.Locale,System.String,System.Object[])">
            Prints a formatted string. The behavior of this method is the same as
            this writer's {@code #format(Locale, String, Object...)} method.
            
            @param l
                       the locale used in the method. No localization will be applied
                       if {@code l} is {@code null}.
            @param format
                       the format string used for {@link java.util.Formatter#format}.
            @param args
                       the list of arguments passed to the formatter. If there are
                       more arguments than required by the {@code format} string,
                       then the additional arguments are ignored.
            @return this writer.
            @throws IllegalFormatException
                        if the format string is illegal or incompatible with the
                        arguments, if there are not enough arguments or if any other
                        error regarding the format string or arguments is detected.
            @throws NullPointerException
                        if {@code format} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Char[])">
            Prints the string representation of the specified character array
            to the target.
            
            @param charArray
                       the character array to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Char)">
            Prints the string representation of the specified character to the
            target.
            
            @param ch
                       the character to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Double)">
            Prints the string representation of the specified double to the target.
            
            @param dnum
                       the double value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Single)">
            Prints the string representation of the specified float to the target.
            
            @param fnum
                       the float value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Int32)">
            Prints the string representation of the specified integer to the target.
            
            @param inum
                       the integer value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Int64)">
            Prints the string representation of the specified long to the target.
            
            @param lnum
                       the long value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Object)">
            Prints the string representation of the specified object to the target.
            
            @param obj
                       the object to print to the target.
            @see #print(String)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PrintWriter.print(System.String)" -->
        <member name="M:biz.ritter.javapi.io.PrintWriter.print(System.Boolean)">
            Prints the string representation of the specified boolean to the target.
            
            @param bool
                       the boolean value to print the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println">
            Prints the string representation of the system property {@code
            "line.separator"} to the target. Flushes this writer if the autoflush
            flag is set to {@code true}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Char[])">
            Prints the string representation of the specified character array
            followed by the system property {@code "line.separator"} to the target.
            Flushes this writer if the autoflush flag is set to {@code true}.
            
            @param charArray
                       the character array to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Char)">
            Prints the string representation of the specified character followed by
            the system property {@code "line.separator"} to the target. Flushes this
            writer if the autoflush flag is set to {@code true}.
            
            @param ch
                       the character to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Double)">
            Prints the string representation of the specified double followed by the
            system property {@code "line.separator"} to the target. Flushes this
            writer if the autoflush flag is set to {@code true}.
            
            @param dnum
                       the double value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Single)">
            Prints the string representation of the specified float followed by the
            system property {@code "line.separator"} to the target. Flushes this
            writer if the autoflush flag is set to {@code true}.
            
            @param fnum
                       the float value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Int32)">
            Prints the string representation of the specified integer followed by the
            system property {@code "line.separator"} to the target. Flushes this
            writer if the autoflush flag is set to {@code true}.
            
            @param inum
                       the integer value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Int64)">
            Prints the string representation of the specified long followed by the
            system property {@code "line.separator"} to the target. Flushes this
            writer if the autoflush flag is set to {@code true}.
            
            @param lnum
                       the long value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Object)">
            Prints the string representation of the specified object followed by the
            system property {@code "line.separator"} to the target. Flushes this
            writer if the autoflush flag is set to {@code true}.
            
            @param obj
                       the object to print to the target.
            @see #print(String)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PrintWriter.println(System.String)" -->
        <member name="M:biz.ritter.javapi.io.PrintWriter.println(System.Boolean)">
            Prints the string representation of the specified boolean followed by the
            system property {@code "line.separator"} to the target. Flushes this
            writer if the autoflush flag is set to {@code true}.
            
            @param bool
                       the boolean value to print to the target.
            @see #print(String)
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.setError">
            Sets the error flag of this writer to {@code true}.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.write(System.Char[])">
            Writes the character buffer {@code buf} to the target.
            
            @param buf
                       the non-null array containing characters to write.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PrintWriter.write(System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PrintWriter.write(System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.PrintWriter.write(System.String)">
            Writes the characters from the specified string to the target.
            
            @param str
                       the non-null string containing the characters to write.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PrintWriter.write(System.String,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.PrintWriter.append(System.Char)">
            Appends the character {@code c} to the target.
            
            @param c
                       the character to append to the target.
            @return this writer.
        </member>
        <member name="M:biz.ritter.javapi.io.PrintWriter.append(biz.ritter.javapi.lang.CharSequence)">
            Appends the character sequence {@code csq} to the target. This
            method works the same way as {@code PrintWriter.print(csq.toString())}.
            If {@code csq} is {@code null}, then the string "null" is written
            to the target.
            
            @param csq
                       the character sequence appended to the target.
            @return this writer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PrintWriter.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.beans.FeatureDescriptor.setName(System.String)">
            <p>
            Sets the name.
            </p>
            
            @param name
                       The name to set.
        </member>
        <member name="M:biz.ritter.javapi.beans.FeatureDescriptor.getName">
            <p>
            Gets the name.
            </p>
            
            @return The name.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.Vector`1" -->
        <member name="F:biz.ritter.javapi.util.Vector`1.elementCount">
            The number of elements or the size of the vector.
        </member>
        <member name="F:biz.ritter.javapi.util.Vector`1.elementData">
            The elements of the vector.
        </member>
        <member name="F:biz.ritter.javapi.util.Vector`1.capacityIncrement">
            How many elements should be added to the vector when it is detected that
            it needs to grow to accommodate extra entries. If this value is zero or
            negative the size will be doubled if an increase is needed.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor">
            Constructs a new vector using the default capacity.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor(System.Int32)">
            Constructs a new vector using the specified capacity.
            
            @param capacity
                       the initial capacity of the new vector.
            @throws IllegalArgumentException
                        if {@code capacity} is negative.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor(System.Int32,System.Int32)">
            Constructs a new vector using the specified capacity and capacity
            increment.
            
            @param capacity
                       the initial capacity of the new vector.
            @param capacityIncrement
                       the amount to increase the capacity when this vector is full.
            @throws IllegalArgumentException
                        if {@code capacity} is negative.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
            Constructs a new instance of {@code Vector} containing the elements in
            {@code collection}. The order of the elements in the new {@code Vector}
            is dependent on the iteration order of the seed collection.
            
            @param collection
                       the collection of elements to add.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.add(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.add(`0)">
            Adds the specified object at the end of this vector.
            
            @param object
                       the object to add to the vector.
            @return {@code true}
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.addAll(biz.ritter.javapi.util.Collection{`0})">
            Adds the objects in the specified collection to the end of this vector.
            
            @param collection
                       the collection of objects.
            @return {@code true} if this vector is modified, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.addElement(`0)">
            Adds the specified object at the end of this vector.
            
            @param object
                       the object to add to the vector.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.capacity">
            Returns the number of elements this vector can hold without growing.
            
            @return the capacity of this vector.
            @see #ensureCapacity
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.clear">
            Removes all elements from this vector, leaving it empty.
            
            @see #isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.clone">
            Returns a new vector with the same elements, size, capacity and capacity
            increment as this vector.
            
            @return a shallow copy of this vector.
            @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.contains(System.Object)">
            Searches this vector for the specified object.
            
            @param object
                       the object to look for in this vector.
            @return {@code true} if object is an element of this vector,
                    {@code false} otherwise.
            @see #indexOf(Object)
            @see #indexOf(Object, int)
            @see java.lang.Object#equals
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.containsAll(biz.ritter.javapi.util.Collection{`0})">
            Searches this vector for all objects in the specified collection.
            
            @param collection
                       the collection of objects.
            @return {@code true} if all objects in the specified collection are
                    elements of this vector, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.copyInto(System.Object[])">
            Attempts to copy elements contained by this {@code Vector} into the
            corresponding elements of the supplied {@code Object} array.
            
            @param elements
                       the {@code Object} array into which the elements of this
                       vector are copied.
            @throws IndexOutOfBoundsException
                        if {@code elements} is not big enough.
            @see #clone
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.elementAt(System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.elements">
            Returns an enumeration on the elements of this vector. The results of the
            enumeration may be affected if the contents of this vector is modified.
            
            @return an enumeration of the elements of this vector.
            @see #elementAt
            @see Enumeration
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.ensureCapacity(System.Int32)">
            Ensures that this vector can hold the specified number of elements
            without growing.
            
            @param minimumCapacity
                       the minimum number of elements that this vector will hold
                       before growing.
            @see #capacity
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.Equals(System.Object)">
            Compares the specified object to this vector and returns if they are
            equal. The object must be a List which contains the same objects in the
            same order.
            
            @param object
                       the object to compare with this object
            @return {@code true} if the specified object is equal to this vector,
                    {@code false} otherwise.
            @see #hashCode
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.firstElement">
            Returns the first element in this vector.
            
            @return the element at the first position.
            @throws NoSuchElementException
                           if this vector is empty.
            @see #elementAt
            @see #lastElement
            @see #size
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.get(System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.growByOne">
            JIT optimization
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.GetHashCode">
            Returns an integer hash code for the receiver. Objects which are equal
            return the same value for this method.
            
            @return the receiver's hash.
            @see #equals
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.indexOf(System.Object)">
            Searches in this vector for the index of the specified object. The search
            for the object starts at the beginning and moves towards the end of this
            vector.
            
            @param object
                       the object to find in this vector.
            @return the index in this vector of the specified element, -1 if the
                    element isn't found.
            @see #contains
            @see #lastIndexOf(Object)
            @see #lastIndexOf(Object, int)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.indexOf(System.Object,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.insertElementAt(`0,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.isEmpty">
            Returns if this vector has no elements, a size of zero.
            
            @return {@code true} if this vector has no elements, {@code false}
                    otherwise.
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.lastElement">
            Returns the last element in this vector.
            
            @return the element at the last position.
            @throws NoSuchElementException
                           if this vector is empty.
            @see #elementAt
            @see #firstElement
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.lastIndexOf(System.Object)">
            Searches in this vector for the index of the specified object. The search
            for the object starts at the end and moves towards the start of this
            vector.
            
            @param object
                       the object to find in this vector.
            @return the index in this vector of the specified element, -1 if the
                    element isn't found.
            @see #contains
            @see #indexOf(Object)
            @see #indexOf(Object, int)
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.lastIndexOf(System.Object,System.Int32)">
            Searches in this vector for the index of the specified object. The search
            for the object starts at the specified location and moves towards the
            start of this vector.
            
            @param object
                       the object to find in this vector.
            @param location
                       the index at which to start searching.
            @return the index in this vector of the specified element, -1 if the
                    element isn't found.
            @throws ArrayIndexOutOfBoundsException
                           if {@code location >= size()}.
            @see #contains
            @see #indexOf(Object)
            @see #indexOf(Object, int)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.remove(System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.remove(System.Object)">
            Removes the first occurrence, starting at the beginning and moving
            towards the end, of the specified object from this vector. All elements
            with an index bigger than the element that gets removed have their index
            decreased by 1.
            
            @param object
                       the object to remove from this vector.
            @return {@code true} if the specified object was found, {@code false}
                    otherwise.
            @see #removeAllElements
            @see #removeElementAt
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all occurrences in this vector of each object in the specified
            Collection.
            
            @param collection
                       the collection of objects to remove.
            @return {@code true} if this vector is modified, {@code false} otherwise.
            @see #remove(Object)
            @see #contains(Object)
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeAllElements">
            Removes all elements from this vector, leaving the size zero and the
            capacity unchanged.
            
            @see #isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.removeElement(System.Object)">
            Removes the first occurrence, starting at the beginning and moving
            towards the end, of the specified object from this vector. All elements
            with an index bigger than the element that gets removed have their index
            decreased by 1.
            
            @param object
                       the object to remove from this vector.
            @return {@code true} if the specified object was found, {@code false}
                    otherwise.
            @see #removeAllElements
            @see #removeElementAt
            @see #size
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.removeElementAt(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.removeRange(System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.retainAll(biz.ritter.javapi.util.Collection{`0})">
            Removes all objects from this vector that are not contained in the
            specified collection.
            
            @param collection
                       the collection of objects to retain.
            @return {@code true} if this vector is modified, {@code false} otherwise.
            @see #remove(Object)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.set(System.Int32,`0)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.setElementAt(`0,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.setSize(System.Int32)">
            Sets the size of this vector to the specified size. If there are more
            than length elements in this vector, the elements at end are lost. If
            there are less than length elements in the vector, the additional
            elements contain null.
            
            @param length
                       the new size of this vector.
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.size">
            Returns the number of elements in this vector.
            
            @return the number of elements in this vector.
            @see #elementCount
            @see #lastElement
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Vector`1.subList(System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Vector`1.toArray">
            Returns a new array containing all elements contained in this vector.
            
            @return an array of the elements from this vector.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.toArray``1(``0[])">
            Returns an array containing all elements contained in this vector. If the
            specified array is large enough to hold the elements, the specified array
            is used, otherwise an array of the same type is created. If the specified
            array is used and is larger than this vector, the array element following
            the collection elements is set to null.
            
            @param contents
                       the array to fill.
            @return an array of the elements from this vector.
            @throws ArrayStoreException
                           if the type of an element in this vector cannot be
                           stored in the type of the specified array.
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.ToString">
            Returns the string representation of this vector.
            
            @return the string representation of this vector.
            @see #elements
        </member>
        <member name="M:biz.ritter.javapi.util.Vector`1.trimToSize">
            Sets the capacity of this vector to be the same as the size.
            
            @see #capacity
            @see #ensureCapacity
            @see #size
        </member>
        <member name="T:biz.ritter.javapi.util.Observable">
             Observable is used to notify a group of Observer objects when a change
             occurs. On creation, the set of observers is empty. After a change occurred,
             the application can call the {@link #notifyObservers()} method. This will
             cause the invocation of the {@code update()} method of all registered
             Observers. The order of invocation is not specified. This implementation will
             call the Observers in the order they registered. Subclasses are completely
             free in what order they call the update methods.
            
             @see Observer
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.#ctor">
            Constructs a new {@code Observable} object.
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.addObserver(biz.ritter.javapi.util.Observer)">
            Adds the specified observer to the list of observers. If it is already
            registered, it is not added a second time.
            
            @param observer
                       the Observer to add.
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.clearChanged">
            Clears the changed flag for this {@code Observable}. After calling
            {@code clearChanged()}, {@code hasChanged()} will return {@code false}.
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.countObservers">
            Returns the number of observers registered to this {@code Observable}.
            
            @return the number of observers.
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.deleteObserver(biz.ritter.javapi.util.Observer)">
            Removes the specified observer from the list of observers. Passing null
            won't do anything.
            
            @param observer
                       the observer to remove.
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.deleteObservers">
            Removes all observers from the list of observers.
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.hasChanged">
            Returns the changed flag for this {@code Observable}.
            
            @return {@code true} when the changed flag for this {@code Observable} is
                    set, {@code false} otherwise.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Observable.notifyObservers" -->
        <member name="M:biz.ritter.javapi.util.Observable.notifyObservers(System.Object)">
            If {@code hasChanged()} returns {@code true}, calls the {@code update()}
            method for every Observer in the list of observers using the specified
            argument. Afterwards calls {@code clearChanged()}.
            
            @param data
                       the argument passed to {@code update()}.
        </member>
        <member name="M:biz.ritter.javapi.util.Observable.setChanged">
            Sets the changed flag for this {@code Observable}. After calling
            {@code setChanged()}, {@code hasChanged()} will return {@code true}.
        </member>
        <member name="T:biz.ritter.javapi.util.EventListener">
            <summary>
            EventListener interface. All event listener need to implement this!
            </summary>
            <see cref="T:biz.ritter.javapi.util.EventObject"/>
            <see cref="T:biz.ritter.javapi.util.EventListenerProxy"/>
        </member>
        <member name="T:biz.ritter.javapi.net.URISyntaxException">
            A {@code URISyntaxException} will be thrown if some information could not be parsed
            while creating a URI.
        </member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.#ctor(System.String,System.String,System.Int32)">
            Constructs a new {@code URISyntaxException} instance containing the
            string that caused the exception, a description of the problem and the
            index at which the error occurred.
            
            @param input
                       the string that caused the exception.
            @param reason
                       the reason why the exception occurred.
            @param index
                       the position where the exception occurred.
            @throws NullPointerException
                        if one of the arguments {@code input} or {@code reason} is
                        {@code null}.
            @throws IllegalArgumentException
                        if the value for {@code index} is lesser than {@code -1}.
        </member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.#ctor(System.String,System.String)">
             Constructs a new {@code URISyntaxException} instance containing the
             string that caused the exception and a description of the problem.
             
            @param input
                        the string that caused the exception.
             @param reason
                        the reason why the exception occurred.
             @throws NullPointerException
                         if one of the arguments {@code input} or {@code reason} is
                         {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getIndex">
            Gets the index at which the syntax error was found or {@code -1} if the
            index is unknown/unavailable.
            
            @return the index of the syntax error.
        </member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getReason">
            Gets a description of the syntax error.
            
            @return the string describing the syntax error.
        </member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getInput">
            Gets the initial string that contains an invalid syntax.
            
            @return the string that caused the exception.
        </member>
        <member name="M:biz.ritter.javapi.net.URISyntaxException.getMessage">
            Gets a description of the exception, including the reason, the string
            that caused the syntax error and the position of the syntax error if
            available.
            
            @return a sting containing information about the exception.
            @see java.lang.Throwable#getMessage()
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.InvocationTargetException">
            This class provides a wrapper for an exception thrown by a {@code Method} or
            {@code Constructor} invocation.
            
            @see Method#invoke
            @see Constructor#newInstance
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor">
            Constructs a new {@code InvocationTargetException} instance with a
            {@code null} cause / target exception.
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor(biz.ritter.javapi.lang.Throwable)">
            Constructs a new {@code InvocationTargetException} instance with its
            cause / target exception filled in.
            
            @param exception
                       the exception which occurred while running the Method or
                       Constructor
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor(biz.ritter.javapi.lang.Throwable,System.String)">
            Constructs a new {@code InvocationTargetException} instance with its
            cause / target exception and message filled in.
            
            @param detailMessage
                       the detail message for the exception
            @param exception
                       the exception which occurred while running the Method or
                       Constructor
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.#ctor(System.Reflection.TargetInvocationException)">
            <summary>
            In addition, .net TargetInvocationException is repacked
            </summary>
            <param name="tie"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.getTargetException">
            Returns the target exception, which may be {@code null}.
            
            @return the target exception
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.InvocationTargetException.getCause">
            Returns the cause of this exception, which may be {@code null}.
            
            @return the cause of this exception
        </member>
        <member name="T:org.apache.harmony.luni.util.InputStreamHelper">
            The class contains static {@link java.io.InputStream} utilities.
        </member>
        <member name="M:org.apache.harmony.luni.util.InputStreamHelper.expose(biz.ritter.javapi.io.ByteArrayInputStream)">
            Reads all bytes from {@link java.io.ByteArrayInputStream} using its
            underlying buffer directly.
            
            @return an underlying buffer, if a current position is at the buffer
                    beginning, and an end position is at the buffer end, or a copy of
                    the underlying buffer part.
        </member>
        <member name="M:org.apache.harmony.luni.util.InputStreamHelper.expose(biz.ritter.javapi.io.InputStream)">
            The utility method for reading the whole input stream into a snapshot
            buffer. To speed up the access it works with an underlying buffer for a
            given {@link java.io.ByteArrayInputStream}.
            
            @param is
                       the stream to be read.
            @return the snapshot wrapping the buffer where the bytes are read to.
            @throws UnsupportedOperationException
                        if the input stream data cannot be exposed
        </member>
        <member name="M:org.apache.harmony.luni.util.InputStreamHelper.readFullyAndClose(biz.ritter.javapi.io.InputStream)">
            Reads all the bytes from the given input stream.
            
            Calls read multiple times on the given input stream until it receives an
            end of file marker. Returns the combined results as a byte array. Note
            that this method may block if the underlying stream read blocks.
            
            @param is
                       the input stream to be read.
            @return the content of the stream as a byte array.
            @throws IOException
                        if a read error occurs.
        </member>
        <member name="T:org.apache.harmony.luni.util.ExposedByteArrayInputStream">
            The extension of <code>ByteArrayInputStream</code> which exposes an
            underlying buffer.
        </member>
        <member name="M:org.apache.harmony.luni.util.ExposedByteArrayInputStream.#ctor(System.Byte[])">
            @see java.io.ByteArrayInputStream(byte[])
        </member>
        <member name="M:org.apache.harmony.luni.util.ExposedByteArrayInputStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            @see java.io.ByteArrayInputStream(byte[], int, int)
        </member>
        <member name="M:org.apache.harmony.luni.util.ExposedByteArrayInputStream.expose">
            Reads the whole stream and returns the stream snapshot.
        </member>
        <member name="T:biz.ritter.javapi.util.LinkedHashMap`2">
            <summary>
            LinkedHashMap implementation
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashMap`2.#ctor">
            <summary>
            Create a new LinkedHashMap
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedHashMap`2.#ctor(System.Int32,System.Single)">
            <summary>
            Create a new LinkedHashMap.
            </summary>
            <param name="initialCapacity"></param>
            <param name="ignoredLoadFactor">ignored</param>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.Inflater">
            <summary>
             <para>
             This class uncompresses data that was compressed using the <i>DEFLATE</i>
             algorithm (see <a href="http://www.gzip.org/algorithm.txt">specification</a>).
             </para>
             <para>
             Basically this class is part of the API to the stream based ZLIB compression
             library and is used as such by {@code InflaterInputStream} and its
             descendants.
             <para/>
             <para>
             The typical usage of a {@code Inflater} outside this package consists of a
             specific call to one of its constructors before being passed to an instance
             of {@code InflaterInputStream}.
             <para>
             @see InflaterInputStream
             @see Deflater
            </para>
            </para>
            </para>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.#ctor">
            This constructor creates an inflater that expects a header from the input
            stream. Use {@code Inflater(bool)} if the input comes without a ZLIB
            header.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.#ctor(System.Boolean)">
             This constructor allows to create an inflater that expects no header from
             the input stream.
            
             @param noHeader
                        {@code true} indicates that no ZLIB header comes with the
                        input.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.end">
            Release any resources associated with this {@code Inflater}. Any unused
            input/output is discarded. This is also called by the finalize method.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.finished">
             Indicates if the {@code Inflater} has inflated the entire deflated
             stream. If deflated bytes remain and {@code needsInput()} returns {@code
             true} this method will return {@code false}. This method should be
             called after all deflated input is supplied to the {@code Inflater}.
            
             @return {@code true} if all input has been inflated, {@code false}
                     otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getAdler">
             Returns the <i>Adler32</i> checksum of either all bytes inflated, or the
             checksum of the preset dictionary if one has been supplied.
            
             @return The <i>Adler32</i> checksum associated with this
                     {@code Inflater}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getBytesRead">
             Returns the total number of bytes read by the {@code Inflater}. This
             method performs the same as {@code getTotalIn()} except that it returns a
             {@code long} value instead of an integer.
            
             @return the total number of bytes read.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getBytesWritten">
             Returns a the total number of bytes read by the {@code Inflater}. This
             method performs the same as {@code getTotalOut} except it returns a
             {@code long} value instead of an integer.
            
             @return the total bytes written to the output buffer.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getRemaining">
             Returns the number of bytes of current input remaining to be read by the
             inflater.
            
             @return the number of bytes of unread input.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getTotalIn">
             Returns total number of bytes of input read by the {@code Inflater}. The
             result value is limited by {@code Integer.MAX_VALUE}.
            
             @return the total number of bytes read.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.getTotalOut">
             Returns total number of bytes written to the output buffer by the {@code
             Inflater}. The result value is limited by {@code Integer.MAX_VALUE}.
            
             @return the total bytes of output data written.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.inflate(System.Byte[])">
             Inflates bytes from current input and stores them in {@code buf}.
            
             @param buf
                        the buffer where decompressed data bytes are written.
             @return the number of bytes inflated.
             @throws DataFormatException
                         if the underlying stream is corrupted or was not compressed
                         using a {@code Deflater}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.inflate(System.Byte[],System.Int32,System.Int32)">
             Inflates up to n bytes from the current input and stores them in {@code
             buf} starting at {@code off}.
            
             @param buf
                        the buffer to write inflated bytes to.
             @param off
                        the offset in buffer where to start writing decompressed data.
             @param nbytes
                        the number of inflated bytes to write to {@code buf}.
             @throws DataFormatException
                         if the underlying stream is corrupted or was not compressed
                         using a {@code Deflater}.
             @return the number of bytes inflated.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.needsDictionary">
             Indicates whether the input bytes were compressed with a preset
             dictionary. This method should be called prior to {@code inflate()} to
             determine whether a dictionary is required. If so {@code setDictionary()}
             should be called with the appropriate dictionary prior to calling {@code
             inflate()}.
            
             @return {@code true} if a preset dictionary is required for inflation.
             @see #setDictionary(byte[])
             @see #setDictionary(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.needsInput">
             Indicates that input has to be passed to the inflater.
            
             @return {@code true} if {@code setInput} has to be called before
                     inflation can proceed.
             @see #setInput(byte[])
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.reset">
            Resets the {@code Inflater}. Should be called prior to inflating a new
            set of data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.setDictionary(System.Byte[])">
             Sets the preset dictionary to be used for inflation to {@code buf}.
             {@code needsDictionary()} can be called to determine whether the current
             input was deflated using a preset dictionary.
            
             @param buf
                        The buffer containing the dictionary bytes.
             @see #needsDictionary
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.zip.Inflater.setDictionary(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.zip.Inflater.setInput(System.Byte[])">
             Sets the current input to be decompressed. This method should only be
             called if {@code needsInput()} returns {@code true}.
            
             @param buf
                        the input buffer.
             @see #needsInput
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Inflater.setInput(System.Byte[],System.Int32,System.Int32)">
             Sets the current input to the region of the input buffer starting at
             {@code off} and ending at {@code nbytes - 1} where data is written after
             decompression. This method should only be called if {@code needsInput()}
             returns {@code true}.
            
             @param buf
                        the input buffer.
             @param off
                        the offset to read from the input buffer.
             @param nbytes
                        the number of bytes to read.
             @see #needsInput
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.zip.Deflater" -->
        <member name="F:biz.ritter.javapi.util.zip.Deflater.BEST_COMPRESSION">
            Upper bound for the compression level range.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.BEST_SPEED">
            Lower bound for compression level range.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.DEFAULT_COMPRESSION">
            Usage of the default compression level.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.DEFAULT_STRATEGY">
            Default value for compression strategy.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.DEFLATED">
            Default value for compression method.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.FILTERED">
            Possible value for compression strategy.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.HUFFMAN_ONLY">
            Possible value for compression strategy.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.NO_COMPRESSION">
            Possible value for compression level.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.Z_NO_FLUSH">
            Use buffering for best compression.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.Z_SYNC_FLUSH">
            Flush buffers so recipients can immediately decode the data sent thus
            far. This mode may degrade compression.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.Deflater.Z_FINISH">
            Flush buffers because there is no further data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.#ctor">
            Constructs a new {@code Deflater} instance with default compression
            level. The strategy can be specified with {@link #setStrategy}, only. A
            header is added to the output by default; use constructor {@code
            Deflater(level, boolean)} if you need to omit the header.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.#ctor(System.Int32)">
             Constructs a new {@code Deflater} instance with a specific compression
             level. The strategy can be specified with {@code setStrategy}, only. A
             header is added to the output by default; use
             {@code Deflater(level, boolean)} if you need to omit the header.
            
             @param level
                        the compression level in the range between 0 and 9.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.#ctor(System.Int32,System.Boolean)">
             Constructs a new {@code Deflater} instance with a specific compression
             level. If noHeader is passed as true no ZLib header is added to the
             output. In a ZIP archive every entry (compressed file) comes with such a
             header. The strategy can be specified with the setStrategy method, only.
            
             @param level
                        the compression level in the range between 0 and 9.
             @param noHeader
                        {@code true} indicates that no ZLIB header should be written.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.deflate(System.Byte[])">
             Deflates the data (previously passed to {@code setInput}) into the
             supplied buffer.
            
             @param buf
                        buffer to write compressed data to.
             @return number of bytes of compressed data written to {@code buf}.
             @see #deflate(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.deflate(System.Byte[],System.Int32,System.Int32)">
             Deflates data (previously passed to {@code setInput}) into a specific
             region within the supplied buffer.
            
             @param buf
                        the buffer to write compressed data to.
             @param off
                        the offset within {@code buf} at which to start writing to.
             @param nbytes
                        maximum number of bytes of compressed data to be written.
             @return the number of bytes of compressed data written to {@code buf}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.deflate(System.Byte[],System.Int32,System.Int32,System.Int32)">
            @param flushParam one of {@link #Z_NO_FLUSH}, {@link #Z_FINISH} or
                       {@link #Z_SYNC_FLUSH}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.end">
            Frees all resources held onto by this deflating algorithm. Any unused
            input or output is discarded. While this method is used by {@code
            finalize()}, it can be called explicitly in order to free native
            resources before the next GC cycle. After {@code end()} was called other
            methods will typically throw an {@code IllegalStateException}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.finish">
             Indicates to the {@code Deflater} that all uncompressed input has been provided
             to it.
            
             @see #finished
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.finished">
             Returns whether or not all provided data has been successfully
             compressed.
            
             @return true if all data has been compressed, false otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getAdler">
             Returns the Adler32 checksum of uncompressed data currently read. If a
             preset dictionary is used getAdler() will return the Adler32 checksum of
             the dictionary used.
            j
             @return the Adler32 checksum of uncompressed data or preset dictionary if
                     used.
             @see #setDictionary(byte[])
             @see #setDictionary(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getTotalIn">
             Returns the total number of bytes of input consumed by the {@code Deflater}.
            
             @return number of bytes of input read.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getTotalOut">
             Returns the total number of compressed bytes output by this {@code Deflater}.
            
             @return number of compressed bytes output.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.needsInput">
             Counterpart to setInput(). Indicates whether or not all bytes of
             uncompressed input have been consumed by the {@code Deflater}. If needsInput()
             returns true setInput() must be called before deflation can continue. If
             all bytes of uncompressed data have been provided to the {@code Deflater}
             finish() must be called to ensure the compressed data is output.
            
             @return {@code true} if input is required for deflation to continue,
                     {@code false} otherwise.
             @see #finished()
             @see #setInput(byte[])
             @see #setInput(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.reset">
             Resets the {@code Deflater} to accept new input without affecting any
             previously made settings for the compression strategy or level. This
             operation <i>must</i> be called after {@code finished()} returns
             {@code true} if the {@code Deflater} is to be reused.
            
             @see #finished
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setDictionary(System.Byte[])">
             Sets the dictionary to be used for compression by this {@code Deflater}.
             setDictionary() can only be called if this {@code Deflater} supports the writing
             of ZLIB headers. This is the default behaviour but can be overridden
             using {@code Deflater(int, boolean)}.
            
             @param buf
                        the buffer containing the dictionary data bytes.
             @see Deflater#Deflater(int, boolean)
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setDictionary(System.Byte[],System.Int32,System.Int32)">
             Sets the dictionary to be used for compression by this {@code Deflater}.
             setDictionary() can only be called if this {@code Deflater} supports the writing
             of ZLIB headers. This is the default behaviour but can be overridden
             using {@code Deflater(int, boolean)}.
            
             @param buf
                        the buffer containing the dictionary data bytes.
             @param off
                        the offset of the data.
             @param nbytes
                        the length of the data.
             @see Deflater#Deflater(int, boolean)
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setInput(System.Byte[])">
             Sets the input buffer the {@code Deflater} will use to extract uncompressed bytes
             for later compression.
            
             @param buf
                        the buffer.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setInput(System.Byte[],System.Int32,System.Int32)">
             Sets the input buffer the {@code Deflater} will use to extract uncompressed bytes
             for later compression. Input will be taken from the buffer region
             starting at off and ending at nbytes - 1.
            
             @param buf
                        the buffer containing the input data bytes.
             @param off
                        the offset of the data.
             @param nbytes
                        the length of the data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setLevel(System.Int32)">
             Sets the compression level to be used when compressing data. The
             compression level must be a value between 0 and 9. This value must be set
             prior to calling setInput().
            
             @param level
                        compression level to use
             @exception IllegalArgumentException
                            If the compression level is invalid.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.setStrategy(System.Int32)">
             Sets the compression strategy to be used. The strategy must be one of
             FILTERED, HUFFMAN_ONLY or DEFAULT_STRATEGY.This value must be set prior
             to calling setInput().
            
             @param strategy
                        compression strategy to use
             @exception IllegalArgumentException
                            If the strategy specified is not one of FILTERED,
                            HUFFMAN_ONLY or DEFAULT_STRATEGY.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getBytesRead">
             Returns a long int of total number of bytes read by the {@code Deflater}. This
             method performs the same as {@code getTotalIn} except it returns a long value
             instead of an integer
            
             @see #getTotalIn()
             @return total number of bytes read by {@code Deflater}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.Deflater.getBytesWritten">
             Returns a long int of total number of bytes of read by the {@code Deflater}. This
             method performs the same as {@code getTotalOut} except it returns a long
             value instead of an integer
            
             @see #getTotalOut()
             @return bytes exactly write by {@code Deflater}
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.Timer" -->
        <member name="M:biz.ritter.javapi.util.Timer.#ctor(System.String,System.Boolean)">
             Creates a new named {@code Timer} which may be specified to be run as a
             daemon thread.
            
             @param name the name of the {@code Timer}.
             @param isDaemon true if {@code Timer}'s thread should be a daemon thread.
             @throws NullPointerException is {@code name} is {@code null}
        </member>
        <member name="M:biz.ritter.javapi.util.Timer.#ctor(System.String)">
             Creates a new named {@code Timer} which does not run as a daemon thread.
            
             @param name the name of the Timer.
             @throws NullPointerException is {@code name} is {@code null}
        </member>
        <member name="M:biz.ritter.javapi.util.Timer.#ctor(System.Boolean)">
             Creates a new {@code Timer} which may be specified to be run as a daemon thread.
            
             @param isDaemon {@code true} if the {@code Timer}'s thread should be a daemon thread.
        </member>
        <member name="M:biz.ritter.javapi.util.Timer.#ctor">
            Creates a new non-daemon {@code Timer}.
        </member>
        <member name="M:biz.ritter.javapi.util.Timer.cancel">
            Cancels the {@code Timer} and removes any scheduled tasks. If there is a
            currently running task it is not affected. No more tasks may be scheduled
            on this {@code Timer}. Subsequent calls do nothing.
        </member>
        <member name="M:biz.ritter.javapi.util.Timer.purge">
             Removes all canceled tasks from the task queue. If there are no
             other references on the tasks, then after this call they are free
             to be garbage collected.
            
             @return the number of canceled tasks that were removed from the task
                     queue.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,biz.ritter.javapi.util.Date)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,System.Int64,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Timer.schedule(biz.ritter.javapi.util.TimerTask,biz.ritter.javapi.util.Date,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Timer.scheduleAtFixedRate(biz.ritter.javapi.util.TimerTask,System.Int64,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Timer.scheduleAtFixedRate(biz.ritter.javapi.util.TimerTask,biz.ritter.javapi.util.Date,System.Int64)" -->
        <member name="M:biz.ritter.javapi.lang.Thread.setName(System.String)">
            <summary>
            Set the name of Thread instance to newName
            </summary>
            <param name="newName"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getName">
            <summary>
            Get the name of Thread instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.setDaemon(System.Boolean)">
            <summary>
            Set this Thread instance to background / daemon thread or not.
            </summary>
            <param name="onOrOff"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.isDaemon">
            <summary>
            Return Thread instance is background / deamon thread information
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor">
            <summary>
            Construct new Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.#ctor(biz.ritter.javapi.lang.Runnable)">
            <summary>
            Construct new Thread instance for giving Runnable instance
            </summary>
            <param name="toRun"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.run">
            <summary>
            All todo is implemented in run method.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.start">
            <summary>
            Start the Thread instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.getState">
            <summary>
            Return the State of Thread instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.isAlive">
            <summary>
            Thread is started but not died.
            </summary>
            <returns>Thread running true / false</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Thread.sleep(System.Int32)">
            <summary>
            Let the Thread instance sleeping
            </summary>
            <param name="millis"></param>
        </member>
        <member name="T:biz.ritter.javapi.lang.Thread.State">
            <summary>
             A representation of a thread's state. A given thread may only be in one state at a time.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.NEW">
            The thread has been created, but has never been started.
        </member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.RUNNABLE">
            The thread may be run.
        </member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.BLOCKED">
            The thread is blocked and waiting for a lock.
        </member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.WAITING">
            The thread is waiting.
        </member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.TIMED_WAITING">
            The thread is waiting for a specified amount of time.
        </member>
        <member name="F:biz.ritter.javapi.lang.Thread.State.TERMINATED">
            The thread has been terminated.
        </member>
        <member name="F:biz.ritter.javapi.util.TimerImpl.cancelled">
            True if the method cancel() of the Timer was called or the !!!stop()
            method was invoked
        </member>
        <member name="F:biz.ritter.javapi.util.TimerImpl.finished">
            True if the Timer has become garbage
        </member>
        <member name="F:biz.ritter.javapi.util.TimerImpl.tasks">
            Vector consists of scheduled events, sorted according to
            {@code when} field of TaskScheduled object.
        </member>
        <member name="M:biz.ritter.javapi.util.TimerImpl.#ctor(System.Boolean)">
            Starts a new timer.
            
            @param name thread's name
            @param isDaemon daemon thread or not
        </member>
        <member name="M:biz.ritter.javapi.util.TimerImpl.run">
            This method will be launched on separate thread for each Timer
            object.
        </member>
        <member name="M:biz.ritter.javapi.util.TimerImpl.cancel">
            Cancels timer.
        </member>
        <member name="T:biz.ritter.javapi.util.jar.JarFile">
             {@code JarFile} is used to read jar entries and their associated data from
             jar files.
            
             @see JarInputStream
             @see JarEntry
        </member>
        <member name="T:biz.ritter.javapi.util.zip.ZipFile">
             This class provides random read access to a <i>ZIP-archive</i> file.
             <p/>
             While {@code ZipInputStream} provides stream based read access to a
             <i>ZIP-archive</i>, this class implements more efficient (file based) access
             and makes use of the <i>central directory</i> within a <i>ZIP-archive</i>.
             <p/>
             Use {@code ZipOutputStream} if you want to create an archive.
             <p/>
             A temporary ZIP file can be marked for automatic deletion upon closing it.
            
             @see ZipEntry
             @see ZipOutputStream
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDSIG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDHDR">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCVER">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCFLG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCHOW">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCTIM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCCRC">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCLEN">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCNAM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.LOCEXT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTCRC">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.EXTLEN">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENVEM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENVER">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENFLG">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENHOW">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENTIM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENCRC">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENLEN">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENNAM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENEXT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENCOM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENDSK">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENATT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENATX">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.CENOFF">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDSUB">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDTOT">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDSIZ">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDOFF">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.ENDCOM">
            <summary>
            Constant for ZIP file handling.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.OPEN_READ">
            Open ZIP file for read.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipFile.OPEN_DELETE">
            Delete ZIP file when closed.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.#ctor(biz.ritter.javapi.io.File)">
             Constructs a new {@code ZipFile} with the specified file.
            
             @param file
                        the file to read from.
             @throws ZipException
                         if a ZIP error occurs.
             @throws IOException
                         if an {@code IOException} occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.#ctor(biz.ritter.javapi.io.File,System.Int32)">
             Opens a file as <i>ZIP-archive</i>. "mode" must be {@code OPEN_READ} or
             {@code OPEN_DELETE} . The latter sets the "delete on exit" flag through a
             file.
            
             @param file
                        the ZIP file to read.
             @param mode
                        the mode of the file open operation.
             @throws IOException
                         if an {@code IOException} occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.#ctor(System.String)">
             Opens a ZIP archived file.
            
             @param name
                        the name of the ZIP file.
             @throws IOException
                         if an IOException occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.Finalize">
            <summary>
            Destruct instance.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.finalize">
            <summary>
            Clean up instance
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.close">
             Closes this ZIP file. This method is idempotent.
            
             @throws IOException
                         if an IOException occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.entries">
             Returns an enumeration of the entries. The entries are listed in the
             order in which they appear in the ZIP archive.
            
             @return the enumeration of the entries.
             @throws IllegalStateException if this ZIP file has been closed.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.getEntry(System.String)">
             Gets the ZIP entry with the specified name from this {@code ZipFile}.
            
             @param entryName
                        the name of the entry in the ZIP file.
             @return a {@code ZipEntry} or {@code null} if the entry name does not
                     exist in the ZIP file.
             @throws IllegalStateException if this ZIP file has been closed.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.getInputStream(biz.ritter.javapi.util.zip.ZipEntry)">
             Returns an input stream on the data of the specified {@code ZipEntry}.
            
             @param entry
                        the ZipEntry.
             @return an input stream of the data contained in the {@code ZipEntry}.
             @throws IOException
                         if an {@code IOException} occurs.
             @throws IllegalStateException if this ZIP file has been closed.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.getName">
             Gets the file name of this {@code ZipFile}.
            
             @return the file name of this {@code ZipFile}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.size">
             Returns the number of {@code ZipEntries} in this {@code ZipFile}.
            
             @return the number of entries in this file.
             @throws IllegalStateException if this ZIP file has been closed.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipFile.readCentralDir">
             Find the central directory and read the contents.
            
             <p>The central directory can be followed by a variable-length comment
             field, so we have to scan through it backwards.  The comment is at
             most 64K, plus we have 18 bytes for the end-of-central-dir stuff
             itself, plus apparently sometimes people throw random junk on the end
             just for the fun of it.</p>
            
             <p>This is all a little wobbly.  If the wrong value ends up in the EOCD
             area, we're hosed. This appears to be the way that everybody handles
             it though, so we're in good company if this fails.</p>
        </member>
        <member name="F:biz.ritter.javapi.util.jar.JarFile.MANIFEST_NAME">
            The MANIFEST file name.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(biz.ritter.javapi.io.File)">
             Create a new {@code JarFile} using the contents of the specified file.
            
             @param file
                        the JAR file as {@link File}.
             @throws IOException
                         If the file cannot be read.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(biz.ritter.javapi.io.File,System.Boolean)">
             Create a new {@code JarFile} using the contents of the specified file.
            
             @param file
                        the JAR file as {@link File}.
             @param verify
                        if this JAR file is signed whether it must be verified.
             @throws IOException
                         If the file cannot be read.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(biz.ritter.javapi.io.File,System.Boolean,System.Int32)">
             Create a new {@code JarFile} using the contents of file.
            
             @param file
                        the JAR file as {@link File}.
             @param verify
                        if this JAR filed is signed whether it must be verified.
             @param mode
                        the mode to use, either {@link ZipFile#OPEN_READ OPEN_READ} or
                        {@link ZipFile#OPEN_DELETE OPEN_DELETE}.
             @throws IOException
                         If the file cannot be read.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(System.String)">
             Create a new {@code JarFile} from the contents of the file specified by
             filename.
            
             @param filename
                        the file name referring to the JAR file.
             @throws IOException
                         if file name cannot be opened for reading.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.#ctor(System.String,System.Boolean)">
             Create a new {@code JarFile} from the contents of the file specified by
             {@code filename}.
            
             @param filename
                        the file name referring to the JAR file.
             @param verify
                        if this JAR filed is signed whether it must be verified.
             @throws IOException
                         If file cannot be opened or read.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.getManifest">
             Returns the {@code Manifest} object associated with this {@code JarFile}
             or {@code null} if no MANIFEST entry exists.
            
             @return the MANIFEST.
             @throws IOException
                         if an error occurs reading the MANIFEST file.
             @throws IllegalStateException
                         if the jar file is closed.
             @see Manifest
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.readMetaEntries">
            Called by the JarFile constructors, this method reads the contents of the
            file's META-INF/ directory and picks out the MANIFEST.MF file and
            verifier signature files if they exist. Any signature files found are
            registered with the verifier.
            
            @throws IOException
                        if there is a problem reading the jar file entries.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarFile.getMetaEntriesImpl">
             Returns all the ZipEntry's that relate to files in the
             JAR's META-INF directory.
            
             @return the list of ZipEntry's or {@code null} if there are none.
        </member>
        <member name="T:biz.ritter.javapi.util.EventListenerProxy">
            <summary>
            Abstract wrapper class for <code>EventListener</code> interface.
            </summary>
            <see cref="T:biz.ritter.javapi.util.EventListener"/>
            <see cref="T:biz.ritter.javapi.util.EventObject"/>
        </member>
        <member name="M:biz.ritter.javapi.util.EventListenerProxy.#ctor(biz.ritter.javapi.util.EventListener)">
            <summary>
             Create a new wrapper instance with given object.
            </summary>
            <param name="objectToProxy">EventListener for proxy instance.</param>
        </member>
        <member name="M:biz.ritter.javapi.util.EventListenerProxy.getListener">
            <summary>
            Returns the wrapped EventListener instance
            </summary>
            <returns>EventListener instance</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.matches(System.String)">
            <summary>
            Check string instance for matching giving regular expression.
            </summary>
            <param name="expr">regular expression</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringJ.valueOf(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Int32)">
            Converts the specified integer to its string representation.
            
            @param value
                       the integer.
            @return the integer converted to a string.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Boolean)">
            Converts the specified boolean to its string representation. When the
            boolean is {@code true} return {@code "true"}, otherwise return {@code
            "false"}.
            
            @param value
                       the boolean.
            @return the boolean converted to a string.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Char[])">
            Creates a new string containing the characters in the specified character
            array. Modifying the character array after creating the string has no
            effect on the string.
            
            @param data
                       the array of characters.
            @return the new string.
            @throws NullPointerException
                        if {@code data} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Char)">
            Converts the specified character to its string representation.
            
            @param value
                       the character.
            @return the character converted to a string.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Double)">
            Converts the specified double to its string representation.
            
            @param value
                       the double.
            @return the double converted to a string.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Single)">
            Converts the specified float to its string representation.
            
            @param value
                       the float.
            @return the float converted to a string.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Int64)">
            Converts the specified long to its string representation.
            
            @param value
                       the long.
            @return the long converted to a string.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringJ.valueOf(System.Object)">
            Converts the specified object to its string representation. If the object
            is null return the string {@code "null"}, otherwise use {@code
            toString()} to get the string representation.
            
            @param value
                       the object.
            @return the object converted to a string, or the string {@code "null"}.
        </member>
        <member name="T:biz.ritter.javapi.io.PushbackInputStream">
            <summary>
             Wraps an existing {@link InputStream} and adds functionality to "push back"
             bytes that have been read, so that they can be read again. Parsers may find
             this useful. The number of bytes which may be pushed back can be specified
             during construction. If the buffer of pushed back bytes is empty, bytes are
             read from the underlying input stream.
             </summary>
             <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="F:biz.ritter.javapi.io.PushbackInputStream.buf">
            The buffer that contains pushed-back bytes.
        </member>
        <member name="F:biz.ritter.javapi.io.PushbackInputStream.pos">
            The current position within {@code buf}. A value equal to
            {@code buf.length} indicates that no bytes are available. A value of 0
            indicates that the buffer is full.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.#ctor(biz.ritter.javapi.io.InputStream)">
            Constructs a new {@code PushbackInputStream} with the specified input
            stream as source. The size of the pushback buffer is set to the default
            value of 1 byte.
            
            @param in
                       the source input stream.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.#ctor(biz.ritter.javapi.io.InputStream,System.Int32)">
            Constructs a new {@code PushbackInputStream} with {@code in} as source
            input stream. The size of the pushback buffer is set to {@code size}.
            
            @param in
                       the source input stream.
            @param size
                       the size of the pushback buffer.
            @throws IllegalArgumentException
                        if {@code size} is negative.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.available">
             Returns the number of bytes that are available before this stream will
             block. This is the sum of the bytes available in the pushback buffer and
             those available from the source stream.
            
             @return the number of bytes available before blocking.
             @throws IOException
                         if this stream is closed or an I/O error occurs in the source
                         stream.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.close">
             Closes this stream. This implementation closes the source stream
             and releases the pushback buffer.
            
             @throws IOException
                         if an error occurs while closing this stream.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.markSupported">
            Indicates whether this stream supports the {@code mark(int)} and
            {@code reset()} methods. {@code PushbackInputStream} does not support
            them, so it returns {@code false}.
            
            @return always {@code false}.
            @see #mark(int)
            @see #reset()
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.read">
             Reads a single byte from this stream and returns it as an integer in the
             range from 0 to 255. If the pushback buffer does not contain any
             available bytes then a byte from the source input stream is returned.
             Blocks until one byte has been read, the end of the source stream is
             detected or an exception is thrown.
            
             @return the byte read or -1 if the end of the source stream has been
                     reached.
             @throws IOException
                         if this stream is closed or an I/O error occurs while reading
                         from this stream.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackInputStream.read(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.skip(System.Int64)">
            Skips {@code count} bytes in this stream. This implementation skips bytes
            in the pushback buffer first and then in the source stream if necessary.
            
            @param count
                       the number of bytes to skip.
            @return the number of bytes actually skipped.
            @throws IOException
                        if this stream is closed or another I/O error occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackInputStream.unread(System.Byte[])" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackInputStream.unread(System.Byte[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackInputStream.unread(System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.mark(System.Int32)">
            Marks the current position in this stream. Setting a mark is not
            supported in this class; this implementation does nothing.
            
            @param readlimit
                       the number of bytes that can be read from this stream before
                       the mark is invalidated; this parameter is ignored.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackInputStream.reset">
            Resets this stream to the last marked position. Resetting the stream is
            not supported in this class; this implementation always throws an
            {@code IOException}.
            
            @throws IOException
                        if this method is called.
        </member>
        <member name="T:biz.ritter.javapi.math.Logical">
            The library implements some logical operations over {@code BigInteger}. The
            operations provided are listed below.
            <ul type="circle">
            <li>not</li>
            <li>and</li>
            <li>andNot</li>
            <li>or</li>
            <li>xor</li>
            </ul>
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.#ctor">
            Just to denote that this class can't be instantiated. 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.not(biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#not() 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.and(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#and(BigInteger) 
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Logical.andPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Logical.andDiffSigns(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Logical.andNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <member name="M:biz.ritter.javapi.math.Logical.andNot(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#andNot(BigInteger) 
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Logical.andNotPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Logical.andNotPositiveNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Logical.andNotNegativePositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.Logical.andNotNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)" -->
        <member name="M:biz.ritter.javapi.math.Logical.or(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#or(BigInteger) 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.orPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @return sign = 1, magnitude = longer.magnitude | shorter.magnitude
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.orNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @return sign = -1, magnitude = -(-val.magnitude | -that.magnitude) 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.orDiffSigns(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @return sign = -1, magnitude = -(positive.magnitude | -negative.magnitude) 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.xor(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @see BigInteger#xor(BigInteger) 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.xorPositive(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @return sign = 0, magnitude = longer.magnitude | shorter.magnitude 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.xorNegative(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @return sign = 0, magnitude = -val.magnitude ^ -that.magnitude 
        </member>
        <member name="M:biz.ritter.javapi.math.Logical.xorDiffSigns(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.BigInteger)">
            @return sign = 1, magnitude = -(positive.magnitude ^ -negative.magnitude)
        </member>
        <member name="T:biz.ritter.javapi.math.BigDecimal">
            This class represents immutable arbitrary precision decimal numbers. Each
            {@code BigDecimal} instance is represented with a unscaled arbitrary
            precision mantissa (the unscaled value) and a scale. The value of the {@code
            BigDecimal} is {@code unscaledValue} 10^(-{@code scale}).
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_UP">
             Rounding mode where positive values are rounded towards positive infinity
             and negative values towards negative infinity.
            
             @see RoundingMode#UP
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_DOWN">
             Rounding mode where the values are rounded towards zero.
            
             @see RoundingMode#DOWN
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_CEILING">
             Rounding mode to round towards positive infinity. For positive values
             this rounding mode behaves as {@link #ROUND_UP}, for negative values as
             {@link #ROUND_DOWN}.
            
             @see RoundingMode#CEILING
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_FLOOR">
             Rounding mode to round towards negative infinity. For positive values
             this rounding mode behaves as {@link #ROUND_DOWN}, for negative values as
             {@link #ROUND_UP}.
            
             @see RoundingMode#FLOOR
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_HALF_UP">
             Rounding mode where values are rounded towards the nearest neighbor.
             Ties are broken by rounding up.
            
             @see RoundingMode#HALF_UP
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_HALF_DOWN">
             Rounding mode where values are rounded towards the nearest neighbor.
             Ties are broken by rounding down.
            
             @see RoundingMode#HALF_DOWN
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_HALF_EVEN">
             Rounding mode where values are rounded towards the nearest neighbor.
             Ties are broken by rounding to the even neighbor.
            
             @see RoundingMode#HALF_EVEN
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ROUND_UNNECESSARY">
             Rounding mode where the rounding operations throws an {@code
             ArithmeticException} for the case that rounding is necessary, i.e. for
             the case that the value cannot be represented exactly.
            
             @see RoundingMode#UNNECESSARY
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ZERO">
            The constant zero as a {@code BigDecimal}.
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ONE">
            The constant one as a {@code BigDecimal}.
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.TEN">
            The constant ten as a {@code BigDecimal}.
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.serialVersionUID">
            This is the serialVersionUID used by the sun implementation. 
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.LOG10_2">
            The double closer to <code>Log10(2)</code>. 
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.toStringImage">
            The <code>String</code> representation is cached. 
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.hashCode">
            Cache for the hash code. 
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.FIVE_POW">
            An array with powers of five that fit in the type <code>long</code>
            (<code>5^0,5^1,...,5^27</code>).
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.TEN_POW">
            An array with powers of ten that fit in the type <code>long</code>
            (<code>10^0,10^1,...,10^18</code>).
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.LONG_TEN_POW">
            An array with powers of ten that fit in the type <code>long</code>
            (<code>10^0,10^1,...,10^18</code>).
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.BI_SCALED_BY_ZERO">
            An array with the first <code>BigInteger</code> scaled by zero.
            (<code>[0,0],[1,0],...,[10,0]</code>).
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.ZERO_SCALED_BY">
            An array with the zero number scaled by the first positive scales.
            (<code>0*10^0, 0*10^1, ..., 0*10^10</code>).
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.CH_ZEROS">
            An array filled with characters <code>'0'</code>. 
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.intVal">
            The arbitrary precision integer (unscaled value) in the internal
            representation of {@code BigDecimal}.
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.scaleJ">
            The 32-bit integer scale in the internal representation of {@code BigDecimal}.
        </member>
        <member name="F:biz.ritter.javapi.math.BigDecimal.precisionJ">
             Represent the number of decimal digits in the unscaled value. This
             precision is calculated the first time, and used in the following calls
             of method <code>precision()</code>. Note that some call to the private
             method <code>inplaceRound()</code> could update this field.
            
             @see #precision()
             @see #inplaceRound(MathContext)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[],System.Int32,System.Int32,biz.ritter.javapi.math.MathContext)" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[])">
             Constructs a new {@code BigDecimal} instance from a string representation
             given as a character array.
            
             @param in
                        array of characters containing the string representation of
                        this {@code BigDecimal}.
             @throws NullPointerException
                         if {@code in == null}.
             @throws NumberFormatException
                         if {@code in} does not contain a valid string representation
                         of a big decimal.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Char[],biz.ritter.javapi.math.MathContext)">
             Constructs a new {@code BigDecimal} instance from a string representation
             given as a character array. The result is rounded according to the
             specified math context.
            
             @param in
                        array of characters containing the string representation of
                        this {@code BigDecimal}.
             @param mc
                        rounding mode and precision for the result of this operation.
             @throws NullPointerException
                         if {@code in == null}.
             @throws NumberFormatException
                         if {@code in} does not contain a valid string representation
                         of a big decimal.
             @throws ArithmeticException
                         if {@code mc.precision > 0} and {@code mc.roundingMode ==
                         UNNECESSARY} and the new big decimal cannot be represented
                         within the given precision without rounding.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.String)">
             Constructs a new {@code BigDecimal} instance from a string
             representation.
            
             @param val
                        string containing the string representation of this {@code
                        BigDecimal}.
             @throws NumberFormatException
                         if {@code val} does not contain a valid string representation
                         of a big decimal.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.String,biz.ritter.javapi.math.MathContext)">
             Constructs a new {@code BigDecimal} instance from a string
             representation. The result is rounded according to the specified math
             context.
            
             @param val
                        string containing the string representation of this {@code
                        BigDecimal}.
             @param mc
                        rounding mode and precision for the result of this operation.
             @throws NumberFormatException
                         if {@code val} does not contain a valid string representation
                         of a big decimal.
             @throws ArithmeticException
                         if {@code mc.precision > 0} and {@code mc.roundingMode ==
                         UNNECESSARY} and the new big decimal cannot be represented
                         within the given precision without rounding.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Double,biz.ritter.javapi.math.MathContext)" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger)">
             Constructs a new {@code BigDecimal} instance from the given big integer
             {@code val}. The scale of the result is {@code 0}.
            
             @param val
                        {@code BigInteger} value to be converted to a {@code
                        BigDecimal} instance.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger,biz.ritter.javapi.math.MathContext)">
             Constructs a new {@code BigDecimal} instance from the given big integer
             {@code val}. The scale of the result is {@code 0}.
            
             @param val
                        {@code BigInteger} value to be converted to a {@code
                        BigDecimal} instance.
             @param mc
                        rounding mode and precision for the result of this operation.
             @throws ArithmeticException
                         if {@code mc.precision > 0} and {@code mc.roundingMode ==
                         UNNECESSARY} and the new big decimal cannot be represented
                         within the given precision without rounding.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger,System.Int32)">
             Constructs a new {@code BigDecimal} instance from a given unscaled value
             {@code unscaledVal} and a given scale. The value of this instance is
             {@code unscaledVal} 10^(-{@code scale}).
            
             @param unscaledVal
                        {@code BigInteger} representing the unscaled value of this
                        {@code BigDecimal} instance.
             @param scale
                        scale of this {@code BigDecimal} instance.
             @throws NullPointerException
                         if {@code unscaledVal == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(biz.ritter.javapi.math.BigInteger,System.Int32,biz.ritter.javapi.math.MathContext)">
             Constructs a new {@code BigDecimal} instance from a given unscaled value
             {@code unscaledVal} and a given scale. The value of this instance is
             {@code unscaledVal} 10^(-{@code scale}). The result is rounded according
             to the specified math context.
            
             @param unscaledVal
                        {@code BigInteger} representing the unscaled value of this
                        {@code BigDecimal} instance.
             @param scale
                        scale of this {@code BigDecimal} instance.
             @param mc
                        rounding mode and precision for the result of this operation.
             @throws ArithmeticException
                         if {@code mc.precision > 0} and {@code mc.roundingMode ==
                         UNNECESSARY} and the new big decimal cannot be represented
                         within the given precision without rounding.
             @throws NullPointerException
                         if {@code unscaledVal == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int32)">
             Constructs a new {@code BigDecimal} instance from the given int
             {@code val}. The scale of the result is 0.
            
             @param val
                        int value to be converted to a {@code BigDecimal} instance.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int32,biz.ritter.javapi.math.MathContext)">
             Constructs a new {@code BigDecimal} instance from the given int {@code
             val}. The scale of the result is {@code 0}. The result is rounded
             according to the specified math context.
            
             @param val
                        int value to be converted to a {@code BigDecimal} instance.
             @param mc
                        rounding mode and precision for the result of this operation.
             @throws ArithmeticException
                         if {@code mc.precision > 0} and {@code c.roundingMode ==
                         UNNECESSARY} and the new big decimal cannot be represented
                         within the given precision without rounding.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int64)">
             Constructs a new {@code BigDecimal} instance from the given long {@code
             val}. The scale of the result is {@code 0}.
            
             @param val
                        long value to be converted to a {@code BigDecimal} instance.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.#ctor(System.Int64,biz.ritter.javapi.math.MathContext)">
             Constructs a new {@code BigDecimal} instance from the given long {@code
             val}. The scale of the result is {@code 0}. The result is rounded
             according to the specified math context.
            
             @param val
                        long value to be converted to a {@code BigDecimal} instance.
             @param mc
                        rounding mode and precision for the result of this operation.
             @throws ArithmeticException
                         if {@code mc.precision > 0} and {@code mc.roundingMode ==
                         UNNECESSARY} and the new big decimal cannot be represented
                         within the given precision without rounding.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueOf(System.Int64,System.Int32)">
             Returns a new {@code BigDecimal} instance whose value is equal to {@code
             unscaledVal} 10^(-{@code scale}). The scale of the result is {@code
             scale}, and its unscaled value is {@code unscaledVal}.
            
             @param unscaledVal
                        unscaled value to be used to construct the new {@code
                        BigDecimal}.
             @param scale
                        scale to be used to construct the new {@code BigDecimal}.
             @return {@code BigDecimal} instance with the value {@code unscaledVal}*
                     10^(-{@code unscaledVal}).
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueOf(System.Int64)">
             Returns a new {@code BigDecimal} instance whose value is equal to {@code
             unscaledVal}. The scale of the result is {@code 0}, and its unscaled
             value is {@code unscaledVal}.
            
             @param unscaledVal
                        value to be converted to a {@code BigDecimal}.
             @return {@code BigDecimal} instance with the value {@code unscaledVal}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueOf(System.Double)">
             Returns a new {@code BigDecimal} instance whose value is equal to {@code
             val}. The new decimal is constructed as if the {@code BigDecimal(String)}
             constructor is called with an argument which is equal to {@code
             Double.toString(val)}. For example, {@code valueOf("0.1")} is converted to
             (unscaled=1, scale=1), although the double {@code 0.1} cannot be
             represented exactly as a double value. In contrast to that, a new {@code
             BigDecimal(0.1)} instance has the value {@code
             0.1000000000000000055511151231257827021181583404541015625} with an
             unscaled value {@code 1000000000000000055511151231257827021181583404541015625}
             and the scale {@code 55}.
            
             @param val
                        double value to be converted to a {@code BigDecimal}.
             @return {@code BigDecimal} instance with the value {@code val}.
             @throws NumberFormatException
                         if {@code val} is infinite or {@code val} is not a number
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.add(biz.ritter.javapi.math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code this + augend}.
             The scale of the result is the maximum of the scales of the two
             arguments.
            
             @param augend
                        value to be added to {@code this}.
             @return {@code this + augend}.
             @throws NullPointerException
                         if {@code augend == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.add(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is {@code this + augend}.
             The result is rounded according to the passed context {@code mc}.
            
             @param augend
                        value to be added to {@code this}.
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code this + augend}.
             @throws NullPointerException
                         if {@code augend == null} or {@code mc == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.subtract(biz.ritter.javapi.math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
             The scale of the result is the maximum of the scales of the two arguments.
            
             @param subtrahend
                        value to be subtracted from {@code this}.
             @return {@code this - subtrahend}.
             @throws NullPointerException
                         if {@code subtrahend == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.subtract(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is {@code this - subtrahend}.
             The result is rounded according to the passed context {@code mc}.
            
             @param subtrahend
                        value to be subtracted from {@code this}.
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code this - subtrahend}.
             @throws NullPointerException
                         if {@code subtrahend == null} or {@code mc == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.multiply(biz.ritter.javapi.math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code this *
             multiplicand}. The scale of the result is the sum of the scales of the
             two arguments.
            
             @param multiplicand
                        value to be multiplied with {@code this}.
             @return {@code this * multiplicand}.
             @throws NullPointerException
                         if {@code multiplicand == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.multiply(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is {@code this *
             multiplicand}. The result is rounded according to the passed context
             {@code mc}.
            
             @param multiplicand
                        value to be multiplied with {@code this}.
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code this * multiplicand}.
             @throws NullPointerException
                         if {@code multiplicand == null} or {@code mc == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,System.Int32,System.Int32)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             As scale of the result the parameter {@code scale} is used. If rounding
             is required to meet the specified scale, then the specified rounding mode
             {@code roundingMode} is applied.
            
             @param divisor
                        value by which {@code this} is divided.
             @param scale
                        the scale of the result returned.
             @param roundingMode
                        rounding mode to be used to round the result.
             @return {@code this / divisor} rounded according to the given rounding
                     mode.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws IllegalArgumentException
                         if {@code roundingMode} is not a valid rounding mode.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
                         necessary according to the given scale.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,System.Int32,biz.ritter.javapi.math.RoundingMode)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             As scale of the result the parameter {@code scale} is used. If rounding
             is required to meet the specified scale, then the specified rounding mode
             {@code roundingMode} is applied.
            
             @param divisor
                        value by which {@code this} is divided.
             @param scale
                        the scale of the result returned.
             @param roundingMode
                        rounding mode to be used to round the result.
             @return {@code this / divisor} rounded according to the given rounding
                     mode.
             @throws NullPointerException
                         if {@code divisor == null} or {@code roundingMode == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code roundingMode == RoundingMode.UNNECESSAR}Y and
                         rounding is necessary according to the given scale and given
                         precision.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,System.Int32)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             The scale of the result is the scale of {@code this}. If rounding is
             required to meet the specified scale, then the specified rounding mode
             {@code roundingMode} is applied.
            
             @param divisor
                        value by which {@code this} is divided.
             @param roundingMode
                        rounding mode to be used to round the result.
             @return {@code this / divisor} rounded according to the given rounding
                     mode.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws IllegalArgumentException
                         if {@code roundingMode} is not a valid rounding mode.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code roundingMode == ROUND_UNNECESSARY} and rounding is
                         necessary according to the scale of this.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.RoundingMode)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             The scale of the result is the scale of {@code this}. If rounding is
             required to meet the specified scale, then the specified rounding mode
             {@code roundingMode} is applied.
            
             @param divisor
                        value by which {@code this} is divided.
             @param roundingMode
                        rounding mode to be used to round the result.
             @return {@code this / divisor} rounded according to the given rounding
                     mode.
             @throws NullPointerException
                         if {@code divisor == null} or {@code roundingMode == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code roundingMode == RoundingMode.UNNECESSARY} and
                         rounding is necessary according to the scale of this.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             The scale of the result is the difference of the scales of {@code this}
             and {@code divisor}. If the exact result requires more digits, then the
             scale is adjusted accordingly. For example, {@code 1/128 = 0.0078125}
             which has a scale of {@code 7} and precision {@code 5}.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if the result cannot be represented exactly.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divide(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is {@code this / divisor}.
             The result is rounded according to the passed context {@code mc}. If the
             passed math context specifies precision {@code 0}, then this call is
             equivalent to {@code this.divide(divisor)}.
            
             @param divisor
                        value by which {@code this} is divided.
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null} or {@code mc == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code mc.getRoundingMode() == UNNECESSARY} and rounding
                         is necessary according {@code mc.getPrecision()}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideToIntegralValue(biz.ritter.javapi.math.BigDecimal)">
             Returns a new {@code BigDecimal} whose value is the integral part of
             {@code this / divisor}. The quotient is rounded down towards zero to the
             next integer. For example, {@code 0.5/0.2 = 2}.
            
             @param divisor
                        value by which {@code this} is divided.
             @return integral part of {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideToIntegralValue(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is the integral part of
             {@code this / divisor}. The quotient is rounded down towards zero to the
             next integer. The rounding mode passed with the parameter {@code mc} is
             not considered. But if the precision of {@code mc > 0} and the integral
             part requires more digits, then an {@code ArithmeticException} is thrown.
            
             @param divisor
                        value by which {@code this} is divided.
             @param mc
                        math context which determines the maximal precision of the
                        result.
             @return integral part of {@code this / divisor}.
             @throws NullPointerException
                         if {@code divisor == null} or {@code mc == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @throws ArithmeticException
                         if {@code mc.getPrecision() > 0} and the result requires more
                         digits to be represented.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.remainder(biz.ritter.javapi.math.BigDecimal)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.remainder(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideAndRemainder(biz.ritter.javapi.math.BigDecimal)">
             Returns a {@code BigDecimal} array which contains the integral part of
             {@code this / divisor} at index 0 and the remainder {@code this %
             divisor} at index 1. The quotient is rounded down towards zero to the
             next integer.
            
             @param divisor
                        value by which {@code this} is divided.
             @return {@code [this.divideToIntegralValue(divisor),
                     this.remainder(divisor)]}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @see #divideToIntegralValue
             @see #remainder
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.divideAndRemainder(biz.ritter.javapi.math.BigDecimal,biz.ritter.javapi.math.MathContext)">
             Returns a {@code BigDecimal} array which contains the integral part of
             {@code this / divisor} at index 0 and the remainder {@code this %
             divisor} at index 1. The quotient is rounded down towards zero to the
             next integer. The rounding mode passed with the parameter {@code mc} is
             not considered. But if the precision of {@code mc > 0} and the integral
             part requires more digits, then an {@code ArithmeticException} is thrown.
            
             @param divisor
                        value by which {@code this} is divided.
             @param mc
                        math context which determines the maximal precision of the
                        result.
             @return {@code [this.divideToIntegralValue(divisor),
                     this.remainder(divisor)]}.
             @throws NullPointerException
                         if {@code divisor == null}.
             @throws ArithmeticException
                         if {@code divisor == 0}.
             @see #divideToIntegralValue
             @see #remainder
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.pow(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.pow(System.Int32,biz.ritter.javapi.math.MathContext)" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.abs">
             Returns a new {@code BigDecimal} whose value is the absolute value of
             {@code this}. The scale of the result is the same as the scale of this.
            
             @return {@code abs(this)}
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.abs(biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is the absolute value of
             {@code this}. The result is rounded according to the passed context
             {@code mc}.
            
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code abs(this)}
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.negate">
             Returns a new {@code BigDecimal} whose value is the {@code -this}. The
             scale of the result is the same as the scale of this.
            
             @return {@code -this}
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.negate(biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is the {@code -this}. The
             result is rounded according to the passed context {@code mc}.
            
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code -this}
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.plus">
             Returns a new {@code BigDecimal} whose value is {@code +this}. The scale
             of the result is the same as the scale of this.
            
             @return {@code this}
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.plus(biz.ritter.javapi.math.MathContext)">
             Returns a new {@code BigDecimal} whose value is {@code +this}. The result
             is rounded according to the passed context {@code mc}.
            
             @param mc
                        rounding mode and precision for the result of this operation.
             @return {@code this}, rounded
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.signum" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.scale">
             Returns the scale of this {@code BigDecimal}. The scale is the number of
             digits behind the decimal point. The value of this {@code BigDecimal} is
             the unsignedValue * 10^(-scale). If the scale is negative, then this
             {@code BigDecimal} represents a big integer.
            
             @return the scale of this {@code BigDecimal}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.precision">
             Returns the precision of this {@code BigDecimal}. The precision is the
             number of decimal digits used to represent this decimal. It is equivalent
             to the number of digits of the unscaled value. The precision of {@code 0}
             is {@code 1} (independent of the scale).
            
             @return the precision of this {@code BigDecimal}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.unscaledValue">
             Returns the unscaled value (mantissa) of this {@code BigDecimal} instance
             as a {@code BigInteger}. The unscaled value can be computed as {@code
             this} 10^(scale).
            
             @return unscaled value (this * 10^(scale)).
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.round(biz.ritter.javapi.math.MathContext)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.setScale(System.Int32,biz.ritter.javapi.math.RoundingMode)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.setScale(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.setScale(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.movePointLeft(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.movePointRight(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.scaleByPowerOfTen(System.Int32)" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.stripTrailingZeros">
             Returns a new {@code BigDecimal} instance with the same value as {@code
             this} but with a unscaled value where the trailing zeros have been
             removed. If the unscaled value of {@code this} has n trailing zeros, then
             the scale and the precision of the result has been reduced by n.
            
             @return a new {@code BigDecimal} instance equivalent to this where the
                     trailing zeros of the unscaled value have been removed.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.compareTo(biz.ritter.javapi.math.BigDecimal)" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.Equals(System.Object)">
             Returns {@code true} if {@code x} is a {@code BigDecimal} instance and if
             this instance is equal to this big decimal. Two big decimals are equal if
             their unscaled value and their scale is equal. For example, 1.0
             (10*10^(-1)) is not equal to 1.00 (100*10^(-2)). Similarly, zero
             instances are not equal if their scale differs.
            
             @param x
                        object to be compared with {@code this}.
             @return true if {@code x} is a {@code BigDecimal} and {@code this == x}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.min(biz.ritter.javapi.math.BigDecimal)">
             Returns the minimum of this {@code BigDecimal} and {@code val}.
            
             @param val
                        value to be used to compute the minimum with this.
             @return {@code min(this, val}.
             @throws NullPointerException
                         if {@code val == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.max(biz.ritter.javapi.math.BigDecimal)">
             Returns the maximum of this {@code BigDecimal} and {@code val}.
            
             @param val
                        value to be used to compute the maximum with this.
             @return {@code max(this, val}.
             @throws NullPointerException
                         if {@code val == null}.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.GetHashCode">
             Returns a hash code for this {@code BigDecimal}.
            
             @return hash code for {@code this}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.ToString" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.toEngineeringString" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.toPlainString" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.toBigInteger">
             Returns this {@code BigDecimal} as a big integer instance. A fractional
             part is discarded.
            
             @return this {@code BigDecimal} as a big integer instance.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.toBigIntegerExact">
             Returns this {@code BigDecimal} as a big integer instance if it has no
             fractional part. If this {@code BigDecimal} has a fractional part, i.e.
             if rounding would be necessary, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a big integer value.
             @throws ArithmeticException
                         if rounding is necessary.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.longValue">
             Returns this {@code BigDecimal} as an long value. Any fractional part is
             discarded. If the integral part of {@code this} is too big to be
             represented as an long, then {@code this} % 2^64 is returned.
            
             @return this {@code BigDecimal} as a long value.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.longValueExact">
             Returns this {@code BigDecimal} as a long value if it has no fractional
             part and if its value fits to the int range ([-2^{63}..2^{63}-1]). If
             these conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a long value.
             @throws ArithmeticException
                         if rounding is necessary or the number doesn't fit in a long.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.intValue">
             Returns this {@code BigDecimal} as an int value. Any fractional part is
             discarded. If the integral part of {@code this} is too big to be
             represented as an int, then {@code this} % 2^32 is returned.
            
             @return this {@code BigDecimal} as a int value.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.intValueExact">
             Returns this {@code BigDecimal} as a int value if it has no fractional
             part and if its value fits to the int range ([-2^{31}..2^{31}-1]). If
             these conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a int value.
             @throws ArithmeticException
                         if rounding is necessary or the number doesn't fit in a int.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.shortValueExact">
             Returns this {@code BigDecimal} as a short value if it has no fractional
             part and if its value fits to the short range ([-2^{15}..2^{15}-1]). If
             these conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a short value.
             @throws ArithmeticException
                         if rounding is necessary of the number doesn't fit in a
                         short.
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.byteValueExact">
             Returns this {@code BigDecimal} as a byte value if it has no fractional
             part and if its value fits to the byte range ([-128..127]). If these
             conditions are not met, an {@code ArithmeticException} is thrown.
            
             @return this {@code BigDecimal} as a byte value.
             @throws ArithmeticException
                         if rounding is necessary or the number doesn't fit in a byte.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.floatValue" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.doubleValue" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.ulp" -->
        <member name="M:biz.ritter.javapi.math.BigDecimal.inplaceRound(biz.ritter.javapi.math.MathContext)">
             It does all rounding work of the public method
             {@code round(MathContext)}, performing an inplace rounding
             without creating a new object.
            
             @param mc
                        the {@code MathContext} for perform the rounding.
             @see #round(MathContext)
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.smallRound(biz.ritter.javapi.math.MathContext,System.Int32)">
             This method implements an efficient rounding for numbers which unscaled
             value fits in the type {@code long}.
            
             @param mc
                        the context to use
             @param discardedPrecision
                        the number of decimal digits that are discarded
             @see #round(MathContext)
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.roundingBehavior(System.Int32,System.Int32,biz.ritter.javapi.math.RoundingMode)">
             Return an increment that can be -1,0 or 1, depending of
             {@code roundingMode}.
            
             @param parityBit
                        can be 0 or 1, it's only used in the case
                        {@code HALF_EVEN}
             @param fraction
                        the mantisa to be analyzed
             @param roundingMode
                        the type of rounding
             @return the carry propagated after rounding
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.valueExact(System.Int32)">
             If {@code intVal} has a fractional part throws an exception,
             otherwise it counts the number of bits of value and checks if it's out of
             the range of the primitive type. If the number fits in the primitive type
             returns this number as {@code long}, otherwise throws an
             exception.
            
             @param bitLengthJOfType
                        number of bits of the type whose value will be calculated
                        exactly
             @return the exact value of the integer part of {@code BigDecimal}
                     when is possible
             @throws ArithmeticException when rounding is necessary or the
                         number don't fit in the primitive type
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.aproxPrecision">
             If the precision already was calculated it returns that value, otherwise
             it calculates a very good approximation efficiently . Note that this
             value will be {@code precision()} or {@code precision()-1}
             in the worst case.
            
             @return an approximation of {@code precision()} value
        </member>
        <member name="M:biz.ritter.javapi.math.BigDecimal.toIntScale(System.Int64)">
             It tests if a scale of type {@code long} fits in 32 bits. It
             returns the same scale being casted to {@code int} type when is
             possible, otherwise throws an exception.
            
             @param longScale
                        a 64 bit scale
             @return a 32 bit scale when is possible
             @throws ArithmeticException when {@code scale} doesn't
                         fit in {@code int} type
             @see #scale
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.zeroScaledBy(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.math.BigDecimal.getUnscaledValue" -->
        <member name="T:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1">
            <summary>
            This class wrapps the IEnumerator / IEnumerable / Enumeration above an Iterator instance. So foreach loop
            and default .net functionality can be used.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.#ctor(biz.ritter.javapi.lang.Iterable{`0})">
            <summary>
            Create new instance for given Iterable object
            </summary>
            <param name="it"></param>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.util.wrapper.EnumerableIterator`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.Boolean">
             The wrapper for the primitive type {@code boolean}.
            
             @since 1.0
        </member>
        <member name="F:biz.ritter.javapi.lang.Boolean.value">
            The boolean value of the receiver.
        </member>
        <member name="F:biz.ritter.javapi.lang.Boolean.TYPE">
            The {@link Class} object that represents the primitive type {@code
            boolean}.
        </member>
        <member name="F:biz.ritter.javapi.lang.Boolean.TRUE">
            The {@code Boolean} object that represents the primitive value
            {@code true}.
        </member>
        <member name="F:biz.ritter.javapi.lang.Boolean.FALSE">
            The {@code Boolean} object that represents the primitive value
            {@code false}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.#ctor(System.String)">
            Constructs a new {@code Boolean} with its boolean value specified by
            {@code string}. If {@code string} is not {@code null} and is equal to
            "true" using a non-case sensitive comparison, the result will be a
            Boolean representing the primitive value {@code true}, otherwise it will
            be a Boolean representing the primitive value {@code false}.
            
            @param string
                       the string representing a boolean value.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.#ctor(System.Boolean)">
            Constructs a new {@code Boolean} with the specified primitive boolean
            value.
            
            @param value
                       the primitive boolean value, {@code true} or {@code false}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.booleanValue">
            Gets the primitive value of this boolean, either {@code true} or
            {@code false}.
            
            @return this object's primitive value, {@code true} or {@code false}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.equals(System.Object)">
            Compares this instance with the specified object and indicates if they
            are equal. In order to be equal, {@code o} must be an instance of
            {@code Boolean} and have the same boolean value as this object.
            
            @param o
                       the object to compare this boolean with.
            @return {@code true} if the specified object is equal to this
                    {@code Boolean}; {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.compareTo(biz.ritter.javapi.lang.Boolean)">
            Compares this object to the specified boolean object to determine their
            relative order.
            
            @param that
                       the boolean object to compare this object to.
            @return 0 if the value of this boolean and the value of {@code that} are
                    equal; a positive value if the value of this boolean is
                    {@code true} and the value of {@code that} is {@code false}; a
                    negative value if the value if this boolean is {@code false} and
                    the value of {@code that} is {@code true}.
            @see java.lang.Comparable
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.GetHashCode">
            Returns an integer hash code for this boolean.
            
            @return this boolean's hash code, which is {@code 1231} for {@code true}
                    values and {@code 1237} for {@code false} values.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.ToString">
            Returns a string containing a concise, human-readable description of this
            boolean.
            
            @return "true" if the value of this boolean is {@code true}, "false"
                    otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.getBoolean(System.String)">
            Returns the {@code boolean} value of the system property identified by
            {@code string}.
            
            @param string
                       the name of the requested system property.
            @return {@code true} if the system property named by {@code string}
                    exists and it is equal to "true" using case insensitive
                    comparison, {@code false} otherwise.
            @see System#getProperty(String)
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.parseBoolean(System.String)">
            Parses the specified string as a {@code boolean}.
            
            @param s
                       the string representation of a boolean value.
            @return {@code true} if {@code s} is not {@code null} and is equal to
                    {@code "true"} using case insensitive comparison, {@code false}
                    otherwise.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.toString(System.Boolean)">
            Converts the specified boolean to its string representation.
            
            @param value
                       the boolean to convert.
            @return "true" if {@code value} is {@code true}, "false" otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Boolean.valueOf(System.String)">
            Parses the specified string as a boolean value.
            
            @param string
                       the string representation of a boolean value.
            @return {@code Boolean.TRUE} if {@code string} is equal to "true" using
                    case insensitive comparison, {@code Boolean.FALSE} otherwise.
            @see #parseBoolean(String)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Boolean.valueOf(System.Boolean)" -->
        <member name="F:biz.ritter.javapi.lang.reflect.Constructor.delegateInstance">
            <summary>
            .net reflection type to delegate methods
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Constructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            Creates a new constructor instance with .net reflection type.
            </summary>
            <param name="ci"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Constructor.newInstance(System.Object[])">
            <summary>
            Create a new instance by calling representing constructor with given arguments.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:biz.ritter.javapi.util.zip.DataFormatException">
            {@code DataFormatException} is used to indicate an error in the format of a
            particular data stream which is to be uncompressed.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DataFormatException.#ctor">
            Constructs a new {@code DataFormatException} instance.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.DataFormatException.#ctor(System.String)">
             Constructs a new {@code DataFormatException} instance with the specified
             message.
            
             @param detailMessage
                        the detail message for the exception.
        </member>
        <member name="T:biz.ritter.javapi.util.Random">
            This class provides methods that generates pseudo-random numbers of different
            types, such as {@code int}, {@code long}, {@code double}, and {@code float}.
            
            @see Properties
            @see PropertyResourceBundle
        </member>
        <member name="F:biz.ritter.javapi.util.Random.haveNextNextGaussian">
            The boolean value indicating if the second Gaussian number is available.
            
            @serial
        </member>
        <member name="F:biz.ritter.javapi.util.Random.seed">
            @serial It is associated with the internal state of this generator.
        </member>
        <member name="F:biz.ritter.javapi.util.Random.nextNextGaussian">
            The second Gaussian generated number.
            
            @serial
        </member>
        <member name="M:biz.ritter.javapi.util.Random.#ctor">
            Construct a random generator with the current time of day in milliseconds
            as the initial state.
            
            @see #setSeed
        </member>
        <member name="M:biz.ritter.javapi.util.Random.#ctor(System.Int64)">
            Construct a random generator with the given {@code seed} as the
            initial state.
            
            @param seed
                       the seed that will determine the initial state of this random
                       number generator.
            @see #setSeed
        </member>
        <member name="M:biz.ritter.javapi.util.Random.next(System.Int32)">
            Returns a pseudo-random uniformly distributed {@code int} value of
            the number of bits specified by the argument {@code bits} as
            described by Donald E. Knuth in <i>The Art of Computer Programming,
            Volume 2: Seminumerical Algorithms</i>, section 3.2.1.
            
            @param bits
                       number of bits of the returned value.
            @return a pseudo-random generated int number.
            @see #nextBytes
            @see #nextDouble
            @see #nextFloat
            @see #nextInt()
            @see #nextInt(int)
            @see #nextGaussian
            @see #nextLong
        </member>
        <member name="M:biz.ritter.javapi.util.Random.nextBoolean">
            Returns the next pseudo-random, uniformly distributed {@code boolean} value
            generated by this generator.
            
            @return a pseudo-random, uniformly distributed boolean value.
        </member>
        <member name="M:biz.ritter.javapi.util.Random.nextBytes(System.Byte[])">
            Modifies the {@code byte} array by a random sequence of {@code byte}s generated by this
            random number generator.
            
            @param buf
                       non-null array to contain the new random {@code byte}s.
            @see #next
        </member>
        <member name="M:biz.ritter.javapi.util.Random.nextDouble">
            Generates a normally distributed random {@code double} number between 0.0
            inclusively and 1.0 exclusively.
            
            @return a random {@code double} in the range [0.0 - 1.0)
            @see #nextFloat
        </member>
        <member name="M:biz.ritter.javapi.util.Random.nextFloat">
            Generates a normally distributed random {@code float} number between 0.0
            inclusively and 1.0 exclusively.
            
            @return float a random {@code float} number between [0.0 and 1.0)
            @see #nextDouble
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Random.nextGaussian" -->
        <member name="M:biz.ritter.javapi.util.Random.nextInt">
            Generates a uniformly distributed 32-bit {@code int} value from
            the random number sequence.
            
            @return a uniformly distributed {@code int} value.
            @see java.lang.Integer#MAX_VALUE
            @see java.lang.Integer#MIN_VALUE
            @see #next
            @see #nextLong
        </member>
        <member name="M:biz.ritter.javapi.util.Random.nextInt(System.Int32)">
            Returns a new pseudo-random {@code int} value which is uniformly distributed
            between 0 (inclusively) and the value of {@code n} (exclusively).
            
            @param n
                       the exclusive upper border of the range [0 - n).
            @return a random {@code int}.
        </member>
        <member name="M:biz.ritter.javapi.util.Random.nextLong">
            Generates a uniformly distributed 64-bit integer value from
            the random number sequence.
            
            @return 64-bit random integer.
            @see java.lang.Integer#MAX_VALUE
            @see java.lang.Integer#MIN_VALUE
            @see #next
            @see #nextInt()
            @see #nextInt(int)
        </member>
        <member name="M:biz.ritter.javapi.util.Random.setSeed(System.Int64)">
            Modifies the seed a using linear congruential formula presented in <i>The
            Art of Computer Programming, Volume 2</i>, Section 3.2.1.
            
            @param seed
                       the seed that alters the state of the random number generator.
            @see #next
            @see #Random()
            @see #Random(long)
        </member>
        <member name="T:biz.ritter.javapi.util.LinkedList`1">
            LinkedList is an implementation of List, backed by a linked list. All
            optional operations are supported, adding, removing and replacing. The
            elements can be any objects.
            
            @since 1.2
        </member>
        <member name="T:biz.ritter.javapi.util.AbstractSequentialList`1">
            AbstractSequentialList is an abstract implementation of the List interface.
            This implementation does not support adding. A subclass must implement the
            abstract method listIterator().
            
            @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.#ctor">
            Constructs a new instance of this AbstractSequentialList.
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the IEnumerator instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.util.AbstractSequentialList`1.GetEnumerator">
            <summary>
            Get the IEnemurator instance for this wrapped java.util.Iterator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.#ctor">
            Constructs a new empty instance of {@code LinkedList}.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.#ctor(biz.ritter.javapi.util.Collection{`0})">
            Constructs a new instance of {@code LinkedList} that holds all of the
            elements contained in the specified {@code collection}. The order of the
            elements in this new {@code LinkedList} will be determined by the
            iteration order of {@code collection}.
            
            @param collection
                       the collection of elements to add.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.LinkedList`1.add(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.LinkedList`1.add(`0)">
            Adds the specified object at the end of this {@code LinkedList}.
            
            @param object
                       the object to add.
            @return always true
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.LinkedList`1.addAll(System.Int32,biz.ritter.javapi.util.Collection{`0})" -->
        <member name="M:biz.ritter.javapi.util.LinkedList`1.addAll(biz.ritter.javapi.util.Collection{`0})">
            Adds the objects in the specified Collection to this {@code LinkedList}.
            
            @param collection
                       the collection of objects.
            @return {@code true} if this {@code LinkedList} is modified,
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.addFirst(`0)">
            Adds the specified object at the beginning of this {@code LinkedList}.
            
            @param object
                       the object to add.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.addLast(`0)">
            Adds the specified object at the end of this {@code LinkedList}.
            
            @param object
                       the object to add.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.clear">
            Removes all elements from this {@code LinkedList}, leaving it empty.
            
            @see List#isEmpty
            @see #size
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.clone">
            Returns a new {@code LinkedList} with the same elements and size as this
            {@code LinkedList}.
            
            @return a shallow copy of this {@code LinkedList}.
            @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.contains(System.Object)">
            Searches this {@code LinkedList} for the specified object.
            
            @param object
                       the object to search for.
            @return {@code true} if {@code object} is an element of this
                    {@code LinkedList}, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.getFirst">
            Returns the first element in this {@code LinkedList}.
            
            @return the first element.
            @throws NoSuchElementException
                        if this {@code LinkedList} is empty.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.getLast">
            Returns the last element in this {@code LinkedList}.
            
            @return the last element
            @throws NoSuchElementException
                        if this {@code LinkedList} is empty
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.lastIndexOf(System.Object)">
            Searches this {@code LinkedList} for the specified object and returns the
            index of the last occurrence.
            
            @param object
                       the object to search for
            @return the index of the last occurrence of the object, or -1 if it was
                    not found.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.LinkedList`1.listIterator(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.LinkedList`1.remove(System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeFirst">
            Removes the first object from this {@code LinkedList}.
            
            @return the removed object.
            @throws NoSuchElementException
                        if this {@code LinkedList} is empty.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeLast">
            Removes the last object from this {@code LinkedList}.
            
            @return the removed object.
            @throws NoSuchElementException
                        if this {@code LinkedList} is empty.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.descendingIterator">
            {@inheritDoc}
            
            @see java.util.Deque#descendingIterator()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.offerFirst(`0)">
            {@inheritDoc}
            
            @see java.util.Deque#offerFirst(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.offerLast(`0)">
            {@inheritDoc}
            
            @see java.util.Deque#offerLast(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.peekFirst">
            {@inheritDoc}
            
            @see java.util.Deque#peekFirst()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.peekLast">
            {@inheritDoc}
            
            @see java.util.Deque#peekLast()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.pollFirst">
            {@inheritDoc}
            
            @see java.util.Deque#pollFirst()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.pollLast">
            {@inheritDoc}
            
            @see java.util.Deque#pollLast()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.pop">
            {@inheritDoc}
            
            @see java.util.Deque#pop()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.push(`0)">
            {@inheritDoc}
            
            @see java.util.Deque#push(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeFirstOccurrence(System.Object)">
            {@inheritDoc}
            
            @see java.util.Deque#removeFirstOccurrence(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.removeLastOccurrence(System.Object)">
            {@inheritDoc}
            
            @see java.util.Deque#removeLastOccurrence(java.lang.Object)
            @since 1.6
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.LinkedList`1.set(System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.LinkedList`1.size">
            Returns the number of elements in this {@code LinkedList}.
            
            @return the number of elements in this {@code LinkedList}.
        </member>
        <member name="M:biz.ritter.javapi.util.LinkedList`1.toArray">
            Returns a new array containing all elements contained in this
            {@code LinkedList}.
            
            @return an array of the elements from this {@code LinkedList}.
        </member>
        <member name="T:biz.ritter.javapi.util.ConcurrentModificationException">
            An {@code ConcurrentModificationException} is thrown when a Collection is
            modified and an existing iterator on the Collection is used to modify the
            Collection as well.
            
            @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.ConcurrentModificationException.#ctor">
            Constructs a new {@code ConcurrentModificationException} with the current
            stack trace filled in.
        </member>
        <member name="M:biz.ritter.javapi.util.ConcurrentModificationException.#ctor(System.String)">
            Constructs a new {@code ConcurrentModificationException} with the current
            stack trace and message filled in.
            
            @param detailMessage
                      the detail message for the exception.
        </member>
        <member name="T:biz.ritter.javapi.nio.CharSequenceAdapter">
            This class wraps a char sequence to be a char buffer.
            <p>
            Implementation notice:
            <ul>
            <li>Char sequence based buffer is always readonly.</li>
            </ul>
            </p>
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.text.FieldPosition" -->
        <member name="M:biz.ritter.javapi.text.FieldPosition.#ctor(System.Int32)">
            Constructs a new {@code FieldPosition} for the specified field.
            
            @param field
                       the field to identify.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.#ctor(biz.ritter.javapi.text.FormatNS.Field)">
            Constructs a new {@code FieldPosition} for the specified {@code Field}
            attribute.
            
            @param attribute
                       the field attribute to identify.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.#ctor(biz.ritter.javapi.text.FormatNS.Field,System.Int32)">
            Constructs a new {@code FieldPosition} for the specified {@code Field}
            attribute and field id.
            
            @param attribute
                       the field attribute to identify.
            @param field
                       the field to identify.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.Equals(System.Object)">
            Compares the specified object to this field position and indicates if
            they are equal. In order to be equal, {@code object} must be an instance
            of {@code FieldPosition} with the same field, begin index and end index.
            
            @param object
                       the object to compare with this object.
            @return {@code true} if the specified object is equal to this field
                    position; {@code false} otherwise.
            @see #hashCode
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getBeginIndex">
            Returns the index of the beginning of the field.
            
            @return the first index of the field.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getEndIndex">
            Returns the index one past the end of the field.
            
            @return one past the index of the last character in the field.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getField">
            Returns the field which is being identified.
            
            @return the field constant.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.getFieldAttribute">
            Returns the attribute which is being identified.
            
            @return the field.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.setBeginIndex(System.Int32)">
            Sets the index of the beginning of the field.
            
            @param index
                       the index of the first character in the field.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.setEndIndex(System.Int32)">
            Sets the index of the end of the field.
            
            @param index
                       one past the index of the last character in the field.
        </member>
        <member name="M:biz.ritter.javapi.text.FieldPosition.ToString">
            Returns the string representation of this field position.
            
            @return the string representation of this field position.
        </member>
        <member name="T:biz.ritter.javapi.util.FormatterClosedException">
            A {@code FormatterClosedException} will be thrown if the formatter has been
            closed.
            
            @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.FormatterClosedException.#ctor">
            Constructs a new {@code FormatterClosedException} with the stack trace
            filled in.
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getMethod(System.String,biz.ritter.javapi.lang.Class[])">
            <summary>
            Return the method
            </summary>
            <param name="name"></param>
            <param name="paramTypes"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getMethod(System.String,System.Type[])">
            <summary>
            In addition, a method is provided to implement some nearlier at .net framework.
            </summary>
            <param name="name"></param>
            <param name="paramTypes"></param>
            <returns></returns>
            <exception cref="T:biz.ritter.javapi.lang.NoSuchMethodException"></exception>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getConstructor(biz.ritter.javapi.lang.Class[])">
            <summary>
            Return the constructor
            </summary>
            <param name="name"></param>
            <param name="paramTypes"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getDelegateInstance">
            <summary>
            This helper method returns the underlying .net type.
            </summary>
            <returns>The type that wrapped.</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getName">
            <summary>
            Return the name
            </summary>
            <returns>class name</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getDeclaredMethods">
            <summary>
            Get all declared Method of this type.
            </summary>
            <returns>method array</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.getSuperclass">
            <summary>
            Return the class from which the current class directly inherit.
            </summary>
            <returns>super class</returns>
        </member>
        <member name="M:biz.ritter.javapi.lang.Class.newInstance">
            <summary>
            Create a new instance by calling default constructor
            </summary>
            <returns>instance of type</returns>
        </member>
        <member name="T:biz.ritter.javapi.beans.Introspector">
            The <code>Introspector</code> is a utility for developers to figure out
            which properties, events, and methods a JavaBean supports.
            <p>
            The <code>Introspector</code> class walks over the class/superclass chain
            of the target bean class. At each level it checks if there is a matching
            <code>BeanInfo</code> class which provides explicit information about the
            bean, and if so uses that explicit information. Otherwise it uses the low
            level reflection APIs to study the target class and uses design patterns to
            analyze its behaviour and then proceeds to continue the introspection with
            its baseclass.
            </p>
            <p>
            To look for the explicit information of a bean:
            </p>
            <ol>
            <li>The <code>Introspector</code> appends "BeanInfo" to the qualified name
            of the bean class, try to use the new class as the "BeanInfo" class. If the
            "BeanInfo" class exsits and returns non-null value when queried for explicit
            information, use the explicit information</li>
            <li>If the first step fails, the <code>Introspector</code> will extract a
            simple class name of the bean class by removing the package name from the
            qualified name of the bean class, append "BeanInfo" to it. And look for the
            simple class name in the packages defined in the "BeanInfo" search path (The
            default "BeanInfo" search path is <code>sun.beans.infos</code>). If it
            finds a "BeanInfo" class and the "BeanInfo" class returns non-null value when
            queried for explicit information, use the explicit information</li>
            </ol>
            
        </member>
        <member name="F:biz.ritter.javapi.beans.Introspector.IGNORE_ALL_BEANINFO">
            Constant values to indicate that the <code>Introspector</code> will
            ignore all <code>BeanInfo</code> class.
        </member>
        <member name="F:biz.ritter.javapi.beans.Introspector.IGNORE_IMMEDIATE_BEANINFO">
            Constant values to indicate that the <code>Introspector</code> will
            ignore the <code>BeanInfo</code> class of the current bean class.
        </member>
        <member name="F:biz.ritter.javapi.beans.Introspector.USE_ALL_BEANINFO">
            Constant values to indicate that the <code>Introspector</code> will use
            all <code>BeanInfo</code> class which have been found. This is the default one.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.beans.Introspector.decapitalize(System.String)" -->
        <member name="M:biz.ritter.javapi.beans.Introspector.flushCaches">
            Flushes all <code>BeanInfo</code> caches.
             
        </member>
        <member name="M:biz.ritter.javapi.beans.Introspector.flushFromCaches(biz.ritter.javapi.lang.Class)">
            Flushes the <code>BeanInfo</code> caches of the specified bean class
            
            @param clazz
                       the specified bean class
        </member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfo(biz.ritter.javapi.lang.Class)">
            Gets the <code>BeanInfo</code> object which contains the information of
            the properties, events and methods of the specified bean class.
            
            <p>
            The <code>Introspector</code> will cache the <code>BeanInfo</code>
            object. Subsequent calls to this method will be answered with the cached
            data.
            </p>
            
            @param beanClass
                       the specified bean class.
            @return the <code>BeanInfo</code> of the bean class.
            @throws IntrospectionException
        </member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfo(biz.ritter.javapi.lang.Class,biz.ritter.javapi.lang.Class)">
            Gets the <code>BeanInfo</code> object which contains the information of
            the properties, events and methods of the specified bean class. It will
            not introspect the "stopclass" and its super class.
            
            <p>
            The <code>Introspector</code> will cache the <code>BeanInfo</code>
            object. Subsequent calls to this method will be answered with the cached
            data.
            </p>
            
            @param beanClass
                       the specified beanClass.
            @param stopClass
                       the sopt class which should be super class of the bean class.
                       May be null.
            @return the <code>BeanInfo</code> of the bean class.
            @throws IntrospectionException
        </member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfo(biz.ritter.javapi.lang.Class,System.Int32)">
            Gets the <code>BeanInfo</code> object which contains the information of
            the properties, events and methods of the specified bean class.
            <ol>
            <li>If <code>flag==IGNORE_ALL_BEANINFO</code>, the
            <code>Introspector</code> will ignore all <code>BeanInfo</code>
            class.</li>
            <li>If <code>flag==IGNORE_IMMEDIATE_BEANINFO</code>, the
            <code>Introspector</code> will ignore the <code>BeanInfo</code> class
            of the current bean class.</li>
            <li>If <code>flag==USE_ALL_BEANINFO</code>, the
            <code>Introspector</code> will use all <code>BeanInfo</code> class
            which have been found.</li>
            </ol>
            <p>
            The <code>Introspector</code> will cache the <code>BeanInfo</code>
            object. Subsequent calls to this method will be answered with the cached
            data.
            </p>
            
            @param beanClass
                       the specified bean class.
            @param flags
                       the flag to control the usage of the explicit
                       <code>BeanInfo</code> class.
            @return the <code>BeanInfo</code> of the bean class.
            @throws IntrospectionException
        </member>
        <member name="M:biz.ritter.javapi.beans.Introspector.getBeanInfoSearchPath">
            Gets an array of search packages.
            
            @return an array of search packages.
        </member>
        <member name="M:System.JavaExtensions.matches(System.String,System.String)">
            <summary>
            Check string instance for matching giving regular expression.
            </summary>
            <param name="str">instance</param>
            <param name="expr">regular expression</param>
            <returns></returns>
        </member>
        <member name="M:System.JavaExtensions.getWrapperInstance(System.String)">
            <summary>
            Helper method to create a Java like String wrapper object instance. You can use this wrapper if
            implemented interface like java.lang.Appendable is needed.
            </summary>
            <param name="str">base .net String instance or null</param>
            <returns>Wrapper for given String instance</returns>
        </member>
        <member name="M:System.JavaExtensions.valueOf(System.String,System.Boolean)">
            Converts the specified boolean to its string representation. When the
            boolean is {@code true} return {@code "true"}, otherwise return {@code
            "false"}.
            
            @param value
                       the boolean.
            @return the boolean converted to a string.
        </member>
        <member name="M:System.JavaExtensions.getBytes(System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the
            platform's default charset, storing the result into a new byte array.
            </summary>
            <param name="str"></param>
            <returns>The resultant byte array</returns>
        </member>
        <member name="M:System.JavaExtensions.getBytes(System.String,System.String)">
            <summary>
            Extends System.String
            Encodes this {@code String} into a sequence of bytes using the named
            charset, storing the result into a new byte array.
            
            </summary>
            <exception cref="T:biz.ritter.javapi.io.UnsupportedEncodingException">If the named charset is not supported</exception>
            <param name="str"></param>
            <param name="charsetName"></param>
            <returns></returns>
        </member>
        <member name="M:System.JavaExtensions.toInt(System.DayOfWeek)">
            <summary>
            Convert enumeration value to int valie based on 
            </summary>
            <param name="dayOfWeek">enum value of System.DayOfWeek</param>
            <returns>Sunday == 1, Monday == 2, ...</returns>
            <see cref="T:System.DayOfWeek"/>
        </member>
        <member name="M:org.apache.harmony.luni.util.BinarySearch.binarySearch(System.String,System.Char)">
            Search the sorted characters in the string and return an exact index or
            -1.
            
            @param data
                       the String to search
            @param value
                       the character to search for
            @return the matching index, or -1
        </member>
        <member name="M:org.apache.harmony.luni.util.BinarySearch.binarySearchRange(System.String,System.Char)">
            Search the sorted characters in the string and return the nearest index.
            
            @param data
                       the String to search
            @param c
                       the character to search for
            @return the nearest index
        </member>
        <member name="T:biz.ritter.javapi.util.zip.CRC32">
            <summary>
            The CRC32 class is used to compute a CRC32 checksum from data provided as
            input value.
            <see cref="!:http://issues.apache.org/jira/browse/HADOOP-6148"/>
            <see cref="!:http://www.codeplex.com/npoi"/>
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.getValue">
            <summary>
            Return the CRC checksum
            </summary>
            <returns>Adler32 checksum</returns>
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.reset">
            Resets the Adler32 checksum to it initial state.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.update(System.Int32)">
             Updates this checksum with the byte value provided as integer.
            
             @param val
                        represents the byte to update the checksum.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.update(System.Byte[])">
             Updates this checksum with the bytes contained in buffer {@code buf}.
            
             @param buf
                        the buffer holding the data to update the checksum with.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CRC32.update(System.Byte[],System.Int32,System.Int32)">
             Updates this checksum with n bytes of data obtained from buffer {@code
             buf}, starting at offset {@code off}.
            
             @param buf
                        the buffer to update the checksum.
             @param off
                        the offset in {@code buf} to obtain data from.
             @param nbytes
                        the number of bytes to read from {@code buf}.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T1">
            T1[x] is ~CRC(x) 
        </member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T2">
            T2[x] is ~CRC(x followed by one 0x00 byte) 
        </member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T3">
            T3[x] is ~CRC(x followed by two 0x00 bytes) 
        </member>
        <member name="F:biz.ritter.javapi.util.zip.CRC32.T4">
            T4[x] is ~CRC(x followed by three 0x00 bytes) 
        </member>
        <member name="T:biz.ritter.javapi.util.zip.CheckedInputStream">
            The {@code CheckedInputStream} class is used to maintain a checksum at the
            same time as the data, on which the checksum is computed, is read from a
            stream. The purpose of this checksum is to establish data integrity,
            comparing the computed checksum against a published checksum value.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.#ctor(biz.ritter.javapi.io.InputStream,biz.ritter.javapi.util.zip.Checksum)">
             Constructs a new {@code CheckedInputStream} on {@code InputStream}
             {@code is}. The checksum will be calculated using the algorithm
             implemented by {@code csum}.
            
             @param is
                        the input stream to calculate checksum from.
             @param csum
                        an entity implementing the checksum algorithm.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.read">
             Reads one byte of data from the underlying input stream and updates the
             checksum with the byte data.
            
             @return {@code -1} at the end of the stream, a single byte value
                     otherwise.
             @throws IOException
                         if an {@code IOException} occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.read(System.Byte[],System.Int32,System.Int32)">
             Reads up to n bytes of data from the underlying input stream, storing it
             into {@code buf}, starting at offset {@code off}. The checksum is
             updated with the bytes read.
            
             @param buf
                        the byte array in which to store the bytes read.
             @param off
                        the initial position in {@code buf} to store the bytes read
                        from this stream.
             @param nbytes
                        the maximum number of bytes to store in {@code buf}.
             @return the number of bytes actually read or {@code -1} if arrived at the
                     end of the filtered stream while reading the data.
             @throws IOException
                         if this stream is closed or some I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.getChecksum">
             Returns the checksum calculated on the stream read so far.
            
             @return the updated checksum.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.CheckedInputStream.skip(System.Int64)">
             Skip up to n bytes of data on the underlying input stream. Any skipped
             bytes are added to the running checksum value.
            
             @param nbytes
                        the number of bytes to skip.
             @throws IOException
                         if this stream is closed or another I/O error occurs.
             @return the number of bytes skipped.
        </member>
        <member name="T:biz.ritter.javapi.util.Stack`1">
            {@code Stack} is a Last-In/First-Out(LIFO) data structure which represents a
            stack of objects. It enables users to pop to and push from the stack,
            including null objects. There is no limit to the size of the stack.
        </member>
        <member name="M:biz.ritter.javapi.util.Stack`1.#ctor">
            Constructs a stack with the default size of {@code Vector}.
        </member>
        <member name="M:biz.ritter.javapi.util.Stack`1.empty">
            Returns whether the stack is empty or not.
            
            @return {@code true} if the stack is empty, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Stack`1.peek">
            Returns the element at the top of the stack without removing it.
            
            @return the element at the top of the stack.
            @throws EmptyStackException
                        if the stack is empty.
            @see #pop
        </member>
        <member name="M:biz.ritter.javapi.util.Stack`1.pop">
            Returns the element at the top of the stack and removes it.
            
            @return the element at the top of the stack.
            @throws EmptyStackException
                        if the stack is empty.
            @see #peek
            @see #push
        </member>
        <member name="M:biz.ritter.javapi.util.Stack`1.push(`0)">
            Pushes the specified object onto the top of the stack.
            
            @param object
                       The object to be added on top of the stack.
            @return the object argument.
            @see #peek
            @see #pop
        </member>
        <member name="M:biz.ritter.javapi.util.Stack`1.search(System.Object)">
            Returns the index of the first occurrence of the object, starting from
            the top of the stack.
            
            @return the index of the first occurrence of the object, assuming that
                    the topmost object on the stack has a distance of one.
            @param o
                       the object to be searched.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarVerifier.#ctor(System.String)">
             Constructs and returns a new instance of {@code JarVerifier}.
            
             @param name
                        the name of the JAR file being verified.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarVerifier.addMetaEntry(System.String,System.Byte[])">
             Add a new meta entry to the internal collection of data held on each JAR
             entry in the {@code META-INF} directory including the manifest
             file itself. Files associated with the signing of a JAR would also be
             added to this collection.
            
             @param name
                        the name of the file located in the {@code META-INF}
                        directory.
             @param buf
                        the file bytes for the file called {@code name}.
             @see #removeMetaEntries()
        </member>
        <member name="T:biz.ritter.javapi.util.EmptyStackException">
             An {@code EmptyStackException} is thrown if the pop/peek method of a stack is
             executed on an empty stack.
            
             @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.EmptyStackException.#ctor">
            Constructs a new {@code EmptyStackException} with the stack trace filled
            in.
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadOnlyBufferException">
            A {@code ReadOnlyBufferException} is thrown when some write operation is
            called on a read-only buffer.
        </member>
        <member name="M:biz.ritter.javapi.nio.ReadOnlyBufferException.#ctor">
            Constructs a {@code ReadOnlyBufferException}.
        </member>
        <member name="T:biz.ritter.javapi.nio.HeapByteBuffer">
            <summary>
            HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
            the implementation of array based byte buffers.
            <p>
            HeapByteBuffer implements all the shared readonly methods and is extended by
            the other two classes.
            </p>
            <p>
            All methods are marked final for runtime performance.
            </p>
            
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.UnsupportedCharsetException">
            An {@code UnsupportedCharsetException} is thrown when an unsupported charset
            name is encountered.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.UnsupportedCharsetException.#ctor(System.String)">
            Constructs a new {@code UnsupportedCharsetException} with the supplied
            charset name.
            
            @param charset
                       the encountered unsupported charset name.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.UnsupportedCharsetException.getCharsetName">
            Gets the encountered unsupported charset name.
            
            @return the encountered unsupported charset name.
        </member>
        <member name="F:biz.ritter.javapi.net.URL.delegateInstance">
            <summary>
            <i>Hence every URL is a URI, abstractly speaking, but not every URI is a URL. [Javadoc for java.net.URI, JDK 1.7b92]</i>
            </summary>
        </member>
        <member name="T:biz.ritter.javapi.lang.IllegalAccessException">
            Thrown when a program attempts to access a field or method which is not
            accessible from the location where the reference is made.
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalAccessException.#ctor">
            Constructs a new {@code IllegalAccessException} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.IllegalAccessException.#ctor(System.String)">
            Constructs a new {@code IllegalAccessException} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.io.UTFDataFormatException">
            Signals that an incorrectly encoded UTF-8 string has been encountered, most
            likely while reading some {@link DataInputStream}.
            
            @see DataInputStream#readUTF()
        </member>
        <member name="M:biz.ritter.javapi.io.UTFDataFormatException.#ctor">
            Constructs a new {@code UTFDataFormatException} with its stack trace
            filled in.
        </member>
        <member name="M:biz.ritter.javapi.io.UTFDataFormatException.#ctor(System.String)">
            Constructs a new {@code UTFDataFormatException} with its stack trace and
            detail message filled in.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="T:biz.ritter.javapi.io.StringWriter">
            A specialized {@link Writer} that writes characters to a {@code StringBuffer}
            in a sequential manner, appending them in the process. The result can later
            be queried using the {@link #StringWriter(int)} or {@link #toString()}
            methods.
            
            @see StringReader
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.#ctor">
            Constructs a new {@code StringWriter} which has a {@link StringBuffer}
            allocated with the default size of 16 characters. The {@code
            StringBuffer} is also the {@code lock} used to synchronize access to this
            writer.
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.#ctor(System.Int32)">
            Constructs a new {@code StringWriter} which has a {@link StringBuffer}
            allocated with a size of {@code initialSize} characters. The {@code
            StringBuffer} is also the {@code lock} used to synchronize access to this
            writer.
            
            @param initialSize
                       the intial size of the target string buffer.
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.close">
            Calling this method has no effect. In contrast to most {@code Writer} subclasses,
            the other methods in {@code StringWriter} do not throw an {@code IOException} if
            {@code close()} has been called.
            
            @throws IOException
                        if an error occurs while closing this writer.
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.flush">
            Calling this method has no effect.
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.getBuffer">
            Gets a reference to this writer's internal {@link StringBuffer}. Any
            changes made to the returned buffer are reflected in this writer.
            
            @return a reference to this writer's internal {@code StringBuffer}.
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.ToString">
            Gets a copy of the contents of this writer as a string.
            
            @return this writer's contents as a string.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.StringWriter.write(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.StringWriter.write(System.Int32)">
            Writes one character to this writer's {@code StringBuffer}. Only the two
            least significant bytes of the integer {@code oneChar} are written.
            
            @param oneChar
                       the character to write to this writer's {@code StringBuffer}.
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.write(System.String)">
            Writes the characters from the specified string to this writer's {@code
            StringBuffer}.
            
            @param str
                       the non-null string containing the characters to write.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.StringWriter.write(System.String,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.StringWriter.append(System.Char)">
            Appends the character {@code c} to this writer's {@code StringBuffer}.
            This method works the same way as {@link #write(int)}.
            
            @param c
                       the character to append to the target stream.
            @return this writer.
        </member>
        <member name="M:biz.ritter.javapi.io.StringWriter.append(biz.ritter.javapi.lang.CharSequence)">
            Appends the character sequence {@code csq} to this writer's {@code
            StringBuffer}. This method works the same way as {@code
            StringWriter.write(csq.toString())}. If {@code csq} is {@code null}, then
            the string "null" is written to the target stream.
            
            @param csq
                       the character sequence appended to the target.
            @return this writer.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.StringWriter.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <member name="T:biz.ritter.javapi.util.zip.RAFStream">
             Wrap a stream around a RandomAccessFile.  The RandomAccessFile is shared
             among all streams returned by getInputStream(), so we have to synchronize
             access to it.  (We can optimize this by adding buffering here to reduce
             collisions.)
            
             <p>We could support mark/reset, but we don't currently need them.</p>
        </member>
        <member name="T:biz.ritter.javapi.util.Arrays`1">
            {@code Arrays} contains static methods which operate on arrays.
            
            @since 1.2
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Byte[],System.Byte)">
            Fills the specified array with the specified element.
            @param array
                       the {@code byte} array to fill.
            @param value
                       the {@code byte} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Byte[],System.Int32,System.Int32,System.Byte)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Int16[],System.Int16)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code short} array to fill.
            @param value
                       the {@code short} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Int16[],System.Int32,System.Int32,System.Int16)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Char[],System.Char)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code char} array to fill.
            @param value
                       the {@code char} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Char[],System.Int32,System.Int32,System.Char)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Int32[],System.Int32)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code int} array to fill.
            @param value
                       the {@code int} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Int32[],System.Int32,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Int64[],System.Int64)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code long} array to fill.
            @param value
                       the {@code long} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Int64[],System.Int32,System.Int32,System.Int64)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Single[],System.Single)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code float} array to fill.
            @param value
                       the {@code float} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Single[],System.Int32,System.Int32,System.Single)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Double[],System.Double)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code double} array to fill.
            @param value
                       the {@code double} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Double[],System.Int32,System.Int32,System.Double)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Boolean[],System.Boolean)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code boolean} array to fill.
            @param value
                       the {@code boolean} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Boolean[],System.Int32,System.Int32,System.Boolean)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.fill(System.Object[],System.Object)">
            Fills the specified array with the specified element.
            
            @param array
                       the {@code Object} array to fill.
            @param value
                       the {@code Object} element.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(System.Object[],System.Int32,System.Int32,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.fill(`0[],System.Int32,System.Int32,`0)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Byte[],System.Byte[])">
            Compares the two arrays.
            
            @param array1
                       the first {@code byte} array.
            @param array2
                       the second {@code byte} array.
            @return {@code true} if both arrays are {@code null} or if the arrays have the
                    same length and the elements at each index in the two arrays are
                    equal, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Int16[],System.Int16[])">
            Compares the two arrays.
            
            @param array1
                       the first {@code short} array.
            @param array2
                       the second {@code short} array.
            @return {@code true} if both arrays are {@code null} or if the arrays have the
                    same length and the elements at each index in the two arrays are
                    equal, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Char[],System.Char[])">
            Compares the two arrays.
            
            @param array1
                       the first {@code char} array.
            @param array2
                       the second {@code char} array.
            @return {@code true} if both arrays are {@code null} or if the arrays have the
                    same length and the elements at each index in the two arrays are
                    equal, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Int32[],System.Int32[])">
            Compares the two arrays.
            
            @param array1
                       the first {@code int} array.
            @param array2
                       the second {@code int} array.
            @return {@code true} if both arrays are {@code null} or if the arrays have the
                    same length and the elements at each index in the two arrays are
                    equal, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Int64[],System.Int64[])">
            Compares the two arrays.
            
            @param array1
                       the first {@code long} array.
            @param array2
                       the second {@code long} array.
            @return {@code true} if both arrays are {@code null} or if the arrays have the
                    same length and the elements at each index in the two arrays are
                    equal, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Boolean[],System.Boolean[])">
            Compares the two arrays.
            
            @param array1
                       the first {@code boolean} array.
            @param array2
                       the second {@code boolean} array.
            @return {@code true} if both arrays are {@code null} or if the arrays have the
                    same length and the elements at each index in the two arrays are
                    equal, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.equals(System.Object[],System.Object[])">
            Compares the two arrays.
            
            @param array1
                       the first {@code Object} array.
            @param array2
                       the second {@code Object} array.
            @return {@code true} if both arrays are {@code null} or if the arrays have the
                    same length and the elements at each index in the two arrays are
                    equal according to {@code equals()}, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.binarySearch(System.Int32[],System.Int32,System.Int32,System.Int32)">
            Performs a binary search for the specified element in a part of the
            specified sorted array.
            
            @param array
                       the sorted int array to search
            @param startIndex
                       the inclusive start index
            @param endIndex
                       the exclusive end index
            @param value
                       the int element to find
            @return the non-negative index of the element, or a negative index which
                    is the -index - 1 where the element would be inserted
            @throws IllegalArgumentException -
                        if startIndex is bigger than endIndex
            @throws ArrayIndexOutOfBoundsException -
                        if startIndex is smaller than zero or or endIndex is bigger
                        than length of array
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.binarySearch(System.Int32[],System.Int32)">
            Performs a binary search for the specified element in the specified
            sorted array.
            
            @param array
                       the sorted int array to search
            @param value
                       the int element to find
            @return the non-negative index of the element, or a negative index which
                    is the -index - 1 where the element would be inserted
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.checkIndexForBinarySearch(System.Int32,System.Int32,System.Int32)">
            Fills the array with the given value.
            
            @param length
                       length of the array
            @param start
                       start index
            @param end
                       end index
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.asList``1(``0[])">
            Returns a {@code List} of the objects in the specified array. The size of the
            {@code List} cannot be modified, i.e. adding and removing are unsupported, but
            the elements can be set. Setting an element modifies the underlying
            array.
            
            @param array
                       the array.
            @return a {@code List} of the elements of the specified array.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.sort``1(``0[],System.Int32,System.Int32,biz.ritter.javapi.util.Comparator{``0})" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.sort``1(``0[],biz.ritter.javapi.util.Comparator{``0})">
            Sorts the specified array using the specified {@code Comparator}. All elements
            must be comparable to each other without a {@code ClassCastException} being thrown.
            
            @param array
                       the {@code Object} array to be sorted.
            @param comparator
                       the {@code Comparator}.
            @throws ClassCastException
                           if elements in the array cannot be compared to each other
                           using the {@code Comparator}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Arrays`1.sort(System.Object[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.util.Arrays`1.mergeSort(System.Object[],System.Object[],System.Int32,System.Int32)">
            Performs a sort on the section of the array between the given indices
            using a mergesort with exponential search algorithm (in which the merge
            is performed by exponential search). n*log(n) performance is guaranteed
            and in the average case it will be faster then any mergesort in which the
            merge is performed by linear search.
            
            @param in -
                       the array for sorting.
            @param out -
                       the result, sorted array.
            @param start
                       the start index
            @param end
                       the end index + 1
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.mergeSort(System.Object[],System.Object[],System.Int32,System.Int32,biz.ritter.javapi.util.Comparator{System.Object})">
            Performs a sort on the section of the array between the given indices
            using a mergesort with exponential search algorithm (in which the merge
            is performed by exponential search). n*log(n) performance is guaranteed
            and in the average case it will be faster then any mergesort in which the
            merge is performed by linear search.
            
            @param in -
                       the array for sorting.
            @param out -
                       the result, sorted array.
            @param start
                       the start index
            @param end
                       the end index + 1
            @param c -
                       the comparator to determine the order of the array.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.stableStringSort(System.String[],System.Int32,System.Int32)">
            Performs a sort on the given String array. Elements will be re-ordered into
            ascending order.
            
            @param arr -
                       the array to sort
            @param start -
                       the start index
            @param end -
                       the end index + 1
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.stableStringSort(System.String[],System.String[],System.String[],System.Int32,System.Int32,System.Int32)">
            Performs a sort on the given String array. Elements will be re-ordered into
            ascending order. Uses a stable ternary quick sort algorithm.
            
            @param arr -
                       the array to sort
            @param src -
                       auxiliary array
            @param dst -
                       auxiliary array
            @param start -
                       the start index
            @param end -
                       the end index + 1
            @param chId -
                       index of char for current sorting
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.copySwap(System.Object[],System.Int32,System.Object[],System.Int32,System.Int32)">
            Copies object from one array to another array with reverse of objects
            order. Source and destination arrays may be the same.
            
            @param src -
                       the source array.
            @param from -
                       starting position in the source array.
            @param dst -
                       the destination array.
            @param to -
                       starting position in the destination array.
            @param len -
                       the number of array elements to be copied.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.swap(System.Int32,System.Int32,System.Object[])">
            Swaps the elements at the given indices in the array.
            
            @param a -
                       the index of one element to be swapped.
            @param b -
                       the index of the other element to be swapped.
            @param arr -
                       the array in which to swap elements.
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.find(System.Object[],System.Object,System.Int32,System.Int32,System.Int32,biz.ritter.javapi.util.Comparator{System.Object})">
            Finds the place of specified range of specified sorted array, where the
            element should be inserted for getting sorted array. Uses exponential
            search algorithm.
            
            @param arr -
                       the array with already sorted range
            @param val -
                       object to be inserted
            @param l -
                       the start index
            @param r -
                       the end index
            @param bnd -
                       possible values 0,-1. "-1" - val is located at index more then
                       elements equals to val. "0" - val is located at index less
                       then elements equals to val.
            @param c -
                       the comparator used to compare Objects
        </member>
        <member name="M:biz.ritter.javapi.util.Arrays`1.find(System.Object[],biz.ritter.javapi.lang.Comparable{System.Object},System.Int32,System.Int32,System.Int32)">
            Finds the place in the given range of specified sorted array, where the
            element should be inserted for getting sorted array. Uses exponential
            search algorithm.
            
            @param arr -
                       the array with already sorted range
            
            @param val -
                       object to be inserted
            
            @param l -
                       the start index
            
            @param r -
                       the end index
            
            @param bnd -
                       possible values 0,-1. "-1" - val is located at index more then
                       elements equals to val. "0" - val is located at index less
                       then elements equals to val.
            
        </member>
        <member name="F:biz.ritter.javapi.util.jar.InitManifest.linebreak">
            Number of subsequent line breaks.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.InitManifest.readHeader">
            Read a single line from the manifest buffer.
        </member>
        <member name="T:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException">
            <summary>
            Thrown when the an array is indexed with a value less than zero, or greater
            than or equal to the size of the array.
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="M:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException.#ctor">
            Constructs a new {@code ArrayIndexOutOfBoundsException} that includes the
            current stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException.#ctor(System.Int32)">
            Constructs a new {@code ArrayIndexOutOfBoundsException} with the current
            stack trace and a detail message that is based on the specified invalid
            {@code index}.
            
            @param index
                       the invalid index.
        </member>
        <member name="M:biz.ritter.javapi.lang.ArrayIndexOutOfBoundsException.#ctor(System.String)">
             Constructs a new {@code ArrayIndexOutOfBoundsException} with the current
             stack trace and the specified detail message.
            
             @param detailMessage
                        the detail message for this exception.
        </member>
        <member name="M:biz.ritter.javapi.io.FileOutputStream.#ctor(biz.ritter.javapi.io.File)">
            <summary>
            Construct new instance with given File object
            </summary>
            <param name="f"></param>
        </member>
        <member name="T:biz.ritter.javapi.io.PushbackReader">
            Wraps an existing {@link Reader} and adds functionality to "push back"
            characters that have been read, so that they can be read again. Parsers may
            find this useful. The number of characters which may be pushed back can be
            specified during construction. If the buffer of pushed back bytes is empty,
            characters are read from the underlying reader.
        </member>
        <member name="F:biz.ritter.javapi.io.PushbackReader.buf">
            The {@code char} array containing the chars to read.
        </member>
        <member name="F:biz.ritter.javapi.io.PushbackReader.pos">
            The current position within the char array {@code buf}. A value
            equal to buf.length indicates no chars available. A value of 0 indicates
            the buffer is full.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.#ctor(biz.ritter.javapi.io.Reader)">
            Constructs a new {@code PushbackReader} with the specified reader as
            source. The size of the pushback buffer is set to the default value of 1
            character.
            
            @param in
                       the source reader.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.#ctor(biz.ritter.javapi.io.Reader,System.Int32)">
            Constructs a new {@code PushbackReader} with {@code in} as source reader.
            The size of the pushback buffer is set to {@code size}.
            
            @param in
                       the source reader.
            @param size
                       the size of the pushback buffer.
            @throws IllegalArgumentException
                        if {@code size} is negative.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.close">
            Closes this reader. This implementation closes the source reader
            and releases the pushback buffer.
            
            @throws IOException
                        if an error occurs while closing this reader.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.mark(System.Int32)">
            Marks the current position in this stream. Setting a mark is not
            supported in this class; this implementation always throws an
            {@code IOException}.
            
            @param readAheadLimit
                       the number of character that can be read from this reader
                       before the mark is invalidated; this parameter is ignored.
            @throws IOException
                        if this method is called.
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.markSupported">
            Indicates whether this reader supports the {@code mark(int)} and
            {@code reset()} methods. {@code PushbackReader} does not support them, so
            it returns {@code false}.
            
            @return always {@code false}.
            @see #mark(int)
            @see #reset()
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.read">
             Reads a single character from this reader and returns it as an integer
             with the two higher-order bytes set to 0. Returns -1 if the end of the
             reader has been reached. If the pushback buffer does not contain any
             available characters then a character from the source reader is returned.
             Blocks until one character has been read, the end of the source reader is
             detected or an exception is thrown.
            
             @return the character read or -1 if the end of the source reader has been
                     reached.
             @throws IOException
                         if this reader is closed or an I/O error occurs while reading
                         from this reader.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackReader.read(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.PushbackReader.ready">
            Indicates whether this reader is ready to be read without blocking.
            Returns {@code true} if this reader will not block when {@code read} is
            called, {@code false} if unknown or blocking will occur.
            
            @return {@code true} if the receiver will not block when
                    {@code read()} is called, {@code false} if unknown
                    or blocking will occur.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
            @see #read()
            @see #read(char[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.PushbackReader.reset">
            Resets this reader to the last marked position. Resetting the reader is
            not supported in this class; this implementation always throws an
            {@code IOException}.
            
            @throws IOException
                        if this method is called.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackReader.unread(System.Char[])" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackReader.unread(System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackReader.unread(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.PushbackReader.skip(System.Int64)" -->
        <member name="T:biz.ritter.javapi.text.ParseException">
            Thrown when the string being parsed is not in the correct form.
        </member>
        <member name="M:biz.ritter.javapi.text.ParseException.#ctor(System.String,System.Int32)">
            Constructs a new instance of this class with its stack trace, detail
            message and the location of the error filled in.
            
            @param detailMessage
                       the detail message for this exception.
            @param location
                       the index at which the parse exception occurred.
        </member>
        <member name="M:biz.ritter.javapi.text.ParseException.getErrorOffset">
            Returns the index at which this parse exception occurred.
            
            @return the location of this exception in the parsed string.
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.CoderMalfunctionError">
            A {@code CoderMalfunctionError} is thrown when the encoder/decoder is
            malfunctioning.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderMalfunctionError.#ctor(biz.ritter.javapi.lang.Exception)">
            Constructs a new {@code CoderMalfunctionError}.
            
            @param ex
                       the original exception thrown by the encoder/decoder.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.nio.charset.CharsetDecoder" -->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.#ctor(biz.ritter.javapi.nio.charset.Charset,System.Single,System.Single)">
            Constructs a new <code>CharsetDecoder</code> using the given
            <code>Charset</code>, average number and maximum number of characters
            created by this decoder for one input byte, and the default replacement
            string "\uFFFD".
            
            @param charset
                       the <code>Charset</code> to be used by this decoder.
            @param averageCharsPerByte
                       the average number of characters created by this decoder for
                       one input byte, must be positive.
            @param maxCharsPerByte
                       the maximum number of characters created by this decoder for
                       one input byte, must be positive.
            @throws IllegalArgumentException
                        if <code>averageCharsPerByte</code> or
                        <code>maxCharsPerByte</code> is negative.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.averageCharsPerByte">
            Gets the average number of characters created by this decoder for a
            single input byte.
            
            @return the average number of characters created by this decoder for a
                    single input byte.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.charset">
            Gets the <code>Charset</code> which this decoder uses.
            
            @return the <code>Charset</code> which this decoder uses.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetDecoder.decode(biz.ritter.javapi.nio.ByteBuffer)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetDecoder.decode(biz.ritter.javapi.nio.ByteBuffer,biz.ritter.javapi.nio.CharBuffer,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetDecoder.decodeLoop(biz.ritter.javapi.nio.ByteBuffer,biz.ritter.javapi.nio.CharBuffer)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetDecoder.detectedCharset" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetDecoder.flush(biz.ritter.javapi.nio.CharBuffer)" -->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implFlush(biz.ritter.javapi.nio.CharBuffer)">
            Flushes this decoder. The default implementation does nothing and always
            returns <code>CoderResult.UNDERFLOW</code>; this method can be
            overridden if needed.
            
            @param out
                       the output buffer.
            @return <code>CoderResult.UNDERFLOW</code> or
                    <code>CoderResult.OVERFLOW</code>.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implOnMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Notifies that this decoder's <code>CodingErrorAction</code> specified
            for malformed input error has been changed. The default implementation
            does nothing; this method can be overridden if needed.
            
            @param newAction
                       the new action.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implOnUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Notifies that this decoder's <code>CodingErrorAction</code> specified
            for unmappable character error has been changed. The default
            implementation does nothing; this method can be overridden if needed.
            
            @param newAction
                       the new action.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implReplaceWith(System.String)">
            Notifies that this decoder's replacement has been changed. The default
            implementation does nothing; this method can be overridden if needed.
            
            @param newReplacement
                       the new replacement string.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.implReset">
            Reset this decoder's charset related state. The default implementation
            does nothing; this method can be overridden if needed.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.isAutoDetecting">
            Indicates whether this decoder implements an auto-detecting charset.
            
            @return <code>true</code> if this decoder implements an auto-detecting
                    charset.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.CharsetDecoder.isCharsetDetected" -->
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.malformedInputAction">
            Gets this decoder's <code>CodingErrorAction</code> when malformed input
            occurred during the decoding process.
            
            @return this decoder's <code>CodingErrorAction</code> when malformed
                    input occurred during the decoding process.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.maxCharsPerByte">
            Gets the maximum number of characters which can be created by this
            decoder for one input byte, must be positive.
            
            @return the maximum number of characters which can be created by this
                    decoder for one input byte, must be positive.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.onMalformedInput(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Sets this decoder's action on malformed input errors.
            
            This method will call the
            {@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput}
            method with the given new action as argument.
            
            @param newAction
                       the new action on malformed input error.
            @return this decoder.
            @throws IllegalArgumentException
                        if {@code newAction} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.onUnmappableCharacter(biz.ritter.javapi.nio.charset.CodingErrorAction)">
            Sets this decoder's action on unmappable character errors.
            
            This method will call the
            {@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter}
            method with the given new action as argument.
            
            @param newAction
                       the new action on unmappable character error.
            @return this decoder.
            @throws IllegalArgumentException
                        if {@code newAction} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.replacement">
            Gets the replacement string, which is never null or empty.
            
            @return the replacement string, cannot be null or empty.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.replaceWith(System.String)">
            Sets the new replacement string.
            
            This method first checks the given replacement's validity, then changes
            the replacement value, and at last calls the
            {@link #implReplaceWith(String) implReplaceWith} method with the given
            new replacement as argument.
            
            @param newReplacement
                       the replacement string, cannot be null or empty. Its length
                       cannot be larger than {@link #maxCharsPerByte()}.
            @return this decoder.
            @throws IllegalArgumentException
                        if the given replacement cannot satisfy the requirement
                        mentioned above.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.reset">
            Resets this decoder. This method will reset the internal status, and then
            calls <code>implReset()</code> to reset any status related to the
            specific charset.
            
            @return this decoder.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CharsetDecoder.unmappableCharacterAction">
            Gets this decoder's <code>CodingErrorAction</code> when an unmappable
            character error occurred during the decoding process.
            
            @return this decoder's <code>CodingErrorAction</code> when an
                    unmappable character error occurred during the decoding process.
        </member>
        <member name="T:biz.ritter.javapi.math.RoundingMode">
            Specifies the rounding behavior for operations whose results cannot be
            represented exactly.
        </member>
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.UP" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.DOWN" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.CEILING" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.FLOOR" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.HALF_UP" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.HALF_DOWN" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.HALF_EVEN" -->
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.RoundingMode.UNNECESSARY" -->
        <member name="F:biz.ritter.javapi.math.RoundingMode.bigDecimalRM">
            The old constant of <code>BigDecimal</code>. 
        </member>
        <member name="M:biz.ritter.javapi.math.RoundingMode.#ctor(System.Int32)">
            It sets the old constant. 
        </member>
        <member name="M:biz.ritter.javapi.math.RoundingMode.valueOf(System.Int32)">
             Converts rounding mode constants from class {@code BigDecimal} into
             {@code RoundingMode} values.
            
             @param mode
                        rounding mode constant as defined in class {@code BigDecimal}
             @return corresponding rounding mode object
        </member>
        <member name="M:biz.ritter.javapi.math.RoundingMode.valueOf(System.String)">
             Converts rounding mode constants from class {@code BigDecimal} into
             {@code RoundingMode} values.
            
             @param mode
                        rounding mode constant as defined in class {@code BigDecimal}
             @return corresponding rounding mode object
        </member>
        <member name="T:biz.ritter.javapi.lang.Float">
            The wrapper for the primitive type {@code float}.
            
            @see java.lang.Number
            @since 1.0
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.TYPE">
             The {@link Class} object that represents the primitive type {@code
             float}.
            
             @since 1.1
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.value">
            The value which the receiver represents.
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.MAX_VALUE">
            Constant for the maximum {@code float} value, (2 - 2<sup>-23</sup>) * 2<sup>127</sup>.
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.MIN_VALUE">
            Constant for the minimum {@code float} value, 2<sup>-149</sup>.
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.MIN_NORMAL">
            <p>
            Constant for the smallest positive normal value of <code>float</code>.
            </p>
            @since 1.6
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.NaN">
            Constant for the Not-a-Number (NaN) value of the {@code float} type.
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.POSITIVE_INFINITY">
            Constant for the Positive Infinity value of the {@code float} type.
        </member>
        <member name="F:biz.ritter.javapi.lang.Float.NEGATIVE_INFINITY">
            Constant for the Negative Infinity value of the {@code float} type.
        </member>
        <member name="M:biz.ritter.javapi.lang.Float.isNaN">
            Indicates whether this object is a <em>Not-a-Number (NaN)</em> value.
            
            @return {@code true} if this float is <em>Not-a-Number</em>;
                    {@code false} if it is a (potentially infinite) float number.
        </member>
        <member name="M:biz.ritter.javapi.lang.Float.isNaN(System.Single)">
            Indicates whether the specified float is a <em>Not-a-Number (NaN)</em>
            value.
            
            @param f
                       the float value to check.
            @return {@code true} if {@code f} is <em>Not-a-Number</em>;
                    {@code false} if it is a (potentially infinite) float number.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.lang.StringBuilder" -->
        <member name="T:biz.ritter.javapi.lang.AbstractStringBuilder">
             A modifiable {@link CharSequence sequence of characters} for use in creating
             and modifying Strings. This class is intended as a base class for
             {@link StringBuffer} and {@link StringBuilder}.
            
             @see StringBuffer
             @see StringBuilder
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.#ctor(System.String)">
            <summary>
            Create new AbstractStringBuilder
            </summary>
            <param name="cs"></param>
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.capacity">
            Returns the number of characters that can be held without growing.
            
            @return the capacity
            @see #ensureCapacity
            @see #length
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.charAt(System.Int32)">
            Retrieves the character at the {@code index}.
            
            @param index
                       the index of the character to retrieve.
            @return the char value.
            @throws IndexOutOfBoundsException
                        if {@code index} is negative or greater than or equal to the
                        current {@link #length()}.
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.ensureCapacity(System.Int32)">
            Ensures that this object has a minimum capacity available before
            requiring the internal buffer to be enlarged. The general policy of this
            method is that if the {@code minimumCapacity} is larger than the current
            {@link #capacity()}, then the capacity will be increased to the largest
            value of either the {@code minimumCapacity} or the current capacity
            multiplied by two plus two. Although this is the general policy, there is
            no guarantee that the capacity will change.
            
            @param min
                       the new minimum capacity to set.
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.getChars(System.Int32,System.Int32,System.Char[],System.Int32)">
             Copies the requested sequence of characters to the {@code char[]} passed
             starting at {@code destStart}.
            
             @param start
                        the inclusive start index of the characters to copy.
             @param end
                        the exclusive end index of the characters to copy.
             @param dest
                        the {@code char[]} to copy the characters to.
             @param destStart
                        the inclusive start index of {@code dest} to begin copying to.
             @throws IndexOutOfBoundsException
                         if the {@code start} is negative, the {@code destStart} is
                         negative, the {@code start} is greater than {@code end}, the
                         {@code end} is greater than the current {@link #length()} or
                         {@code destStart + end - begin} is greater than
                         {@code dest.length}.
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.length">
            The current length.
            
            @return the number of characters contained in this instance.
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.setCharAt(System.Int32,System.Char)">
            Sets the character at the {@code index}.
            
            @param index
                       the zero-based index of the character to replace.
            @param ch
                       the character to set.
            @throws IndexOutOfBoundsException
                        if {@code index} is negative or greater than or equal to the
                        current {@link #length()}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.AbstractStringBuilder.setLength(System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.substring(System.Int32)">
            Returns the String value of the subsequence from the {@code start} index
            to the current end.
            
            @param start
                       the inclusive start index to begin the subsequence.
            @return a String containing the subsequence.
            @throws StringIndexOutOfBoundsException
                        if {@code start} is negative or greater than the current
                        {@link #length()}.
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.substring(System.Int32,System.Int32)">
            Returns the String value of the subsequence from the {@code start} index
            to the {@code end} index.
            
            @param start
                       the inclusive start index to begin the subsequence.
            @param end
                       the exclusive end index to end the subsequence.
            @return a String containing the subsequence.
            @throws StringIndexOutOfBoundsException
                        if {@code start} is negative, greater than {@code end} or if
                        {@code end} is greater than the current {@link #length()}.
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.ToString">
            Returns the current String representation.
            
            @return a String containing the characters in this instance.
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.subSequence(System.Int32,System.Int32)">
            Returns a {@code CharSequence} of the subsequence from the {@code start}
            index to the {@code end} index.
            
            @param start
                       the inclusive start index to begin the subsequence.
            @param end
                       the exclusive end index to end the subsequence.
            @return a CharSequence containing the subsequence.
            @throws IndexOutOfBoundsException
                        if {@code start} is negative, greater than {@code end} or if
                        {@code end} is greater than the current {@link #length()}.
            @since 1.4
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.indexOf(System.String)">
            Searches for the first index of the specified character. The search for
            the character starts at the beginning and moves towards the end.
            
            @param string
                       the string to find.
            @return the index of the specified character, -1 if the character isn't
                    found.
            @see #lastIndexOf(String)
            @since 1.4
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.indexOf(System.String,System.Int32)">
            Searches for the index of the specified character. The search for the
            character starts at the specified offset and moves towards the end.
            
            @param subString
                       the string to find.
            @param start
                       the starting offset.
            @return the index of the specified character, -1 if the character isn't
                    found
            @see #lastIndexOf(String,int)
            @since 1.4
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.lastIndexOf(System.String)">
            Searches for the last index of the specified character. The search for
            the character starts at the end and moves towards the beginning.
            
            @param string
                       the string to find.
            @return the index of the specified character, -1 if the character isn't
                    found.
            @throws NullPointerException
                        if {@code string} is {@code null}.
            @see String#lastIndexOf(java.lang.String)
            @since 1.4
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.lastIndexOf(System.String,System.Int32)">
            Searches for the index of the specified character. The search for the
            character starts at the specified offset and moves towards the beginning.
            
            @param subString
                       the string to find.
            @param start
                       the starting offset.
            @return the index of the specified character, -1 if the character isn't
                    found.
            @throws NullPointerException
                        if {@code subString} is {@code null}.
            @see String#lastIndexOf(String,int)
            @since 1.4
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.trimToSize">
            Trims off any extra capacity beyond the current length. Note, this method
            is NOT guaranteed to change the capacity of this object.
            
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.codePointAt(System.Int32)">
            Retrieves the Unicode code point value at the {@code index}.
            
            @param index
                       the index to the {@code char} code unit.
            @return the Unicode code point value.
            @throws IndexOutOfBoundsException
                        if {@code index} is negative or greater than or equal to
                        {@link #length()}.
            @see Character
            @see Character#codePointAt(char[], int, int)
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.codePointBefore(System.Int32)">
            Retrieves the Unicode code point value that precedes the {@code index}.
            
            @param index
                       the index to the {@code char} code unit within this object.
            @return the Unicode code point value.
            @throws IndexOutOfBoundsException
                        if {@code index} is less than 1 or greater than
                        {@link #length()}.
            @see Character
            @see Character#codePointBefore(char[], int, int)
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.codePointCount(System.Int32,System.Int32)">
            Calculates the number of Unicode code points between {@code beginIndex}
            and {@code endIndex}.
            
            @param beginIndex
                       the inclusive beginning index of the subsequence.
            @param endIndex
                       the exclusive end index of the subsequence.
            @return the number of Unicode code points in the subsequence.
            @throws IndexOutOfBoundsException
                        if {@code beginIndex} is negative or greater than
                        {@code endIndex} or {@code endIndex} is greater than
                        {@link #length()}.
            @see Character
            @see Character#codePointCount(char[], int, int)
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.AbstractStringBuilder.offsetByCodePoints(System.Int32,System.Int32)">
             Returns the index that is offset {@code codePointOffset} code points from
             {@code index}.
            
             @param index
                        the index to calculate the offset from.
             @param codePointOffset
                        the number of code points to count.
             @return the index that is {@code codePointOffset} code points away from
                     index.
             @throws IndexOutOfBoundsException
                         if {@code index} is negative or greater than
                         {@link #length()} or if there aren't enough code points
                         before or after {@code index} to match
                         {@code codePointOffset}.
             @see Character
             @see Character#offsetByCodePoints(char[], int, int, int, int)
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor">
            Constructs an instance with an initial capacity of {@code 16}.
            
            @see #capacity()
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor(System.Int32)">
             Constructs an instance with the specified capacity.
            
             @param capacity
                        the initial capacity to use.
             @throws NegativeArraySizeException
                         if the specified {@code capacity} is negative.
             @see #capacity()
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor(biz.ritter.javapi.lang.CharSequence)">
             Constructs an instance that's initialized with the contents of the
             specified {@code CharSequence}. The capacity of the new builder will be
             the length of the {@code CharSequence} plus 16.
            
             @param seq
                        the {@code CharSequence} to copy into the builder.
             @throws NullPointerException
                        if {@code seq} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.#ctor(System.String)">
             Constructs an instance that's initialized with the contents of the
             specified {@code String}. The capacity of the new builder will be the
             length of the {@code String} plus 16.
            
             @param str
                        the {@code String} to copy into the builder.
             @throws NullPointerException
                        if {@code str} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Boolean)">
             Appends the string representation of the specified {@code boolean} value.
             The {@code boolean} value is converted to a String according to the rule
             defined by {@link String#valueOf(boolean)}.
            
             @param b
                        the {@code boolean} value to append.
             @return this builder.
             @see String#valueOf(boolean)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Char)">
             Appends the string representation of the specified {@code char} value.
             The {@code char} value is converted to a string according to the rule
             defined by {@link String#valueOf(char)}.
            
             @param c
                        the {@code char} value to append.
             @return this builder.
             @see String#valueOf(char)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Int32)">
             Appends the string representation of the specified {@code int} value. The
             {@code int} value is converted to a string according to the rule defined
             by {@link String#valueOf(int)}.
            
             @param i
                        the {@code int} value to append.
             @return this builder.
             @see String#valueOf(int)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Int64)">
             Appends the string representation of the specified {@code long} value.
             The {@code long} value is converted to a string according to the rule
             defined by {@link String#valueOf(long)}.
            
             @param lng
                        the {@code long} value.
             @return this builder.
             @see String#valueOf(long)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Single)">
             Appends the string representation of the specified {@code float} value.
             The {@code float} value is converted to a string according to the rule
             defined by {@link String#valueOf(float)}.
            
             @param f
                        the {@code float} value to append.
             @return this builder.
             @see String#valueOf(float)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Double)">
             Appends the string representation of the specified {@code double} value.
             The {@code double} value is converted to a string according to the rule
             defined by {@link String#valueOf(double)}.
            
             @param d
                        the {@code double} value to append.
             @return this builder.
             @see String#valueOf(double)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Object)">
             Appends the string representation of the specified {@code Object}.
             The {@code Object} value is converted to a string according to the rule
             defined by {@link String#valueOf(Object)}.
            
             @param obj
                        the {@code Object} to append.
             @return this builder.
             @see String#valueOf(Object)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.String)">
             Appends the contents of the specified string. If the string is {@code
             null}, then the string {@code "null"} is appended.
            
             @param str
                        the string to append.
             @return this builder.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(biz.ritter.javapi.lang.StringBuffer)">
             Appends the contents of the specified {@code StringBuffer}. If the
             StringBuffer is {@code null}, then the string {@code "null"} is
             appended.
            
             @param sb
                        the {@code StringBuffer} to append.
             @return this builder.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Char[])">
             Appends the string representation of the specified {@code char[]}.
             The {@code char[]} is converted to a string according to the rule
             defined by {@link String#valueOf(char[])}.
            
             @param ch
                        the {@code char[]} to append..
             @return this builder.
             @see String#valueOf(char[])
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(System.Char[],System.Int32,System.Int32)">
             Appends the string representation of the specified subset of the {@code
             char[]}. The {@code char[]} value is converted to a String according to
             the rule defined by {@link String#valueOf(char[],int,int)}.
            
             @param str
                        the {@code char[]} to append.
             @param offset
                        the inclusive offset index.
             @param len
                        the number of characters.
             @return this builder.
             @throws ArrayIndexOutOfBoundsException
                         if {@code offset} and {@code len} do not specify a valid
                         subsequence.
             @see String#valueOf(char[],int,int)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(biz.ritter.javapi.lang.CharSequence)">
             Appends the string representation of the specified {@code CharSequence}.
             If the {@code CharSequence} is {@code null}, then the string {@code
             "null"} is appended.
            
             @param csq
                        the {@code CharSequence} to append.
             @return this builder.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
             Appends the string representation of the specified subsequence of the
             {@code CharSequence}. If the {@code CharSequence} is {@code null}, then
             the string {@code "null"} is used to extract the subsequence from.
            
             @param csq
                        the {@code CharSequence} to append.
             @param start
                        the beginning index.
             @param end
                        the ending index.
             @return this builder.
             @throws IndexOutOfBoundsException
                         if {@code start} or {@code end} are negative, {@code start}
                         is greater than {@code end} or {@code end} is greater than
                         the length of {@code csq}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.appendCodePoint(System.Int32)">
             Appends the encoded Unicode code point. The code point is converted to a
             {@code char[]} as defined by {@link Character#toChars(int)}.
            
             @param codePoint
                        the Unicode code point to encode and append.
             @return this builder.
             @see Character#toChars(int)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.delete(System.Int32,System.Int32)">
            Deletes a sequence of characters specified by {@code start} and {@code
            end}. Shifts any remaining characters to the left.
            
            @param start
                       the inclusive start index.
            @param end
                       the exclusive end index.
            @return this builder.
            @throws StringIndexOutOfBoundsException
                        if {@code start} is less than zero, greater than the current
                        length or greater than {@code end}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.deleteCharAt(System.Int32)">
            Deletes the character at the specified index. shifts any remaining
            characters to the left.
            
            @param index
                       the index of the character to delete.
            @return this builder.
            @throws StringIndexOutOfBoundsException
                        if {@code index} is less than zero or is greater than or
                        equal to the current length.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Boolean)">
             Inserts the string representation of the specified {@code boolean} value
             at the specified {@code offset}. The {@code boolean} value is converted
             to a string according to the rule defined by
             {@link String#valueOf(boolean)}.
            
             @param offset
                        the index to insert at.
             @param b
                        the {@code boolean} value to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length}.
             @see String#valueOf(boolean)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Char)">
             Inserts the string representation of the specified {@code char} value at
             the specified {@code offset}. The {@code char} value is converted to a
             string according to the rule defined by {@link String#valueOf(char)}.
            
             @param offset
                        the index to insert at.
             @param c
                        the {@code char} value to insert.
             @return this builder.
             @throws IndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
             @see String#valueOf(char)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Int32)">
             Inserts the string representation of the specified {@code int} value at
             the specified {@code offset}. The {@code int} value is converted to a
             String according to the rule defined by {@link String#valueOf(int)}.
            
             @param offset
                        the index to insert at.
             @param i
                        the {@code int} value to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
             @see String#valueOf(int)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Int64)">
             Inserts the string representation of the specified {@code long} value at
             the specified {@code offset}. The {@code long} value is converted to a
             String according to the rule defined by {@link String#valueOf(long)}.
            
             @param offset
                        the index to insert at.
             @param l
                        the {@code long} value to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {code length()}.
             @see String#valueOf(long)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Single)">
             Inserts the string representation of the specified {@code float} value at
             the specified {@code offset}. The {@code float} value is converted to a
             string according to the rule defined by {@link String#valueOf(float)}.
            
             @param offset
                        the index to insert at.
             @param f
                        the {@code float} value to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
             @see String#valueOf(float)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Double)">
             Inserts the string representation of the specified {@code double} value
             at the specified {@code offset}. The {@code double} value is converted
             to a String according to the rule defined by
             {@link String#valueOf(double)}.
            
             @param offset
                        the index to insert at.
             @param d
                        the {@code double} value to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
             @see String#valueOf(double)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Object)">
             Inserts the string representation of the specified {@code Object} at the
             specified {@code offset}. The {@code Object} value is converted to a
             String according to the rule defined by {@link String#valueOf(Object)}.
            
             @param offset
                        the index to insert at.
             @param obj
                        the {@code Object} to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
             @see String#valueOf(Object)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.String)">
             Inserts the specified string at the specified {@code offset}. If the
             specified string is null, then the String {@code "null"} is inserted.
            
             @param offset
                        the index to insert at.
             @param str
                        the {@code String} to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Char[])">
             Inserts the string representation of the specified {@code char[]} at the
             specified {@code offset}. The {@code char[]} value is converted to a
             String according to the rule defined by {@link String#valueOf(char[])}.
            
             @param offset
                        the index to insert at.
             @param ch
                        the {@code char[]} to insert.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
             @see String#valueOf(char[])
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,System.Char[],System.Int32,System.Int32)">
             Inserts the string representation of the specified subsequence of the
             {@code char[]} at the specified {@code offset}. The {@code char[]} value
             is converted to a String according to the rule defined by
             {@link String#valueOf(char[],int,int)}.
            
             @param offset
                        the index to insert at.
             @param str
                        the {@code char[]} to insert.
             @param strOffset
                        the inclusive index.
             @param strLen
                        the number of characters.
             @return this builder.
             @throws StringIndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}, or {@code strOffset} and {@code strLen} do
                         not specify a valid subsequence.
             @see String#valueOf(char[],int,int)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,biz.ritter.javapi.lang.CharSequence)">
             Inserts the string representation of the specified {@code CharSequence}
             at the specified {@code offset}. The {@code CharSequence} is converted
             to a String as defined by {@link CharSequence#toString()}. If {@code s}
             is {@code null}, then the String {@code "null"} is inserted.
            
             @param offset
                        the index to insert at.
             @param s
                        the {@code CharSequence} to insert.
             @return this builder.
             @throws IndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}.
             @see CharSequence#toString()
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.insert(System.Int32,biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)">
             Inserts the string representation of the specified subsequence of the
             {@code CharSequence} at the specified {@code offset}. The {@code
             CharSequence} is converted to a String as defined by
             {@link CharSequence#subSequence(int, int)}. If the {@code CharSequence}
             is {@code null}, then the string {@code "null"} is used to determine the
             subsequence.
            
             @param offset
                        the index to insert at.
             @param s
                        the {@code CharSequence} to insert.
             @param start
                        the start of the subsequence of the character sequence.
             @param end
                        the end of the subsequence of the character sequence.
             @return this builder.
             @throws IndexOutOfBoundsException
                         if {@code offset} is negative or greater than the current
                         {@code length()}, or {@code start} and {@code end} do not
                         specify a valid subsequence.
             @see CharSequence#subSequence(int, int)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.replace(System.Int32,System.Int32,System.String)">
            Replaces the specified subsequence in this builder with the specified
            string.
            
            @param start
                       the inclusive begin index.
            @param end
                       the exclusive end index.
            @param str
                       the replacement string.
            @return this builder.
            @throws StringIndexOutOfBoundsException
                        if {@code start} is negative, greater than the current
                        {@code length()} or greater than {@code end}.
            @throws NullPointerException
                       if {@code str} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.reverse">
            Reverses the order of characters in this builder.
            
            @return this buffer.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.toString">
            Returns the contents of this builder.
            
            @return the string representation of the data in this builder.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.readObject(biz.ritter.javapi.io.ObjectInputStream)">
             Reads the state of a {@code StringBuilder} from the passed stream and
             restores it to this instance.
            
             @param in
                        the stream to read the state from.
             @throws IOException
                         if the stream throws it during the read.
             @throws ClassNotFoundException
                         if the stream throws it during the read.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuilder.writeObject(biz.ritter.javapi.io.ObjectOutputStream)">
             Writes the state of this object to the stream passed.
            
             @param out
                        the stream to write the state to.
             @throws IOException
                         if the stream throws it during the write.
             @serialData {@code int} - the length of this object. {@code char[]} - the
                         buffer from this object, which may be larger than the length
                         field.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.lang.StringBuffer" -->
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor">
            Constructs a new StringBuffer using the default capacity which is 16.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor(System.Int32)">
            Constructs a new StringBuffer using the specified capacity.
            
            @param capacity
                       the initial capacity.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor(System.String)">
            Constructs a new StringBuffer containing the characters in the specified
            string. The capacity of the new buffer will be the length of the
            {@code String} plus the default capacity.
            
            @param string
                       the string content with which to initialize the new instance.
            @throws NullPointerException
                       if {@code string} is {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.#ctor(biz.ritter.javapi.lang.CharSequence)">
            Constructs a StringBuffer and initializes it with the content from the
            specified {@code CharSequence}. The capacity of the new buffer will be
            the length of the {@code CharSequence} plus the default capacity.
            
            @param cs
                       the content to initialize the instance.
            @throws NullPointerException
                       if {@code cs} is {@code null}.
            @since 1.5
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.append(System.Boolean)" -->
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Char)">
            Adds the specified character to the end of this buffer.
            
            @param ch
                       the character to append.
            @return this StringBuffer.
            @see String#valueOf(char)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Double)">
            Adds the string representation of the specified double to the end of this
            StringBuffer.
            
            @param d
                       the double to append.
            @return this StringBuffer.
            @see String#valueOf(double)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Single)">
            Adds the string representation of the specified float to the end of this
            StringBuffer.
            
            @param f
                       the float to append.
            @return this StringBuffer.
            @see String#valueOf(float)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Int32)">
            Adds the string representation of the specified integer to the end of
            this StringBuffer.
            
            @param i
                       the integer to append.
            @return this StringBuffer.
            @see String#valueOf(int)
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Int64)">
            Adds the string representation of the specified long to the end of this
            StringBuffer.
            
            @param l
                       the long to append.
            @return this StringBuffer.
            @see String#valueOf(long)
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.append(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.append(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.append(biz.ritter.javapi.lang.StringBuffer)" -->
        <member name="M:biz.ritter.javapi.lang.StringBuffer.append(System.Char[])">
            Adds the character array to the end of this buffer.
            
            @param chars
                       the character array to append.
            @return this StringBuffer.
            @throws NullPointerException
                       if {@code chars} is {@code null}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.append(System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.append(biz.ritter.javapi.lang.CharSequence)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.append(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.appendCodePoint(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.delete(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.deleteCharAt(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.getChars(System.Int32,System.Int32,System.Char[],System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Char)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Object)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Char[])" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,biz.ritter.javapi.lang.CharSequence)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.StringBuffer.insert(System.Int32,biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.StringBuffer.replace(System.Int32,System.Int32,System.String)">
            Replaces the characters in the specified range with the contents of the
            specified string.
            
            @param start
                       the inclusive begin index.
            @param end
                       the exclusive end index.
            @param string
                       the string that will replace the contents in the range.
            @return this buffer.
            @throws StringIndexOutOfBoundsException
                        if {@code start} or {@code end} are negative, {@code start}
                        is greater than {@code end} or {@code end} is greater than
                        the length of {@code s}.
        </member>
        <member name="M:biz.ritter.javapi.lang.StringBuffer.reverse">
            Reverses the order of characters in this buffer.
            
            @return this buffer.
        </member>
        <member name="T:biz.ritter.javapi.lang.NoClassDefFoundError">
            Thrown when the virtual machine is unable to locate a class which it has been
            asked to load.
        </member>
        <member name="M:biz.ritter.javapi.lang.NoClassDefFoundError.#ctor">
            Constructs a new {@code NoClassDefFoundError} that includes the current
            stack trace.
        </member>
        <member name="M:biz.ritter.javapi.lang.NoClassDefFoundError.#ctor(System.String)">
            Constructs a new {@code NoClassDefFoundError} with the current stack
            trace and the specified detail message.
            
            @param detailMessage
                       the detail message for this error.
        </member>
        <member name="T:biz.ritter.javapi.util.zip.InflaterOutputStream">
            An ouput stream filter to decompress data compressed in the format of
            Deflater.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterOutputStream.inf">
            The inflater used by InflaterOutputStream to decompress data.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.InflaterOutputStream.buf">
            The internal output buffer.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
            Constructs an InflaterOutputStream with the default Inflater and internal
            output buffer size.
            
            @param out
                       the output stream that InflaterOutputStream will write
                       compressed data into.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Inflater)">
            Constructs an InflaterOutputStream with the specifed Inflater and the
            default internal output buffer size.
            
            @param out
                       the output stream that InflaterOutputStream will write
                       compressed data into.
            @param infl
                       the Inflater used by the InflaterOutputStream to decompress
                       data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.#ctor(biz.ritter.javapi.io.OutputStream,biz.ritter.javapi.util.zip.Inflater,System.Int32)">
            Constructs an InflaterOutputStream with the specifed Inflater and
            internal output buffer size.
            
            @param out
                       the output stream that InflaterOutputStream will write
                       compressed data into.
            @param infl
                       the Inflater used by the InflaterOutputStream to decompress
                       data.
            @param bufLen the size of the internal output buffer.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.close">
            Writes remaining data into the output stream and closes the underling
            output stream data.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.flush">
            Flushes the output stream.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.finish">
            Finishes writing current uncompressed data into the InflaterOutputStream
            but not closes it.
            
            @throws IOException
                        if the stream has been closed or some I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.write(System.Int32)">
            Writes a bit to the uncompressing output stream.
            
            @param b
                       the bit to write to the uncompressing output stream.
            @throws IOException
                        if the stream has been closed or some I/O error occurs.
            @throws ZipException
                        if a zip exception occurs.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.InflaterOutputStream.write(System.Byte[],System.Int32,System.Int32)">
            Writes a bit to the uncompressing output stream.
            
            @param b
                       the byte array to write to the uncompressing output stream.
            @param off
                       the offset in the byte array where the data is first to be
                       uncompressed.
            @param len
                       the number of the bytes to be uncompressed.
            @throws IOException
                        if the stream has been closed or some I/O error occurs.
            @throws ZipException
                        if a zip exception occurs.
            @throws NullPointerException
                        if the byte array is null.
            @throws IndexOutOfBoundsException
                        if the off less than zero or len less than zero or off + len
                        is greater than the byte array length.
        </member>
        <member name="T:biz.ritter.javapi.util.UnknownFormatConversionException">
            An {@code UnknownFormatConversionException} will be thrown if the format
            conversion is unknown.
            
            @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatConversionException.#ctor(System.String)">
            Constructs an {@code UnknownFormatConversionException} with the unknown
            format conversion.
            
            @param s 
                      the unknown format conversion.
        </member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatConversionException.getConversion">
            Returns the conversion associated with the exception.
            
            @return the conversion associated with the exception.
        </member>
        <member name="M:biz.ritter.javapi.util.UnknownFormatConversionException.getMessage">
            Returns the message of the exception.
            
            @return the message of the exception.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.TreeMap`2" -->
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor">
            Constructs a new empty {@code TreeMap} instance.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor(biz.ritter.javapi.util.Comparator{`0})">
             Constructs a new empty {@code TreeMap} instance with the specified
             comparator.
            
             @param comparator
                        the comparator to compare keys with.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor(biz.ritter.javapi.util.Map{`0,`1})">
             Constructs a new {@code TreeMap} instance containing the mappings from
             the specified map and using natural ordering.
            
             @param map
                        the mappings to add.
             @throws ClassCastException
                         if a key in the specified map does not implement the
                         Comparable interface, or if the keys in the map cannot be
                         compared.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.#ctor(biz.ritter.javapi.util.SortedMap{`0,`1})">
             Constructs a new {@code TreeMap} instance containing the mappings from
             the specified SortedMap and using the same comparator.
            
             @param map
                        the mappings to add.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.clear">
             Removes all mappings from this TreeMap, leaving it empty.
            
             @see Map#isEmpty()
             @see #size()
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.clone">
             Returns a new {@code TreeMap} with the same mappings, size and comparator
             as this instance.
            
             @return a shallow copy of this instance.
             @see java.lang.Cloneable
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.comparator">
             Returns the comparator used to compare elements in this map.
            
             @return the comparator or {@code null} if the natural ordering is used.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.containsKey(System.Object)">
             Returns whether this map contains the specified key.
            
             @param key
                        the key to search for.
             @return {@code true} if this map contains the specified key,
                     {@code false} otherwise.
             @throws ClassCastException
                         if the specified key cannot be compared with the keys in this
                         map.
             @throws NullPointerException
                         if the specified key is {@code null} and the comparator
                         cannot handle {@code null} keys.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.containsValue(System.Object)">
             Returns whether this map contains the specified value.
            
             @param value
                        the value to search for.
             @return {@code true} if this map contains the specified value,
                     {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.firstKey">
             Returns the first key in this map.
            
             @return the first key in this map.
             @throws NoSuchElementException
                            if this map is empty.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.get(System.Object)">
             Returns the value of the mapping with the specified key.
            
             @param key
                        the key.
             @return the value of the mapping with the specified key.
             @throws ClassCastException
                         if the key cannot be compared with the keys in this map.
             @throws NullPointerException
                         if the key is {@code null} and the comparator cannot handle
                         {@code null}.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.keySet">
             Returns a set of the keys contained in this map. The set is backed by
             this map so changes to one are reflected by the other. The set does not
             support adding.
            
             @return a set of the keys.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lastKey">
             Returns the last key in this map.
            
             @return the last key in this map.
             @throws NoSuchElementException
                         if this map is empty.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.put(`0,`1)">
             Maps the specified key to the specified value.
            
             @param key
                        the key.
             @param value
                        the value.
             @return the value of any previous mapping with the specified key or
                     {@code null} if there was no mapping.
             @throws ClassCastException
                         if the specified key cannot be compared with the keys in this
                         map.
             @throws NullPointerException
                         if the specified key is {@code null} and the comparator
                         cannot handle {@code null} keys.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.putAll(biz.ritter.javapi.util.Map{`0,`1})">
             Copies all the mappings in the given map to this map. These mappings will
             replace all mappings that this map had for any of the keys currently in
             the given map.
            
             @param map
                        the map to copy mappings from.
             @throws ClassCastException
                         if a key in the specified map cannot be compared with the
                         keys in this map.
             @throws NullPointerException
                         if a key in the specified map is {@code null} and the
                         comparator cannot handle {@code null} keys.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.remove(System.Object)">
             Removes the mapping with the specified key from this map.
            
             @param key
                        the key of the mapping to remove.
             @return the value of the removed mapping or {@code null} if no mapping
                     for the specified key was found.
             @throws ClassCastException
                         if the specified key cannot be compared with the keys in this
                         map.
             @throws NullPointerException
                         if the specified key is {@code null} and the comparator
                         cannot handle {@code null} keys.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.size">
             Returns the number of mappings in this map.
            
             @return the number of mappings in this map.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.TreeMap`2.values" -->
        <member name="M:biz.ritter.javapi.util.TreeMap`2.firstEntry">
            {@inheritDoc}
            
            @see java.util.NavigableMap#firstEntry()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lastEntry">
            {@inheritDoc}
            
            @see java.util.NavigableMap#lastEntry()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.pollFirstEntry">
            {@inheritDoc}
            
            @see java.util.NavigableMap#pollFirstEntry()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.pollLastEntry">
            {@inheritDoc}
            
            @see java.util.NavigableMap#pollLastEntry()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.higherEntry(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#higherEntry(obj)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.higherKey(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#higherKey(obj)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lowerEntry(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#lowerEntry(obj)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.lowerKey(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#lowerKey(obj)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.ceilingEntry(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#ceilingEntry(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.ceilingKey(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#ceilingKey(java.lang.Object)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.floorEntry(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#floorEntry(obj)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.floorKey(`0)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#floorKey(obj)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.entrySet">
             Returns a set containing all of the mappings in this map. Each mapping is
             an instance of {@link MapNS.Entry}. As the set is backed by this map,
             changes in one will be reflected in the other. It does not support adding
             operations.
            
             @return a set of the mappings.
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.navigableKeySet">
            {@inheritDoc}
            
            @see java.util.NavigableMap#navigableKeySet()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.descendingKeySet">
            {@inheritDoc}
            
            @see java.util.NavigableMap#descendingKeySet()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.descendingMap">
            {@inheritDoc}
            
            @see java.util.NavigableMap#descendingMap()
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.subMap(`0,System.Boolean,`0,System.Boolean)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#subMap(Object, boolean, Object, boolean)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.headMap(`0,System.Boolean)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#headMap(Object, boolean)
            @since 1.6
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.tailMap(`0,System.Boolean)">
            {@inheritDoc}
            
            @see java.util.NavigableMap#tailMap(Object, boolean)
            @since 1.6
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.TreeMap`2.subMap(`0,`0)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.TreeMap`2.headMap(`0)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.TreeMap`2.tailMap(`0)" -->
        <member name="T:biz.ritter.javapi.util.TreeMap`2.Entry`2">
            Entry is an internal class which is used to hold the entries of a
            TreeMap.
            
            also used to record key, value, and position
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.NavigableSubMap`2.checkUpperBound(`2)">
            
            @param key
            @return false if the key bigger than the end key (if any)
        </member>
        <member name="M:biz.ritter.javapi.util.TreeMap`2.NavigableSubMap`2.checkLowerBound(`2)">
            
            @param key
            @return false if the key smaller than the start key (if any)
        </member>
        <member name="T:biz.ritter.javapi.util.jar.JarEntry">
             Represents a single file in a JAR archive together with the manifest
             attributes and digital signatures associated with it.
            
             @see JarFile
             @see JarInputStream
        </member>
        <member name="T:biz.ritter.javapi.util.zip.ZipEntry">
             An instance of {@code ZipEntry} represents an entry within a <i>ZIP-archive</i>.
             An entry has attributes such as name (= path) or the size of its data. While
             an entry identifies data stored in an archive, it does not hold the data
             itself. For example when reading a <i>ZIP-file</i> you will first retrieve
             all its entries in a collection and then read the data for a specific entry
             through an input stream.
            
             @see ZipFile
             @see ZipOutputStream
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipEntry.DEFLATED">
            Zip entry state: Deflated.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipEntry.STORED">
            Zip entry state: Stored.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.#ctor(System.String)">
             Constructs a new {@code ZipEntry} with the specified name.
            
             @param name
                        the name of the ZIP entry.
             @throws IllegalArgumentException
                         if the name length is outside the range (> 0xFFFF).
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getComment">
             Gets the comment for this {@code ZipEntry}.
            
             @return the comment for this {@code ZipEntry}, or {@code null} if there
                     is no comment. If we're reading an archive with
                     {@code ZipInputStream} the comment is not available.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getCompressedSize">
             Gets the compressed size of this {@code ZipEntry}.
            
             @return the compressed size, or -1 if the compressed size has not been
                     set.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getCrc">
             Gets the checksum for this {@code ZipEntry}.
            
             @return the checksum, or -1 if the checksum has not been set.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getExtra">
             Gets the extra information for this {@code ZipEntry}.
            
             @return a byte array containing the extra information, or {@code null} if
                     there is none.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getMethod">
             Gets the compression method for this {@code ZipEntry}.
            
             @return the compression method, either {@code DEFLATED}, {@code STORED}
                     or -1 if the compression method has not been set.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getName">
             Gets the name of this {@code ZipEntry}.
            
             @return the entry name.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getSize">
             Gets the uncompressed size of this {@code ZipEntry}.
            
             @return the uncompressed size, or {@code -1} if the size has not been
                     set.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.getTime">
             Gets the last modification time of this {@code ZipEntry}.
            
             @return the last modification time as the number of milliseconds since
                     Jan. 1, 1970.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.isDirectory">
             Determine whether or not this {@code ZipEntry} is a directory.
            
             @return {@code true} when this {@code ZipEntry} is a directory, {@code
                     false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setComment(System.String)">
             Sets the comment for this {@code ZipEntry}.
            
             @param string
                        the comment for this entry.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setCompressedSize(System.Int64)">
             Sets the compressed size for this {@code ZipEntry}.
            
             @param value
                        the compressed size (in bytes).
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.zip.ZipEntry.setCrc(System.Int64)" -->
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setExtra(System.Byte[])">
             Sets the extra information for this {@code ZipEntry}.
            
             @param data
                        a byte array containing the extra information.
             @throws IllegalArgumentException
                         when the length of data is greater than 0xFFFF bytes.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setMethod(System.Int32)">
             Sets the compression method for this {@code ZipEntry}.
            
             @param value
                        the compression method, either {@code DEFLATED} or {@code
                        STORED}.
             @throws IllegalArgumentException
                         when value is not {@code DEFLATED} or {@code STORED}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.zip.ZipEntry.setSize(System.Int64)" -->
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.setTime(System.Int64)">
             Sets the modification time of this {@code ZipEntry}.
            
             @param value
                        the modification time as the number of milliseconds since Jan.
                        1, 1970.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.ToString">
             Returns the string representation of this {@code ZipEntry}.
            
             @return the string representation of this {@code ZipEntry}.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.#ctor(biz.ritter.javapi.util.zip.ZipEntry)">
             Constructs a new {@code ZipEntry} using the values obtained from {@code
             ze}.
            
             @param ze
                        the {@code ZipEntry} from which to obtain values.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.clone">
             Returns a shallow copy of this entry.
            
             @return a copy of this entry.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipEntry.GetHashCode">
             Returns the hash code for this {@code ZipEntry}.
            
             @return the hash code of the entry.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarEntry.#ctor(System.String)">
             Creates a new {@code JarEntry} named name.
            
             @param name
                        The name of the new {@code JarEntry}.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarEntry.#ctor(biz.ritter.javapi.util.zip.ZipEntry)">
             Creates a new {@code JarEntry} using the values obtained from entry.
            
             @param entry
                        The ZipEntry to obtain values from.
        </member>
        <member name="M:biz.ritter.javapi.util.jar.JarEntry.getAttributes">
             Returns the {@code Attributes} object associated with this entry or
             {@code null} if none exists.
            
             @return the {@code Attributes} for this entry.
             @exception IOException
                            If an error occurs obtaining the {@code Attributes}.
             @see Attributes
        </member>
        <member name="T:biz.ritter.javapi.util.Currency">
            This class represents a currency as identified in the ISO 4217 currency
            codes. 
        </member>
        <member name="M:biz.ritter.javapi.util.Currency.#ctor(System.Globalization.RegionInfo)">
            @param currencyCode
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Currency.getInstance(System.String)" -->
        <member name="M:biz.ritter.javapi.util.Currency.getInstance(biz.ritter.javapi.util.Locale)">
            Returns the {@code Currency} instance for this {@code Locale}'s country.
            
            @param locale
                       the {@code Locale} of a country.
            @return the {@code Currency} used in the country defined by the locale parameter.
            
            @throws IllegalArgumentException
                        if the locale's country is not a supported ISO 3166 Country.
        </member>
        <member name="M:biz.ritter.javapi.util.Currency.getCurrencyCode">
            Returns this {@code Currency}'s ISO 4217 currency code.
            
            @return this {@code Currency}'s ISO 4217 currency code.
        </member>
        <member name="M:biz.ritter.javapi.util.Currency.getSymbol">
            Returns the symbol for this currency in the default locale. For instance,
            if the default locale is the US, the symbol of the US dollar is "$". For
            other locales it may be "US$". If no symbol can be determined, the ISO
            4217 currency code of the US dollar is returned.
            
            @return the symbol for this {@code Currency} in the default {@code Locale}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.util.Currency.getSymbol(biz.ritter.javapi.util.Locale)" -->
        <member name="M:biz.ritter.javapi.util.Currency.getDefaultFractionDigits">
            Returns the default number of fraction digits for this currency. For
            instance, the default number of fraction digits for the US dollar is 2.
            For the Japanese Yen the number is 0. In the case of pseudo-currencies,
            such as IMF Special Drawing Rights, -1 is returned.
            
            @return the default number of fraction digits for this currency.
        </member>
        <member name="M:biz.ritter.javapi.util.Currency.ToString">
            Returns ISO 4217 currency code.
            
            @return ISO 4217 currency code.
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadWriteHeapByteBuffer">
            <summary>
            HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
            the implementation of array based byte buffers.
            <p>
            ReadWriteHeapByteBuffer extends HeapByteBuffer with all the write methods.
            </p>
            <p>
            This class is marked final for runtime performance.
            </p>
            
            </summary>
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="T:biz.ritter.javapi.nio.ByteOrder">
            Defines byte order constants.
            <remarks>Class is ported from Apache Harmony project.</remarks>
        </member>
        <member name="F:biz.ritter.javapi.nio.ByteOrder.BIG_ENDIAN">
            This constant represents big endian.
        </member>
        <member name="F:biz.ritter.javapi.nio.ByteOrder.LITTLE_ENDIAN">
            This constant represents little endian.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteOrder.nativeOrder">
            Returns the current platform byte order.
            
            @return the byte order object, which is either LITTLE_ENDIAN or
                    BIG_ENDIAN.
        </member>
        <member name="M:biz.ritter.javapi.nio.ByteOrder.ToString">
            Returns a string that describes this object.
            
            @return "BIG_ENDIAN" for {@link #BIG_ENDIAN ByteOrder.BIG_ENDIAN}
                    objects, "LITTLE_ENDIAN" for
                    {@link #LITTLE_ENDIAN ByteOrder.LITTLE_ENDIAN} objects.
        </member>
        <member name="F:biz.ritter.javapi.lang.Long.TYPE">
            The {@link Class} object that represents the primitive type {@code long}.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Long.parseLong(System.String,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.Long.toString(System.Int64)">
            Converts the specified long value into its decimal string representation.
            The returned string is a concatenation of a minus sign if the number is
            negative and characters from '0' to '9'.
            
            @param l
                       the long to convert.
            @return the decimal string representation of {@code l}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.toString(System.Int64,System.Int32)">
            Converts the specified long value into a string representation based on
            the specified radix. The returned string is a concatenation of a minus
            sign if the number is negative and characters from '0' to '9' and 'a' to
            'z', depending on the radix. If {@code radix} is not in the interval
            defined by {@code Character.MIN_RADIX} and {@code Character.MAX_RADIX}
            then 10 is used as the base for the conversion.
            
            @param l
                       the long to convert.
            @param radix
                       the base to use for the conversion.
            @return the string representation of {@code l}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.numberOfTrailingZeros(System.Int64)">
             Determines the number of trailing zeros in the specified long value after
             the {@link #lowestOneBit(long) lowest one bit}.
            
             @param lng
                        the long to examine.
             @return the number of trailing zeros in {@code lng}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.bitCount(System.Int64)">
             Counts the number of 1 bits in the specified long value; this is also
             referred to as population count.
            
             @param lng
                        the long to examine.
             @return the number of 1 bits in {@code lng}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.reverse(System.Int64)">
            Reverses the order of the bits of the specified long value.
            
            @param lng
                       the long value for which to reverse the bit order.
            @return the reversed value.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.reverseBytes(System.Int64)">
            Reverses the order of the bytes of the specified long value.
            
            @param lng
                       the long value for which to reverse the byte order.
            @return the reversed value.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.signum(System.Int64)">
            Returns the value of the {@code signum} function for the specified long
            value.
            
            @param lng
                       the long value to check.
            @return -1 if {@code lng} is negative, 1 if {@code lng} is positive, 0 if
                    {@code lng} is zero.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Long.numberOfLeadingZeros(System.Int64)">
             Determines the number of leading zeros in the specified long value prior
             to the {@link #highestOneBit(long) highest one bit}.
            
             @param lng
                        the long to examine.
             @return the number of leading zeros in {@code lng}.
             @since 1.5
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.spi.CharsetProvider">
            The service provider class for character sets.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.spi.CharsetProvider.#ctor">
            Constructor for subclassing with concrete types.
            
            @throws SecurityException
                        if there is a security manager installed that does not permit
                        the runtime permission labeled "charsetProvider".
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.spi.CharsetProvider.charsets">
            Returns an iterator over all the available charsets.
            
            @return the iterator.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.spi.CharsetProvider.charsetForName(System.String)" -->
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.nio.charset.Charset" -->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.#ctor(System.String,System.String[])">
            Constructs a <code>Charset</code> object. Duplicated aliases are
            ignored.
            
            @param canonicalName
                       the canonical name of the charset.
            @param aliases
                       an array containing all aliases of the charset. May be null.
            @throws IllegalCharsetNameException
                        on an illegal value being supplied for either
                        <code>canonicalName</code> or for any element of
                        <code>aliases</code>.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.Charset.availableCharsets" -->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.forName(System.String)">
            Gets a <code>Charset</code> instance for the specified charset name.
            
            @param charsetName
                       the canonical name of the charset or an alias.
            @return a <code>Charset</code> instance for the specified charset name.
            @throws IllegalCharsetNameException
                        if the specified charset name is illegal.
            @throws UnsupportedCharsetException
                        if the desired charset is not supported by this runtime.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.isSupported(System.String)">
            Determines whether the specified charset is supported by this runtime.
            
            @param charsetName
                       the name of the charset.
            @return true if the specified charset is supported, otherwise false.
            @throws IllegalCharsetNameException
                        if the specified charset name is illegal.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.getCharsetFromBuiltInProvider(System.String)">
            <summary>
            Check charset name for build in implementation
            </summary>
            <param name="charset"></param>
            <returns></returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.contains(biz.ritter.javapi.nio.charset.Charset)">
            Determines whether this charset is a super set of the given charset.
            
            @param charset
                       a given charset.
            @return true if this charset is a super set of the given charset,
                    false if it's unknown or this charset is not a superset of
                    the given charset.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.newEncoder">
            Gets a new instance of an encoder for this charset.
            
            @return a new instance of an encoder for this charset.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.newDecoder">
            Gets a new instance of a decoder for this charset.
            
            @return a new instance of a decoder for this charset.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.name">
            Gets the canonical name of this charset.
            
            @return this charset's name in canonical form.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.aliases">
            Gets the set of this charset's aliases.
            
            @return an unmodifiable set of this charset's aliases.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.Charset.displayName" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.Charset.displayName(biz.ritter.javapi.util.Locale)" -->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.isRegistered">
            Indicates whether this charset is known to be registered in the IANA
            Charset Registry.
            
            @return true if the charset is known to be registered, otherwise returns
                    false.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.canEncode">
            Returns true if this charset supports encoding, false otherwise.
            
            @return true if this charset supports encoding, false otherwise.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.encode(biz.ritter.javapi.nio.CharBuffer)">
            <summary>
            <para>
            Encodes the content of the give character buffer and outputs to a byte
            buffer that is to be returned.
            </para>
            <para>The default action in case of encoding errors is <c>CodingErrorAction.REPLACE</c>.</para>
            </summary>
            <param name="buffer">the character buffer containing the content to be encoded.</param>
            <returns>the result of the encoding.</returns>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.encode(System.String)">
            <summary>
            <para>Encodes a string and outputs to a byte buffer that is to be returned.</para>
            <para>The default action in case of encoding errors is <c>CodingErrorAction.REPLACE</c>.</para>
            </summary>
            <param name="s">the string to be encoded.</param>
            <returns>the result of the encoding.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.nio.charset.Charset.decode(biz.ritter.javapi.nio.ByteBuffer)" -->
        <member name="M:biz.ritter.javapi.nio.charset.Charset.compareTo(biz.ritter.javapi.nio.charset.Charset)">
            Compares this charset with the given charset. This comparation is
            based on the case insensitive canonical names of the charsets.
            
            @param charset
                       the given object to be compared with.
            @return a negative integer if less than the given object, a positive
                    integer if larger than it, or 0 if equal to it.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.Equals(System.Object)">
            Determines whether this charset equals to the given object. They are
            considered to be equal if they have the same canonical name.
            
            @param obj
                       the given object to be compared with.
            @return true if they have the same canonical name, otherwise false.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.GetHashCode">
            Gets the hash code of this charset.
            
            @return the hash code of this charset.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.ToString">
            Gets a string representation of this charset. Usually this contains the
            canonical name of the charset.
            
            @return a string representation of this charset.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.Charset.defaultCharset">
            Gets the system default charset from the virtual machine.
            
            @return the default charset.
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.IgnoreCaseComparator`1">
            A comparator that ignores case.
        </member>
        <member name="T:biz.ritter.javapi.math.Primality">
            Provides primality probabilistic methods.
        </member>
        <member name="M:biz.ritter.javapi.math.Primality.#ctor">
            Just to denote that this class can't be instantiated. 
        </member>
        <member name="F:biz.ritter.javapi.math.Primality.primes">
            All prime numbers with bit length lesser than 10 bits. 
        </member>
        <member name="F:biz.ritter.javapi.math.Primality.BIprimes">
            All {@code BigInteger} prime numbers with bit length lesser than 8 bits. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.math.Primality.BITS" -->
        <member name="F:biz.ritter.javapi.math.Primality.offsetPrimes">
            It encodes how many i-bit primes there are in the table for
            {@code i=2,...,10}. For example {@code offsetPrimes[6]} says that from
            index {@code 11} exists {@code 7} consecutive {@code 6}-bit prime
            numbers in the array.
        </member>
        <member name="M:biz.ritter.javapi.math.Primality.nextProbablePrime(biz.ritter.javapi.math.BigInteger)">
            It uses the sieve of Eratosthenes to discard several composite numbers in
            some appropriate range (at the moment {@code [this, this + 1024]}). After
            this process it applies the Miller-Rabin test to the numbers that were
            not discarded in the sieve.
            
            @see BigInteger#nextProbablePrime()
            @see #millerRabin(BigInteger, int)
        </member>
        <member name="M:biz.ritter.javapi.math.Primality.consBigInteger(System.Int32,System.Int32,biz.ritter.javapi.util.Random)">
            A random number is generated until a probable prime number is found.
            
            @see BigInteger#BigInteger(int,int,Random)
            @see BigInteger#probablePrime(int,Random)
            @see #isProbablePrime(BigInteger, int)
        </member>
        <member name="M:biz.ritter.javapi.math.Primality.isProbablePrime(biz.ritter.javapi.math.BigInteger,System.Int32)">
            @see BigInteger#isProbablePrime(int)
            @see #millerRabin(BigInteger, int)
            @ar.org.fitc.ref Optimizations: "A. Menezes - Handbook of applied
                             Cryptography, Chapter 4".
        </member>
        <member name="M:biz.ritter.javapi.math.Primality.millerRabin(biz.ritter.javapi.math.BigInteger,System.Int32)">
            The Miller-Rabin primality test.
            
            @param n the input number to be tested.
            @param t the number of trials.
            @return {@code false} if the number is definitely compose, otherwise
                    {@code true} with probability {@code 1 - 4<sup>(-t)</sup>}.
            @ar.org.fitc.ref "D. Knuth, The Art of Computer Programming Vo.2, Section
                             4.5.4., Algorithm P"
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.Int64,System.Int32)">
            <summary>
            CSharp has no >>> operator. This method do same thing!
            </summary>
            <param name="number">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.UInt64,System.Int32)">
            <summary>
            CSharp has no >>> operator. This method do same thing!
            </summary>
            <param name="number">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="M:biz.ritter.javapi.dotnet.lang.Operator.shiftRightUnsignet(System.Int32,System.Int32)">
            <summary>
            CSharp has no >>> operator. This method do same thing!
            </summary>
            <param name="number">value for shift operation</param>
            <param name="shift">shift operator</param>
            <returns>shifted value</returns>
        </member>
        <member name="T:biz.ritter.javapi.lang.reflect.Modifier">
             This class provides static methods to decode class and member modifiers.
            
             @see Class#getModifiers()
             @see Member#getModifiers()
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.PUBLIC">
            The {@code int} value representing the {@code public}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.PRIVATE">
            The {@code int} value representing the {@code private}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.PROTECTED">
            The {@code int} value representing the {@code protected}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.STATIC">
            The {@code int} value representing the {@code static} modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.FINAL">
            The {@code int} value representing the {@code readonly} modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.SYNCHRONIZED">
            The {@code int} value representing the {@code synchronized}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.VOLATILE">
            The {@code int} value representing the {@code volatile}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.TRANSIENT">
            The {@code int} value representing the {@code transient}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.NATIVE">
            The {@code int} value representing the {@code native} modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.INTERFACE">
            The {@code int} value representing the {@code interface}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.ABSTRACT">
            The {@code int} value representing the {@code abstract}
            modifier.
        </member>
        <member name="F:biz.ritter.javapi.lang.reflect.Modifier.STRICT">
            The {@code int} value representing the {@code strict} modifier.
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.#ctor">
            Constructs a new {@code Modifier} instance.
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isAbstract(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            abstract} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    abstract} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isFinal(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            readonly} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    readonly} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isInterface(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            interface} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    interface} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isNative(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            native} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    native} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isPrivate(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            private} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    private} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isProtected(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            protected} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    protected} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isPublic(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            public} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    public} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isStatic(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            static} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    static} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isStrict(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            strict} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    strict} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isSynchronized(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            synchronized} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    synchronized} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isTransient(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            transient} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    transient} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.isVolatile(System.Int32)">
            Indicates whether or not the specified modifiers contain the {@code
            volatile} modifier.
            
            @param modifiers
                       the modifiers to test
            @return {@code true} if the specified modifiers contain the {@code
                    volatile} modifier, {@code false} otherwise
        </member>
        <member name="M:biz.ritter.javapi.lang.reflect.Modifier.toString(System.Int32)">
             Returns a string containing the string representation of all modifiers
             present in the specified modifiers. Modifiers appear in the order
             specified by the Java Language Specification:
            
             {@code public private protected abstract static readonly transient volatile native synchronized interface strict}
            
             @param modifiers
                        the modifiers to print
             @return a printable representation of the modifiers
        </member>
        <member name="T:biz.ritter.javapi.io.LineNumberReader">
            Wraps an existing {@link Reader} and counts the line terminators encountered
            while reading the data. The line number starts at 0 and is incremented any
            time {@code '\r'}, {@code '\n'} or {@code "\r\n"} is read. The class has an
            internal buffer for its data. The size of the buffer defaults to 8 KB.
        </member>
        <member name="T:biz.ritter.javapi.io.BufferedReader">
             Wraps an existing {@link Reader} and <em>buffers</em> the input. Expensive
             interaction with the underlying reader is minimized, since most (smaller)
             requests can be satisfied by accessing the buffer alone. The drawback is that
             some extra space is required to hold the buffer and that copying takes place
             when filling that buffer, but this is usually outweighed by the performance
             benefits.
             
             <p/>A typical application pattern for the class looks like this:<p/>
            
             <pre>
             BufferedReader buf = new BufferedReader(new FileReader(&quot;file.java&quot;));
             </pre>
             
             @see BufferedWriter
             @since 1.1
        </member>
        <!-- Badly formed XML comment ignored for member "F:biz.ritter.javapi.io.BufferedReader.buf" -->
        <member name="M:biz.ritter.javapi.io.BufferedReader.#ctor(biz.ritter.javapi.io.Reader)">
            Constructs a new BufferedReader on the Reader {@code in}. The
            buffer gets the default size (8 KB).
            
            @param in
                       the Reader that is buffered.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedReader.#ctor(biz.ritter.javapi.io.Reader,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.BufferedReader.close">
            Closes this reader. This implementation closes the buffered source reader
            and releases the buffer. Nothing is done if this reader has already been
            closed.
            
            @throws IOException
                        if an error occurs while closing this reader.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedReader.fillBuf" -->
        <member name="M:biz.ritter.javapi.io.BufferedReader.isClosed">
            Indicates whether or not this reader is closed.
            
            @return {@code true} if this reader is closed, {@code false}
                    otherwise.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedReader.mark(System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.BufferedReader.markSupported">
            Indicates whether this reader supports the {@code mark()} and
            {@code reset()} methods. This implementation returns {@code true}.
            
            @return {@code true} for {@code BufferedReader}.
            @see #mark(int)
            @see #reset()
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.read">
             Reads a single character from this reader and returns it with the two
             higher-order bytes set to 0. If possible, BufferedReader returns a
             character from the buffer. If there are no characters available in the
             buffer, it fills the buffer and then returns a character. It returns -1
             if there are no more characters in the source reader.
            
             @return the character read or -1 if the end of the source reader has been
                     reached.
             @throws IOException
                         if this reader is closed or some other I/O error occurs.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedReader.read(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.BufferedReader.chompNewline">
            Peeks at the next input character, refilling the buffer if necessary. If
            this character is a newline character ("\n"), it is discarded.
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.readLine">
            Returns the next line of text available from this reader. A line is
            represented by zero or more characters followed by {@code '\n'},
            {@code '\r'}, {@code "\r\n"} or the end of the reader. The string does
            not include the newline sequence.
            
            @return the contents of the line or {@code null} if no characters were
                    read before the end of the reader has been reached.
            @throws IOException
                        if this reader is closed or some other I/O error occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.ready">
             Indicates whether this reader is ready to be read without blocking.
            
             @return {@code true} if this reader will not block when {@code read} is
                     called, {@code false} if unknown or blocking will occur.
             @throws IOException
                         if this reader is closed or some other I/O error occurs.
             @see #read()
             @see #read(char[], int, int)
             @see #readLine()
        </member>
        <member name="M:biz.ritter.javapi.io.BufferedReader.reset">
            Resets this reader's position to the last {@code mark()} location.
            Invocations of {@code read()} and {@code skip()} will occur from this new
            location.
            
            @throws IOException
                        if this reader is closed or no mark has been set.
            @see #mark(int)
            @see #markSupported()
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.BufferedReader.skip(System.Int64)" -->
        <member name="M:biz.ritter.javapi.io.LineNumberReader.#ctor(biz.ritter.javapi.io.Reader)">
            Constructs a new LineNumberReader on the Reader {@code in}. The internal
            buffer gets the default size (8 KB).
            
            @param in
                       the Reader that is buffered.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.LineNumberReader.#ctor(biz.ritter.javapi.io.Reader,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.LineNumberReader.getLineNumber">
            Returns the current line number for this reader. Numbering starts at 0.
            
            @return the current line number.
        </member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.mark(System.Int32)">
            Sets a mark position in this reader. The parameter {@code readlimit}
            indicates how many characters can be read before the mark is invalidated.
            Sending {@code reset()} will reposition this reader back to the marked
            position, provided that {@code readlimit} has not been surpassed. The
            line number associated with this marked position is also stored so that
            it can be restored when {@code reset()} is called.
            
            @param readlimit
                       the number of characters that can be read from this stream
                       before the mark is invalidated.
            @throws IOException
                        if an error occurs while setting the mark in this reader.
            @see #markSupported()
            @see #reset()
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.LineNumberReader.read" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.LineNumberReader.read(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.io.LineNumberReader.readLine">
            Returns the next line of text available from this reader. A line is
            represented by 0 or more characters followed by {@code '\r'},
            {@code '\n'}, {@code "\r\n"} or the end of the stream. The returned
            string does not include the newline sequence.
            
            @return the contents of the line or {@code null} if no characters have
                    been read before the end of the stream has been reached.
            @throws IOException
                        if this reader is closed or another IOException occurs.
        </member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.reset">
            Resets this reader to the last marked location. It also resets the line
            count to what is was when this reader was marked. This implementation
            resets the source reader.
            
            @throws IOException
                        if this reader is already closed, no mark has been set or the
                        mark is no longer valid because more than {@code readlimit}
                        bytes have been read since setting the mark.
            @see #mark(int)
            @see #markSupported()
        </member>
        <member name="M:biz.ritter.javapi.io.LineNumberReader.setLineNumber(System.Int32)">
            Sets the line number of this reader to the specified {@code lineNumber}.
            Note that this may have side effects on the line number associated with
            the last marked position.
            
            @param lineNumber
                       the new line number value.
            @see #mark(int)
            @see #reset()
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.LineNumberReader.skip(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.util.zip.ZipOutputStream" -->
        <member name="F:biz.ritter.javapi.util.zip.ZipOutputStream.DEFLATED">
            Indicates deflated entries.
        </member>
        <member name="F:biz.ritter.javapi.util.zip.ZipOutputStream.STORED">
            Indicates uncompressed entries.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
             Constructs a new {@code ZipOutputStream} with the specified output
             stream.
            
             @param p1
                        the {@code OutputStream} to write the data to.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.close">
             Closes the current {@code ZipEntry}, if any, and the underlying output
             stream. If the stream is already closed this method does nothing.
            
             @throws IOException
                         If an error occurs closing the stream.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.closeEntry">
             Closes the current {@code ZipEntry}. Any entry terminal data is written
             to the underlying stream.
            
             @throws IOException
                         If an error occurs closing the entry.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.finish">
             Indicates that all entries have been written to the stream. Any terminal
             information is written to the underlying stream.
            
             @throws IOException
                         if an error occurs while terminating the stream.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.putNextEntry(biz.ritter.javapi.util.zip.ZipEntry)">
             Writes entry information to the underlying stream. Data associated with
             the entry can then be written using {@code write()}. After data is
             written {@code closeEntry()} must be called to complete the writing of
             the entry to the underlying stream.
            
             @param ze
                        the {@code ZipEntry} to store.
             @throws IOException
                         If an error occurs storing the entry.
             @see #write
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.setComment(System.String)">
             Sets the {@code ZipFile} comment associated with the file being written.
            
             @param comment
                        the comment associated with the file.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.setLevel(System.Int32)">
             Sets the compression level to be used for writing entry data. This level
             may be set on a per entry basis. The level must have a value between -1
             and 8 according to the {@code Deflater} compression level bounds.
            
             @param level
                        the compression level (ranging from -1 to 8).
             @see Deflater
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.setMethod(System.Int32)">
             Sets the compression method to be used when compressing entry data.
             method must be one of {@code STORED} (for no compression) or {@code
             DEFLATED}.
            
             @param method
                        the compression method to use.
        </member>
        <member name="M:biz.ritter.javapi.util.zip.ZipOutputStream.write(System.Byte[],System.Int32,System.Int32)">
             Writes data for the current entry to the underlying stream.
            
             @exception IOException
                            If an error occurs writing to the stream
        </member>
        <member name="T:biz.ritter.javapi.util.TimerTask">
            The {@code TimerTask} class represents a task to run at a specified time. The task
            may be run once or repeatedly.
            
            @see Timer
            @see java.lang.Object#wait(long)
        </member>
        <member name="M:biz.ritter.javapi.util.TimerTask.#ctor">
            Creates a new {@code TimerTask}.
        </member>
        <member name="M:biz.ritter.javapi.util.TimerTask.cancel">
            Cancels the {@code TimerTask} and removes it from the {@code Timer}'s queue. Generally, it
            returns {@code false} if the call did not prevent a {@code TimerTask} from running at
            least once. Subsequent calls have no effect.
            
            @return {@code true} if the call prevented a scheduled execution
                    from taking place, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.util.TimerTask.scheduledExecutionTime">
            Returns the scheduled execution time. If the task execution is in
            progress it returns the execution time of the ongoing task. Tasks which
            have not yet run return an undefined value.
            
            @return the most recent execution time.
        </member>
        <member name="M:biz.ritter.javapi.util.TimerTask.run">
            The task to run should be specified in the implementation of the {@code run()}
            method.
        </member>
        <member name="T:biz.ritter.javapi.util.NoSuchElementException">
            A {@code NoSuchElementException} is thrown when trying to retrieve an element
            past the end of an Enumeration, or the first or last element from an empty
            Vector.
            
            @see Enumeration
            @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.NoSuchElementException.#ctor">
            Constructs a new {@code NoSuchElementException} with the current stack
            trace filled in.
        </member>
        <member name="M:biz.ritter.javapi.util.NoSuchElementException.#ctor(System.String)">
            Constructs a new {@code NoSuchElementException} with the current stack
            trace and message filled in.
            
            @param detailMessage
                      the detail message for the exception.
        </member>
        <member name="T:biz.ritter.javapi.util.MissingResourceException">
            A {@code MissingResourceException} is thrown by ResourceBundle when a
            resource bundle cannot be found or a resource is missing from a resource
            bundle.
            
            @see ResourceBundle
            @see java.lang.RuntimeException
        </member>
        <member name="M:biz.ritter.javapi.util.MissingResourceException.#ctor(System.String,System.String,System.String)">
            Constructs a new {@code MissingResourceException} with the stack trace,
            message, the class name of the resource bundle and the name of the
            missing resource filled in.
            
            @param detailMessage
                      the detail message for the exception.
            @param className
                      the class name of the resource bundle.
            @param resourceName
                      the name of the missing resource.
        </member>
        <member name="M:biz.ritter.javapi.util.MissingResourceException.getClassName">
            Returns the class name of the resource bundle from which a resource could
            not be found, or in the case of a missing resource, the name of the
            missing resource bundle.
            
            @return the class name of the resource bundle.
        </member>
        <member name="M:biz.ritter.javapi.util.MissingResourceException.getKey">
            Returns the name of the missing resource, or an empty string if the
            resource bundle is missing.
            
            @return the name of the missing resource.
        </member>
        <member name="T:biz.ritter.javapi.util.Locale">
            <summary>
            <code>Locale</code> represents a language/countrycombination. It is an identifier
            which dictates particular conventions for the presentation of information.
            The language codes are two letter lowercase codes as defined by ISO-639. The
            country codes are three letter uppercase codes as defined by ISO-3166.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.CANADA">
            Locale instance for en_CA.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.CANADA_FRENCH">
            Locale instance for fr_CA.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.CHINA">
            Locale instance for zh_CN.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.CHINESE">
            Locale instance for zh.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.ENGLISH">
            Locale instance for en.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.FRANCE">
            Locale instance for fr_FR.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.FRENCH">
            Locale instance for fr.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.GERMAN">
            Locale instance for de.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.GERMANY">
            Locale instance for de_DE.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.ITALIAN">
            Locale instance for it.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.ITALY">
            Locale instance for it_IT.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.JAPAN">
            Locale instance for ja_JP.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.JAPANESE">
            Locale instance for ja.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.KOREA">
            Locale instance for ko_KR.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.KOREAN">
            Locale instance for ko.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.PRC">
            Locale instance for zh_CN.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.SIMPLIFIED_CHINESE">
            Locale instance for zh_CN.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.TAIWAN">
            Locale instance for zh_TW.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.TRADITIONAL_CHINESE">
            Locale instance for zh_TW.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.UK">
            Locale instance for en_GB.
        </member>
        <member name="F:biz.ritter.javapi.util.Locale.US">
            Locale instance for en_US.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.#ctor">
            Constructs a default.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.#ctor(System.String)">
            Constructs a new {@code Locale} using the specified language.
            
            @param language
                       the language this {@code Locale} represents.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.#ctor(System.String,System.String)">
            <summary>
             Create a new Locale instance with language and country
            </summary>
            <param name="country">ISO 3166 two char country code</param>
            <param name="language">ISO 639 two char language code</param>
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getAvailableLocales">
             Gets all list of installed {@code Locale}. At least a {@code Locale} that is equal to
             {@code Locale.US} must be contained in this array.
            
             @return an array of {@code Locale}s.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getCountry">
            Gets the country code for this {@code Locale} or an empty string of no country
            was set.
            
            @return a country code.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getDefault">
            Gets the default {@code Locale}.
            
            @return the default {@code Locale}.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayCountry">
            Gets the full country name in the default {@code Locale} for the country code of
            this {@code Locale}. If there is no matching country name, the country code is
            returned.
            
            @return a country name.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayCountry(biz.ritter.javapi.util.Locale)">
             Gets the full country name in the specified {@code Locale} for the country code
             of this {@code Locale}. If there is no matching country name, the country code is
             returned.
            
             @param locale
                        the {@code Locale} for which the display name is retrieved.
             @return a country name.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayLanguage">
            Gets the full language name in the default {@code Locale} for the language code
            of this {@code Locale}. If there is no matching language name, the language code
            is returned.
            
            @return a language name.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayLanguage(biz.ritter.javapi.util.Locale)">
             Gets the full language name in the specified {@code Locale} for the language code
             of this {@code Locale}. If there is no matching language name, the language code
             is returned.
            
             @param locale
                        the {@code Locale} for which the display name is retrieved.
             @return a language name.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayName">
            Gets the full language, country, and variant names in the default {@code Locale}
            for the codes of this {@code Locale}.
            
            @return a {@code Locale} name.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getDisplayName(biz.ritter.javapi.util.Locale)">
            Gets the full language, country, and variant names in the specified
            Locale for the codes of this {@code Locale}.
            
            @param locale
                       the {@code Locale} for which the display name is retrieved.
            @return a {@code Locale} name.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getISO3Language">
             Gets the three letter ISO language code which corresponds to the language
             code for this {@code Locale}.
            
             @return a three letter ISO language code.
             @throws MissingResourceException
                            if there is no matching three letter ISO language code.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.getLanguage">
            Gets the language code for this {@code Locale} or the empty string of no language
            was set.
            
            @return a language code.
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.GetHashCode">
            Returns an integer hash code for the receiver. Objects which are equal
            return the same value for this method.
            
            @return the receiver's hash.
            @see #equals
        </member>
        <member name="M:biz.ritter.javapi.util.Locale.ToString">
            Returns the string representation of this {@code Locale}. 
            @return the string representation of this {@code Locale}.
        </member>
        <member name="M:biz.ritter.javapi.net.URI.#ctor(System.String)">
             Creates a new URI instance according to the given string {@code uri}.
            
             @param uri
                        the textual URI representation to be parsed into a URI object.
             @throws URISyntaxException
                         if the given string {@code uri} doesn't fit to the
                         specification RFC2396 or could not be parsed correctly.
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.net.URI.#ctor(System.String,System.String,System.String,System.String,System.String)" -->
        <member name="M:biz.ritter.javapi.net.URI.create(System.String)">
             Parses the given argument {@code uri} and creates an appropriate URI
             instance.
            
             @param uri
                        the string which has to be parsed to create the URI instance.
             @return the created instance representing the given URI.
        </member>
        <member name="M:biz.ritter.javapi.net.URI.ToString">
             Returns the textual string representation of this URI instance.
            
             @return the textual string representation of this URI.
        </member>
        <member name="M:biz.ritter.javapi.net.URI.toURL">
             Converts this URI instance to a URL.
            
             @return the created URL representing the same resource as this URI.
             @throws MalformedURLException
                         if an error occurs while creating the URL or no protocol
                         handler could be found.
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.IllegalCharsetNameException">
            An {@code IllegalCharsetNameException} is thrown when an illegal charset name
            is encountered.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.IllegalCharsetNameException.#ctor(System.String)">
            Constructs a new {@code IllegalCharsetNameException} with the supplied
            charset name.
            
            @param charset
                       the encountered illegal charset name.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.IllegalCharsetNameException.getCharsetName">
            Gets the encountered illegal charset name.
            
            @return the encountered illegal charset name.
        </member>
        <member name="T:biz.ritter.javapi.nio.charset.CoderResult">
            <summary>
            Used to indicate the result of encoding/decoding. There are four types of
            results:
            <para>UNDERFLOW indicates that all input has been processed but more input is
            required. It is represented by the unique object <code>CoderResult.UNDERFLOW</code>.</para>
            <para>OVERFLOW indicates an insufficient output buffer size. It is represented
            by the unique object <code>CoderResult.OVERFLOW</code>.
            </para>
            <para>A malformed-input error indicates that an unrecognizable sequence of
            input units has been encountered. Get an instance of this type of result by
            calling <code>CoderResult.malformedForLength(int)</code> with the length of
            the malformed-input.
            </para>
            <para>An unmappable-character error indicates that a sequence of input units
            can not be mapped to the output charset. Get an instance of this type of
            result by calling <code>CoderResult.unmappableForLength(int)</code> with
            the input sequence size indicating the identity of the unmappable character.
            </para>
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CoderResult.UNDERFLOW">
            <summary>
            Result object indicating that there is insufficient data in the
            encoding/decoding buffer or that additional data is required.
            </summary>
        </member>
        <member name="F:biz.ritter.javapi.nio.charset.CoderResult.OVERFLOW">
            <summary>
            Result object used to indicate that the output buffer does not have
            enough space available to store the result of the encoding/decoding.
            </summary>
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.#ctor(System.Int32,System.Int32)">
            Constructs a <code>CoderResult</code> object with its text description.
            
            @param type
                       the type of this result
            @param length
                       the length of the erroneous input
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.malformedForLength(System.Int32)">
            Gets a <code>CoderResult</code> object indicating a malformed-input
            error.
            
            @param length
                       the length of the malformed-input.
            @return a <code>CoderResult</code> object indicating a malformed-input
                    error.
            @throws IllegalArgumentException
                        if <code>length</code> is non-positive.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.unmappableForLength(System.Int32)">
            Gets a <code>CoderResult</code> object indicating an unmappable
            character error.
            
            @param length
                       the length of the input unit sequence denoting the unmappable
                       character.
            @return a <code>CoderResult</code> object indicating an unmappable
                    character error.
            @throws IllegalArgumentException
                        if <code>length</code> is non-positive.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isUnderflow">
            Returns true if this result is an underflow condition.
            
            @return true if an underflow, otherwise false.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isError">
            Returns true if this result represents a malformed-input error or an
            unmappable-character error.
            
            @return true if this is a malformed-input error or an
                    unmappable-character error, otherwise false.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isMalformed">
            Returns true if this result represents a malformed-input error.
            
            @return true if this is a malformed-input error, otherwise false.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isOverflow">
            Returns true if this result is an overflow condition.
            
            @return true if this is an overflow, otherwise false.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.isUnmappable">
            Returns true if this result represents an unmappable-character error.
            
            @return true if this is an unmappable-character error, otherwise false.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.length">
            Gets the length of the erroneous input. The length is only meaningful to
            a malformed-input error or an unmappble character error.
            
            @return the length, as an integer, of this object's erroneous input.
            @throws UnsupportedOperationException
                        if this result is an overflow or underflow.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.throwException">
            Throws an exception corresponding to this coder result.
            
            @throws BufferUnderflowException
                        in case this is an underflow.
            @throws BufferOverflowException
                        in case this is an overflow.
            @throws UnmappableCharacterException
                        in case this is an unmappable-character error.
            @throws MalformedInputException
                        in case this is a malformed-input error.
            @throws CharacterCodingException
                        the default exception.
        </member>
        <member name="M:biz.ritter.javapi.nio.charset.CoderResult.ToString">
            Returns a text description of this result.
            
            @return a text description of this result.
        </member>
        <!-- Badly formed XML comment ignored for member "T:biz.ritter.javapi.lang.refj.WeakReference`1" -->
        <member name="M:biz.ritter.javapi.lang.refj.WeakReference`1.#ctor(`0)">
             Constructs a new weak reference to the given referent. The newly created
             reference is not registered with any reference queue.
            
             @param r the referent to track
        </member>
        <member name="M:biz.ritter.javapi.lang.refj.WeakReference`1.#ctor(`0,biz.ritter.javapi.lang.refj.ReferenceQueue{`0})">
             Constructs a new weak reference to the given referent. The newly created
             reference is registered with the given reference queue.
            
             @param r the referent to track
             @param q the queue to register to the reference object with. A null value
                      results in a weak reference that is not associated with any
                      queue.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.UPPERCASE_LETTER">
            Unicode category constant Lu.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.UNASSIGNED">
            Unicode category constant Cn.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.DECIMAL_DIGIT_NUMBER">
            Unicode category constant Nd.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.toLowerCase(System.Char)">
            Returns the lower case equivalent for the specified character if the
            character is an upper case letter. Otherwise, the specified character is
            returned unchanged.
            
            @param c
                       the character
            @return if {@code c} is an upper case character then its lower case
                    counterpart, otherwise just {@code c}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isUpperCase(System.Char)">
            Indicates whether the specified character is an upper case letter.
            
            @param c
                       the character to check.
            @return {@code true} if {@code c} is a upper case letter; {@code false}
                    otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.#ctor(System.Char)">
            Constructs a new {@code Character} with the specified primitive char
            value.
            
            @param value
                       the primitive char value to store in the new instance.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.charValue">
            Gets the primitive value of this character.
            
            @return this object's primitive value.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.TYPE">
            The {@link Class} object that represents the primitive type {@code char}.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT">
             The minimum value of a supplementary code point, {@code U+010000}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_CODE_POINT">
             The minimum code point value, {@code U+0000}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_CODE_POINT">
             The maximum code point value, {@code U+10FFFF}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_HIGH_SURROGATE">
             The minimum value of a high surrogate or leading surrogate unit in UTF-16
             encoding, {@code '\uD800'}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_HIGH_SURROGATE">
             The maximum value of a high surrogate or leading surrogate unit in UTF-16
             encoding, {@code '\uDBFF'}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_LOW_SURROGATE">
             The minimum value of a low surrogate or trailing surrogate unit in UTF-16
             encoding, {@code '\uDC00'}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_LOW_SURROGATE">
             The maximum value of a low surrogate or trailing surrogate unit in UTF-16
             encoding, {@code '\uDFFF'}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_SURROGATE">
             The minimum value of a surrogate unit in UTF-16 encoding, {@code '\uD800'}.
            
             @since 1.5
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_VALUE">
            The minimum {@code Character} value.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_VALUE">
            The maximum {@code Character} value.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MIN_RADIX">
            The minimum radix used for conversions between characters and integers.
        </member>
        <member name="F:biz.ritter.javapi.lang.Character.MAX_RADIX">
            The maximum radix used for conversions between characters and integers.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.forDigit(System.Int32,System.Int32)">
            Returns the character which represents the specified digit in the
            specified radix. The {@code radix} must be between {@code MIN_RADIX} and
            {@code MAX_RADIX} inclusive; {@code digit} must not be negative and
            smaller than {@code radix}. If any of these conditions does not hold, 0
            is returned.
            
            @param digit
                       the integer value.
            @param radix
                       the radix.
            @return the character which represents the {@code digit} in the
                    {@code radix}.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.digit(System.Char,System.Int32)">
            Convenience method to determine the value of the specified character
            {@code c} in the supplied radix. The value of {@code radix} must be
            between MIN_RADIX and MAX_RADIX.
            
            @param c
                       the character to determine the value of.
            @param radix
                       the radix.
            @return the value of {@code c} in {@code radix} if {@code radix} lies
                    between {@link #MIN_RADIX} and {@link #MAX_RADIX}; -1 otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isSpace(System.Char)">
            Indicates whether the specified character is a Java space.
            
            @param c
                       the character to check.
            @return {@code true} if {@code c} is a Java space; {@code false}
                    otherwise.
            @deprecated Use {@link #isWhitespace(char)}
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isSpaceChar(System.Char)">
            Indicates whether the specified character is a Unicode space character.
            That is, if it is a member of one of the Unicode categories Space
            Separator, Line Separator, or Paragraph Separator.
            
            @param c
                       the character to check.
            @return {@code true} if {@code c} is a Unicode space character,
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isWhitespace(System.Char)">
            Indicates whether the specified character is a whitespace character in
            Java.
            
            @param c
                       the character to check.
            @return {@code true} if the supplied {@code c} is a whitespace character
                    in Java; {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isISOControl(System.Char)">
            Indicates whether the specified character is an ISO control character.
            
            @param c
                       the character to check.
            @return {@code true} if {@code c} is an ISO control character;
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isISOControl(System.Int32)">
            Indicates whether the specified code point is an ISO control character.
            
            @param c
                       the code point to check.
            @return {@code true} if {@code c} is an ISO control character;
                    {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointAt(biz.ritter.javapi.lang.CharSequence,System.Int32)">
             Returns the code point at {@code index} in the specified sequence of
             character units. If the unit at {@code index} is a high-surrogate unit,
             {@code index + 1} is less than the length of the sequence and the unit at
             {@code index + 1} is a low-surrogate unit, then the supplementary code
             point represented by the pair is returned; otherwise the {@code char}
             value at {@code index} is returned.
            
             @param seq
                        the source sequence of {@code char} units.
             @param index
                        the position in {@code seq} from which to retrieve the code
                        point.
             @return the Unicode code point or {@code char} value at {@code index} in
                     {@code seq}.
             @throws NullPointerException
                         if {@code seq} is {@code null}.
             @throws IndexOutOfBoundsException
                         if the {@code index} is negative or greater than or equal to
                         the length of {@code seq}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointAt(System.Char[],System.Int32)">
             Returns the code point at {@code index} in the specified array of
             character units. If the unit at {@code index} is a high-surrogate unit,
             {@code index + 1} is less than the length of the array and the unit at
             {@code index + 1} is a low-surrogate unit, then the supplementary code
             point represented by the pair is returned; otherwise the {@code char}
             value at {@code index} is returned.
            
             @param seq
                        the source array of {@code char} units.
             @param index
                        the position in {@code seq} from which to retrieve the code
                        point.
             @return the Unicode code point or {@code char} value at {@code index} in
                     {@code seq}.
             @throws NullPointerException
                         if {@code seq} is {@code null}.
             @throws IndexOutOfBoundsException
                         if the {@code index} is negative or greater than or equal to
                         the length of {@code seq}.
             @since 1.5
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Character.codePointAt(System.Char[],System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.Character.isSurrogatePair(System.Char,System.Char)">
             Indicates whether the specified character pair is a valid surrogate pair.
            
             @param high
                        the high surrogate unit to test.
             @param low
                        the low surrogate unit to test.
             @return {@code true} if {@code high} is a high-surrogate code unit and
                     {@code low} is a low-surrogate code unit; {@code false}
                     otherwise.
             @see #isHighSurrogate(char)
             @see #isLowSurrogate(char)
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isHighSurrogate(System.Char)">
             Indicates whether {@code ch} is a high- (or leading-) surrogate code unit
             that is used for representing supplementary characters in UTF-16
             encoding.
            
             @param ch
                        the character to test.
             @return {@code true} if {@code ch} is a high-surrogate code unit;
                     {@code false} otherwise.
             @see #isLowSurrogate(char)
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isLowSurrogate(System.Char)">
             Indicates whether {@code ch} is a low- (or trailing-) surrogate code unit
             that is used for representing supplementary characters in UTF-16
             encoding.
            
             @param ch
                        the character to test.
             @return {@code true} if {@code ch} is a low-surrogate code unit;
                     {@code false} otherwise.
             @see #isHighSurrogate(char)
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.toCodePoint(System.Char,System.Char)">
             Converts a surrogate pair into a Unicode code point. This method assumes
             that the pair are valid surrogates. If the pair are <i>not</i> valid
             surrogates, then the result is indeterminate. The
             {@link #isSurrogatePair(char, char)} method should be used prior to this
             method to validate the pair.
            
             @param high
                        the high surrogate unit.
             @param low
                        the low surrogate unit.
             @return the Unicode code point corresponding to the surrogate unit pair.
             @see #isSurrogatePair(char, char)
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointBefore(biz.ritter.javapi.lang.CharSequence,System.Int32)">
             Returns the code point that preceds {@code index} in the specified
             sequence of character units. If the unit at {@code index - 1} is a
             low-surrogate unit, {@code index - 2} is not negative and the unit at
             {@code index - 2} is a high-surrogate unit, then the supplementary code
             point represented by the pair is returned; otherwise the {@code char}
             value at {@code index - 1} is returned.
            
             @param seq
                        the source sequence of {@code char} units.
             @param index
                        the position in {@code seq} following the code
                        point that should be returned.
             @return the Unicode code point or {@code char} value before {@code index}
                     in {@code seq}.
             @throws NullPointerException
                         if {@code seq} is {@code null}.
             @throws IndexOutOfBoundsException
                         if the {@code index} is less than 1 or greater than the
                         length of {@code seq}.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.codePointBefore(System.Char[],System.Int32)">
             Returns the code point that preceds {@code index} in the specified
             array of character units. If the unit at {@code index - 1} is a
             low-surrogate unit, {@code index - 2} is not negative and the unit at
             {@code index - 2} is a high-surrogate unit, then the supplementary code
             point represented by the pair is returned; otherwise the {@code char}
             value at {@code index - 1} is returned.
            
             @param seq
                        the source array of {@code char} units.
             @param index
                        the position in {@code seq} following the code
                        point that should be returned.
             @return the Unicode code point or {@code char} value before {@code index}
                     in {@code seq}.
             @throws NullPointerException
                         if {@code seq} is {@code null}.
             @throws IndexOutOfBoundsException
                         if the {@code index} is less than 1 or greater than the
                         length of {@code seq}.
             @since 1.5
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Character.codePointBefore(System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Character.codePointCount(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Character.codePointCount(System.Char[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Character.offsetByCodePoints(biz.ritter.javapi.lang.CharSequence,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.lang.Character.offsetByCodePoints(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)" -->
        <member name="M:biz.ritter.javapi.lang.Character.toChars(System.Int32)">
            Converts the specified Unicode code point into a UTF-16 encoded sequence
            and returns it as a char array.
            
            @param codePoint
                       the Unicode code point to encode.
            @return the UTF-16 encoded char sequence. If {@code codePoint} is a
                    {@link #isSupplementaryCodePoint(int) supplementary code point},
                    then the returned array contains two characters, otherwise it
                    contains just one character.
            @throws IllegalArgumentException
                        if {@code codePoint} is not a valid Unicode code point.
            @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isValidCodePoint(System.Int32)">
             Indicates whether {@code codePoint} is a valid Unicode code point.
            
             @param codePoint
                        the code point to test.
             @return {@code true} if {@code codePoint} is a valid Unicode code point;
                     {@code false} otherwise.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isSupplementaryCodePoint(System.Int32)">
             Indicates whether {@code codePoint} is within the supplementary code
             point range.
            
             @param codePoint
                        the code point to test.
             @return {@code true} if {@code codePoint} is within the supplementary
                     code point range; {@code false} otherwise.
             @since 1.5
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.isDigit(System.Char)">
            Indicates whether the specified character is a digit.
            
            @param c
                       the character to check.
            @return {@code true} if {@code c} is a digit; {@code false}
                    otherwise.
        </member>
        <member name="M:biz.ritter.javapi.lang.Character.getType(System.Char)">
            Gets the general Unicode category of the specified character.
            
            @param c
                       the character to get the category of.
            @return the Unicode category of {@code c}.
        </member>
        <member name="T:biz.ritter.javapi.io.StreamTokenizer">
            Parses a stream into a set of defined tokens, one at a time. The different
            types of tokens that can be found are numbers, identifiers, quoted strings,
            and different comment styles. The class can be used for limited processing
            of source code of programming languages like Java, although it is nowhere
            near a full parser.
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_EOF">
            The constant representing the end of the stream.
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_EOL">
            The constant representing the end of the line.
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_NUMBER">
            The constant representing a number token.
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_WORD">
            The constant representing a word token.
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.TT_UNKNOWN">
            Internal representation of unknown state.
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.nval">
            Contains a number if the current token is a number ({@code ttype} ==
            {@code TT_NUMBER}).
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.sval">
            Contains a string if the current token is a word ({@code ttype} ==
            {@code TT_WORD}).
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.ttype">
            After calling {@code nextToken()}, {@code ttype} contains the type of
            token that has been read. When a single character is read, its value
            converted to an integer is stored in {@code ttype}. For a quoted string,
            the value is the quoted character. Otherwise, its value is one of the
            following:
            <ul>
            <li> {@code TT_WORD} - the token is a word.</li>
            <li> {@code TT_NUMBER} - the token is a number.</li>
            <li> {@code TT_EOL} - the end of line has been reached. Depends on
            whether {@code eolIsSignificant} is {@code true}.</li>
            <li> {@code TT_EOF} - the end of the stream has been reached.</li>
            </ul>
        </member>
        <member name="F:biz.ritter.javapi.io.StreamTokenizer.tokenTypes">
            Internal character meanings, 0 implies TOKEN_ORDINARY
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.#ctor">
            Private constructor to initialize the default values according to the
            specification.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.#ctor(biz.ritter.javapi.io.InputStream)">
            Constructs a new {@code StreamTokenizer} with {@code is} as source input
            stream. This constructor is deprecated; instead, the constructor that
            takes a {@code Reader} as an arugment should be used.
            
            @param is
                       the source stream from which to parse tokens.
            @throws NullPointerException
                        if {@code is} is {@code null}.
            @deprecated Use {@link #StreamTokenizer(Reader)}
        </member>
        <!-- Badly formed XML comment ignored for member "M:biz.ritter.javapi.io.StreamTokenizer.#ctor(biz.ritter.javapi.io.Reader)" -->
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.commentChar(System.Int32)">
            Specifies that the character {@code ch} shall be treated as a comment
            character.
            
            @param ch
                       the character to be considered a comment character.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.eolIsSignificant(System.Boolean)">
            Specifies whether the end of a line is significant and should be returned
            as {@code TT_EOF} in {@code ttype} by this tokenizer.
            
            @param flag
                       {@code true} if EOL is significant, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.lineno">
            Returns the current line number.
            
            @return this tokenizer's current line number.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.lowerCaseMode(System.Boolean)">
            Specifies whether word tokens should be converted to lower case when they
            are stored in {@code sval}.
            
            @param flag
                       {@code true} if {@code sval} should be converted to lower
                       case, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.nextToken">
            Parses the next token from this tokenizer's source stream or reader. The
            type of the token is stored in the {@code ttype} field, additional
            information may be stored in the {@code nval} or {@code sval} fields.
            
            @return the value of {@code ttype}.
            @throws IOException
                        if an I/O error occurs while parsing the next token.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.ordinaryChar(System.Int32)">
            Specifies that the character {@code ch} shall be treated as an ordinary
            character by this tokenizer. That is, it has no special meaning as a
            comment character, word component, white space, string delimiter or
            number.
            
            @param ch
                       the character to be considered an ordinary character.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.ordinaryChars(System.Int32,System.Int32)">
            Specifies that the characters in the range from {@code low} to {@code hi}
            shall be treated as an ordinary character by this tokenizer. That is,
            they have no special meaning as a comment character, word component,
            white space, string delimiter or number.
            
            @param low
                       the first character in the range of ordinary characters.
            @param hi
                       the last character in the range of ordinary characters.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.parseNumbers">
            Specifies that this tokenizer shall parse numbers.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.pushBack">
            Indicates that the current token should be pushed back and returned again
            the next time {@code nextToken()} is called.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.quoteChar(System.Int32)">
            Specifies that the character {@code ch} shall be treated as a quote
            character.
            
            @param ch
                       the character to be considered a quote character.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.resetSyntax">
            Specifies that all characters shall be treated as ordinary characters.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.slashSlashComments(System.Boolean)">
            Specifies whether "slash-slash" (C++-style) comments shall be recognized.
            This kind of comment ends at the end of the line.
            
            @param flag
                       {@code true} if {@code //} should be recognized as the start
                       of a comment, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.slashStarComments(System.Boolean)">
            Specifies whether "slash-star" (C-style) comments shall be recognized.
            Slash-star comments cannot be nested and end when a star-slash
            combination is found.
            
            @param flag
                       {@code true} if {@code /*} should be recognized as the start
                       of a comment, {@code false} otherwise.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.ToString">
            Returns the state of this tokenizer in a readable format.
            
            @return the current state of this tokenizer.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.whitespaceChars(System.Int32,System.Int32)">
            Specifies that the characters in the range from {@code low} to {@code hi}
            shall be treated as whitespace characters by this tokenizer.
            
            @param low
                       the first character in the range of whitespace characters.
            @param hi
                       the last character in the range of whitespace characters.
        </member>
        <member name="M:biz.ritter.javapi.io.StreamTokenizer.wordChars(System.Int32,System.Int32)">
            Specifies that the characters in the range from {@code low} to {@code hi}
            shall be treated as word characters by this tokenizer. A word consists of
            a word character followed by zero or more word or number characters.
            
            @param low
                       the first character in the range of word characters.
            @param hi
                       the last character in the range of word characters.
        </member>
        <member name="T:biz.ritter.javapi.io.DataOutputStream">
            Wraps an existing {@link OutputStream} and writes typed data to it.
            Typically, this stream can be read in by DataInputStream. Types that can be
            written include byte, 16-bit short, 32-bit int, 32-bit float, 64-bit long,
            64-bit double, byte strings, and {@link DataInput MUTF-8} encoded strings.
            
            @see DataInputStream
        </member>
        <member name="F:biz.ritter.javapi.io.DataOutputStream.written">
            The number of bytes written out so far.
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.#ctor(biz.ritter.javapi.io.OutputStream)">
            Constructs a new {@code DataOutputStream} on the {@code OutputStream}
            {@code out}. Note that data written by this stream is not in a human
            readable form but can be reconstructed by using a {@link DataInputStream}
            on the resulting output.
            
            @param out
                       the target stream for writing.
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.flush">
            Flushes this stream to ensure all pending data is sent out to the target
            stream. This implementation then also flushes the target stream.
            
            @throws IOException
                        if an error occurs attempting to flush this stream.
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.size">
            Returns the total number of bytes written to the target stream so far.
            
            @return the number of bytes written to the target stream.
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.write(System.Byte[],System.Int32,System.Int32)">
            Writes {@code count} bytes from the byte array {@code buffer} starting at
            {@code offset} to the target stream.
            
            @param buffer
                       the buffer to write to the target stream.
            @param offset
                       the index of the first byte in {@code buffer} to write.
            @param count
                       the number of bytes from the {@code buffer} to write.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @throws NullPointerException
                        if {@code buffer} is {@code null}.
            @see DataInputStream#readFully(byte[])
            @see DataInputStream#readFully(byte[], int, int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.write(System.Int32)">
            Writes a byte to the target stream. Only the least significant byte of
            the integer {@code oneByte} is written.
            
            @param oneByte
                       the byte to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readByte()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeBoolean(System.Boolean)">
            Writes a boolean to the target stream.
            
            @param val
                       the boolean value to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readBoolean()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeByte(System.Int32)">
            Writes an 8-bit byte to the target stream. Only the least significant
            byte of the integer {@code val} is written.
            
            @param val
                       the byte value to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readByte()
            @see DataInputStream#readUnsignedByte()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeBytes(System.String)">
            Writes the low order bytes from a string to the target stream.
            
            @param str
                       the string containing the bytes to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readFully(byte[])
            @see DataInputStream#readFully(byte[],int,int)
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeChar(System.Int32)">
            Writes a 16-bit character to the target stream. Only the two lower bytes
            of the integer {@code val} are written, with the higher one written
            first. This corresponds to the Unicode value of {@code val}.
            
            @param val
                       the character to write to the target stream
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readChar()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeChars(System.String)">
            Writes the 16-bit characters contained in {@code str} to the target
            stream.
            
            @param str
                       the string that contains the characters to write to this
                       stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readChar()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeDouble(System.Double)">
            Writes a 64-bit double to the target stream. The resulting output is the
            eight bytes resulting from calling Double.doubleToLongBits().
            
            @param val
                       the double to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readDouble()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeFloat(System.Single)">
            Writes a 32-bit float to the target stream. The resulting output is the
            four bytes resulting from calling Float.floatToIntBits().
            
            @param val
                       the float to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readFloat()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeInt(System.Int32)">
            Writes a 32-bit int to the target stream. The resulting output is the
            four bytes, highest order first, of {@code val}.
            
            @param val
                       the int to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readInt()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeLong(System.Int64)">
            Writes a 64-bit long to the target stream. The resulting output is the
            eight bytes, highest order first, of {@code val}.
            
            @param val
                       the long to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readLong()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeShort(System.Int32)">
            Writes the specified 16-bit short to the target stream. Only the lower
            two bytes of the integer {@code val} are written, with the higher one
            written first.
            
            @param val
                       the short to write to the target stream.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @see DataInputStream#readShort()
            @see DataInputStream#readUnsignedShort()
        </member>
        <member name="M:biz.ritter.javapi.io.DataOutputStream.writeUTF(System.String)">
            Writes the specified encoded in {@link DataInput modified UTF-8} to this
            stream.
            
            @param str
                       the string to write to the target stream encoded in
                       {@link DataInput modified UTF-8}.
            @throws IOException
                        if an error occurs while writing to the target stream.
            @throws UTFDataFormatException
                        if the encoded string is longer than 65535 bytes.
            @see DataInputStream#readUTF()
        </member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.#ctor(biz.ritter.javapi.lang.Class,biz.ritter.javapi.lang.Class)">
            <p>
            Constructs an instance with the bean's {@link Class} and a customizer
            {@link Class}. The descriptor's {@link #getName()} is set as the
            unqualified name of the <code>beanClass</code>.
            </p>
            
            @param beanClass
                       The bean's Class.
            @param customizerClass
                       The bean's customizer Class.
        </member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.#ctor(biz.ritter.javapi.lang.Class)">
            <p>
            Constructs an instance with the bean's {@link Class}. The descriptor's
            {@link #getName()} is set as the unqualified name of the
            <code>beanClass</code>.
            </p>
            
            @param beanClass
                       The bean's Class.
        </member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.getCustomizerClass">
            <p>
            Gets the bean's customizer {@link Class}/
            </p>
            
            @return A {@link Class} instance or <code>null</code>.
        </member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.getBeanClass">
            <p>
            Gets the bean's {@link Class}.
            </p>
            
            @return A {@link Class} instance.
        </member>
        <member name="M:biz.ritter.javapi.beans.BeanDescriptor.getShortClassName(biz.ritter.javapi.lang.Class)">
            <p>
            Utility method for getting the unqualified name of a {@link Class}.
            </p>
            
            @param leguminaClass
                       The Class to get the name from.
            @return A String instance or <code>null</code>.
        </member>
        <member name="T:biz.ritter.javapi.nio.ReadOnlyHeapByteBuffer">
            HeapByteBuffer, ReadWriteHeapByteBuffer and ReadOnlyHeapByteBuffer compose
            the implementation of array based byte buffers.
            <p>
            ReadOnlyHeapByteBuffer extends HeapByteBuffer with all the write methods
            throwing read only exception.
            </p>
            <p>
            This class is marked final for runtime performance.
            </p>
            
        </member>
        <member name="T:biz.ritter.javapi.io.EOFException">
            Thrown when a program encounters the end of a file or stream during an input
            operation.
        </member>
        <member name="M:biz.ritter.javapi.io.EOFException.#ctor">
            Constructs a new {@code EOFException} with its stack trace filled in.
        </member>
        <member name="M:biz.ritter.javapi.io.EOFException.#ctor(System.String)">
            Constructs a new {@code EOFException} with its stack trace and detail
            message filled in.
            
            @param detailMessage
                       the detail message for this exception.
        </member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetProviderImpl.charsets">
            Answers an iterator over the list of available charsets.
            
            @return available charsets.
        </member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetProviderImpl.charsetForName(System.String)">
            Answers the charset with the given canonical or alias name.
            
            Subsequent requests for the same charset will answer the same instance.
            If the charset is unavailable the method returns <code>null</code>.
            
            @param charsetName
                       the name of a character set.
            @return the charset requested, or <code>null</code> if unavailable.
        </member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetImpl.contains(biz.ritter.javapi.nio.charset.Charset)">
            Determines whether this charset is a super set of the given charset.
            
            @param charset
                       a given charset.
            @return true if this charset is a super set of the given charset,
                    false if it's unknown or this charset is not a superset of
                    the given charset.
        </member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetImpl.newEncoder">
            Gets a new instance of an encoder for this charset.
            
            @return a new instance of an encoder for this charset.
        </member>
        <member name="M:biz.ritter.javapi.dotnet.nio.charset.CharsetImpl.newDecoder">
            Gets a new instance of a decoder for this charset.
            
            @return a new instance of a decoder for this charset.
        </member>
    </members>
</doc>
